"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ai-sdk";
exports.ids = ["vendor-chunks/@ai-sdk"];
exports.modules = {

/***/ "(rsc)/./node_modules/@ai-sdk/amazon-bedrock/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@ai-sdk/amazon-bedrock/dist/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   bedrock: () => (/* binding */ bedrock),\n/* harmony export */   createAmazonBedrock: () => (/* binding */ createAmazonBedrock)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_anthropic_internal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ai-sdk/anthropic/internal */ \"(rsc)/./node_modules/@ai-sdk/anthropic/dist/internal/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/index.js\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _smithy_eventstream_codec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/eventstream-codec */ \"(rsc)/./node_modules/@smithy/eventstream-codec/dist-es/EventStreamCodec.js\");\n/* harmony import */ var _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-es/toUtf8.js\");\n/* harmony import */ var _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/@smithy/util-utf8/dist-es/fromUtf8.js\");\n/* harmony import */ var aws4fetch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! aws4fetch */ \"(rsc)/./node_modules/aws4fetch/dist/aws4fetch.esm.mjs\");\n// src/bedrock-provider.ts\n\n\n// src/version.ts\nvar VERSION =  true ? \"3.0.23\" : 0;\n\n// src/bedrock-provider.ts\n\n\n// src/bedrock-chat-language-model.ts\n\n\n\n// src/bedrock-api-types.ts\nvar BEDROCK_CACHE_POINT = {\n  cachePoint: { type: \"default\" }\n};\nvar BEDROCK_STOP_REASONS = [\n  \"stop\",\n  \"stop_sequence\",\n  \"end_turn\",\n  \"length\",\n  \"max_tokens\",\n  \"content-filter\",\n  \"content_filtered\",\n  \"guardrail_intervened\",\n  \"tool-calls\",\n  \"tool_use\"\n];\nvar BEDROCK_IMAGE_MIME_TYPES = {\n  \"image/jpeg\": \"jpeg\",\n  \"image/png\": \"png\",\n  \"image/gif\": \"gif\",\n  \"image/webp\": \"webp\"\n};\nvar BEDROCK_DOCUMENT_MIME_TYPES = {\n  \"application/pdf\": \"pdf\",\n  \"text/csv\": \"csv\",\n  \"application/msword\": \"doc\",\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": \"docx\",\n  \"application/vnd.ms-excel\": \"xls\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": \"xlsx\",\n  \"text/html\": \"html\",\n  \"text/plain\": \"txt\",\n  \"text/markdown\": \"md\"\n};\n\n// src/bedrock-chat-options.ts\n\nvar bedrockProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /**\n   * Additional inference parameters that the model supports,\n   * beyond the base set of inference parameters that Converse\n   * supports in the inferenceConfig field\n   */\n  additionalModelRequestFields: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional(),\n  reasoningConfig: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"enabled\"), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"disabled\")]).optional(),\n    budgetTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().optional()\n  }).optional()\n});\n\n// src/bedrock-error.ts\n\nvar BedrockErrorSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n});\n\n// src/bedrock-event-stream-response-handler.ts\n\n\n\n\nvar createBedrockEventStreamResponseHandler = (chunkSchema) => async ({ response }) => {\n  const responseHeaders = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.extractResponseHeaders)(response);\n  if (response.body == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.EmptyResponseBodyError({});\n  }\n  const codec = new _smithy_eventstream_codec__WEBPACK_IMPORTED_MODULE_3__.EventStreamCodec(_smithy_util_utf8__WEBPACK_IMPORTED_MODULE_4__.toUtf8, _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_5__.fromUtf8);\n  let buffer = new Uint8Array(0);\n  const textDecoder = new TextDecoder();\n  return {\n    responseHeaders,\n    value: response.body.pipeThrough(\n      new TransformStream({\n        async transform(chunk, controller) {\n          var _a, _b;\n          const newBuffer = new Uint8Array(buffer.length + chunk.length);\n          newBuffer.set(buffer);\n          newBuffer.set(chunk, buffer.length);\n          buffer = newBuffer;\n          while (buffer.length >= 4) {\n            const totalLength = new DataView(\n              buffer.buffer,\n              buffer.byteOffset,\n              buffer.byteLength\n            ).getUint32(0, false);\n            if (buffer.length < totalLength) {\n              break;\n            }\n            try {\n              const subView = buffer.subarray(0, totalLength);\n              const decoded = codec.decode(subView);\n              buffer = buffer.slice(totalLength);\n              if (((_a = decoded.headers[\":message-type\"]) == null ? void 0 : _a.value) === \"event\") {\n                const data = textDecoder.decode(decoded.body);\n                const parsedDataResult = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)({ text: data });\n                if (!parsedDataResult.success) {\n                  controller.enqueue(parsedDataResult);\n                  break;\n                }\n                delete parsedDataResult.value.p;\n                let wrappedData = {\n                  [(_b = decoded.headers[\":event-type\"]) == null ? void 0 : _b.value]: parsedDataResult.value\n                };\n                const validatedWrappedData = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.safeValidateTypes)({\n                  value: wrappedData,\n                  schema: chunkSchema\n                });\n                if (!validatedWrappedData.success) {\n                  controller.enqueue(validatedWrappedData);\n                } else {\n                  controller.enqueue({\n                    success: true,\n                    value: validatedWrappedData.value,\n                    rawValue: wrappedData\n                  });\n                }\n              }\n            } catch (e) {\n              break;\n            }\n          }\n        }\n      })\n    )\n  };\n};\n\n// src/bedrock-prepare-tools.ts\n\n\n\nfunction prepareTools({\n  tools,\n  toolChoice,\n  modelId\n}) {\n  const toolWarnings = [];\n  const betas = /* @__PURE__ */ new Set();\n  if (tools == null || tools.length === 0) {\n    return {\n      toolConfig: {},\n      additionalTools: void 0,\n      betas,\n      toolWarnings\n    };\n  }\n  const supportedTools = tools.filter((tool) => {\n    if (tool.type === \"provider-defined\" && tool.id === \"anthropic.web_search_20250305\") {\n      toolWarnings.push({\n        type: \"unsupported-tool\",\n        tool,\n        details: \"The web_search_20250305 tool is not supported on Amazon Bedrock.\"\n      });\n      return false;\n    }\n    return true;\n  });\n  if (supportedTools.length === 0) {\n    return {\n      toolConfig: {},\n      additionalTools: void 0,\n      betas,\n      toolWarnings\n    };\n  }\n  const isAnthropicModel = modelId.includes(\"anthropic.\");\n  const providerDefinedTools = supportedTools.filter(\n    (t) => t.type === \"provider-defined\"\n  );\n  const functionTools = supportedTools.filter((t) => t.type === \"function\");\n  let additionalTools = void 0;\n  const bedrockTools = [];\n  const usingAnthropicTools = isAnthropicModel && providerDefinedTools.length > 0;\n  if (usingAnthropicTools) {\n    if (functionTools.length > 0) {\n      toolWarnings.push({\n        type: \"unsupported-setting\",\n        setting: \"tools\",\n        details: \"Mixed Anthropic provider-defined tools and standard function tools are not supported in a single call to Bedrock. Only Anthropic tools will be used.\"\n      });\n    }\n    const {\n      toolChoice: preparedAnthropicToolChoice,\n      toolWarnings: anthropicToolWarnings,\n      betas: anthropicBetas\n    } = (0,_ai_sdk_anthropic_internal__WEBPACK_IMPORTED_MODULE_6__.prepareTools)({\n      tools: providerDefinedTools,\n      toolChoice\n    });\n    toolWarnings.push(...anthropicToolWarnings);\n    anthropicBetas.forEach((beta) => betas.add(beta));\n    if (preparedAnthropicToolChoice) {\n      additionalTools = {\n        tool_choice: preparedAnthropicToolChoice\n      };\n    }\n    for (const tool of providerDefinedTools) {\n      const toolFactory = Object.values(_ai_sdk_anthropic_internal__WEBPACK_IMPORTED_MODULE_6__.anthropicTools).find((factory) => {\n        const instance = factory({});\n        return instance.id === tool.id;\n      });\n      if (toolFactory != null) {\n        const fullToolDefinition = toolFactory({});\n        bedrockTools.push({\n          toolSpec: {\n            name: tool.name,\n            inputSchema: {\n              json: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.asSchema)(fullToolDefinition.inputSchema).jsonSchema\n            }\n          }\n        });\n      } else {\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n      }\n    }\n  } else {\n    for (const tool of providerDefinedTools) {\n      toolWarnings.push({ type: \"unsupported-tool\", tool });\n    }\n  }\n  for (const tool of functionTools) {\n    bedrockTools.push({\n      toolSpec: {\n        name: tool.name,\n        description: tool.description,\n        inputSchema: {\n          json: tool.inputSchema\n        }\n      }\n    });\n  }\n  let bedrockToolChoice = void 0;\n  if (!usingAnthropicTools && bedrockTools.length > 0 && toolChoice) {\n    const type = toolChoice.type;\n    switch (type) {\n      case \"auto\":\n        bedrockToolChoice = { auto: {} };\n        break;\n      case \"required\":\n        bedrockToolChoice = { any: {} };\n        break;\n      case \"none\":\n        bedrockTools.length = 0;\n        bedrockToolChoice = void 0;\n        break;\n      case \"tool\":\n        bedrockToolChoice = { tool: { name: toolChoice.toolName } };\n        break;\n      default: {\n        const _exhaustiveCheck = type;\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n          functionality: `tool choice type: ${_exhaustiveCheck}`\n        });\n      }\n    }\n  }\n  const toolConfig = bedrockTools.length > 0 ? { tools: bedrockTools, toolChoice: bedrockToolChoice } : {};\n  return {\n    toolConfig,\n    additionalTools,\n    betas,\n    toolWarnings\n  };\n}\n\n// src/convert-to-bedrock-chat-messages.ts\n\n\nfunction getCachePoint(providerMetadata) {\n  var _a;\n  return (_a = providerMetadata == null ? void 0 : providerMetadata.bedrock) == null ? void 0 : _a.cachePoint;\n}\nasync function convertToBedrockChatMessages(prompt) {\n  const blocks = groupIntoBlocks(prompt);\n  let system = [];\n  const messages = [];\n  let documentCounter = 0;\n  const generateDocumentName = () => `document-${++documentCounter}`;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    const isLastBlock = i === blocks.length - 1;\n    const type = block.type;\n    switch (type) {\n      case \"system\": {\n        if (messages.length > 0) {\n          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n            functionality: \"Multiple system messages that are separated by user/assistant messages\"\n          });\n        }\n        for (const message of block.messages) {\n          system.push({ text: message.content });\n          if (getCachePoint(message.providerOptions)) {\n            system.push(BEDROCK_CACHE_POINT);\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        const bedrockContent = [];\n        for (const message of block.messages) {\n          const { role, content, providerOptions } = message;\n          switch (role) {\n            case \"user\": {\n              for (let j = 0; j < content.length; j++) {\n                const part = content[j];\n                switch (part.type) {\n                  case \"text\": {\n                    bedrockContent.push({\n                      text: part.text\n                    });\n                    break;\n                  }\n                  case \"file\": {\n                    if (part.data instanceof URL) {\n                      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                        functionality: \"File URL data\"\n                      });\n                    }\n                    if (part.mediaType.startsWith(\"image/\")) {\n                      bedrockContent.push({\n                        image: {\n                          format: getBedrockImageFormat(part.mediaType),\n                          source: { bytes: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data) }\n                        }\n                      });\n                    } else {\n                      if (!part.mediaType) {\n                        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                          functionality: \"file without mime type\",\n                          message: \"File mime type is required in user message part content\"\n                        });\n                      }\n                      bedrockContent.push({\n                        document: {\n                          format: getBedrockDocumentFormat(part.mediaType),\n                          name: generateDocumentName(),\n                          source: { bytes: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data) }\n                        }\n                      });\n                    }\n                    break;\n                  }\n                }\n              }\n              break;\n            }\n            case \"tool\": {\n              for (const part of content) {\n                let toolResultContent;\n                const output = part.output;\n                switch (output.type) {\n                  case \"content\": {\n                    toolResultContent = output.value.map((contentPart) => {\n                      switch (contentPart.type) {\n                        case \"text\":\n                          return { text: contentPart.text };\n                        case \"media\":\n                          if (!contentPart.mediaType.startsWith(\"image/\")) {\n                            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                              functionality: `media type: ${contentPart.mediaType}`\n                            });\n                          }\n                          const format = getBedrockImageFormat(\n                            contentPart.mediaType\n                          );\n                          return {\n                            image: {\n                              format,\n                              source: { bytes: contentPart.data }\n                            }\n                          };\n                      }\n                    });\n                    break;\n                  }\n                  case \"text\":\n                  case \"error-text\":\n                    toolResultContent = [{ text: output.value }];\n                    break;\n                  case \"json\":\n                  case \"error-json\":\n                  default:\n                    toolResultContent = [\n                      { text: JSON.stringify(output.value) }\n                    ];\n                    break;\n                }\n                bedrockContent.push({\n                  toolResult: {\n                    toolUseId: part.toolCallId,\n                    content: toolResultContent\n                  }\n                });\n              }\n              break;\n            }\n            default: {\n              const _exhaustiveCheck = role;\n              throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n            }\n          }\n          if (getCachePoint(providerOptions)) {\n            bedrockContent.push(BEDROCK_CACHE_POINT);\n          }\n        }\n        messages.push({ role: \"user\", content: bedrockContent });\n        break;\n      }\n      case \"assistant\": {\n        const bedrockContent = [];\n        for (let j = 0; j < block.messages.length; j++) {\n          const message = block.messages[j];\n          const isLastMessage = j === block.messages.length - 1;\n          const { content } = message;\n          for (let k = 0; k < content.length; k++) {\n            const part = content[k];\n            const isLastContentPart = k === content.length - 1;\n            switch (part.type) {\n              case \"text\": {\n                if (!part.text.trim()) {\n                  break;\n                }\n                bedrockContent.push({\n                  text: (\n                    // trim the last text part if it's the last message in the block\n                    // because Bedrock does not allow trailing whitespace\n                    // in pre-filled assistant responses\n                    trimIfLast(\n                      isLastBlock,\n                      isLastMessage,\n                      isLastContentPart,\n                      part.text\n                    )\n                  )\n                });\n                break;\n              }\n              case \"reasoning\": {\n                const reasoningMetadata = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n                  provider: \"bedrock\",\n                  providerOptions: part.providerOptions,\n                  schema: bedrockReasoningMetadataSchema\n                });\n                if (reasoningMetadata != null) {\n                  if (reasoningMetadata.signature != null) {\n                    bedrockContent.push({\n                      reasoningContent: {\n                        reasoningText: {\n                          // trim the last text part if it's the last message in the block\n                          // because Bedrock does not allow trailing whitespace\n                          // in pre-filled assistant responses\n                          text: trimIfLast(\n                            isLastBlock,\n                            isLastMessage,\n                            isLastContentPart,\n                            part.text\n                          ),\n                          signature: reasoningMetadata.signature\n                        }\n                      }\n                    });\n                  } else if (reasoningMetadata.redactedData != null) {\n                    bedrockContent.push({\n                      reasoningContent: {\n                        redactedReasoning: {\n                          data: reasoningMetadata.redactedData\n                        }\n                      }\n                    });\n                  }\n                }\n                break;\n              }\n              case \"tool-call\": {\n                bedrockContent.push({\n                  toolUse: {\n                    toolUseId: part.toolCallId,\n                    name: part.toolName,\n                    input: part.input\n                  }\n                });\n                break;\n              }\n            }\n          }\n          if (getCachePoint(message.providerOptions)) {\n            bedrockContent.push(BEDROCK_CACHE_POINT);\n          }\n        }\n        messages.push({ role: \"assistant\", content: bedrockContent });\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = type;\n        throw new Error(`Unsupported type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { system, messages };\n}\nfunction getBedrockImageFormat(mimeType) {\n  if (!mimeType) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n      functionality: \"image without mime type\",\n      message: \"Image mime type is required in user message part content\"\n    });\n  }\n  const format = BEDROCK_IMAGE_MIME_TYPES[mimeType];\n  if (!format) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n      functionality: `image mime type: ${mimeType}`,\n      message: `Unsupported image mime type: ${mimeType}, expected one of: ${Object.keys(BEDROCK_IMAGE_MIME_TYPES).join(\", \")}`\n    });\n  }\n  return format;\n}\nfunction getBedrockDocumentFormat(mimeType) {\n  const format = BEDROCK_DOCUMENT_MIME_TYPES[mimeType];\n  if (!format) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n      functionality: `file mime type: ${mimeType}`,\n      message: `Unsupported file mime type: ${mimeType}, expected one of: ${Object.keys(BEDROCK_DOCUMENT_MIME_TYPES).join(\", \")}`\n    });\n  }\n  return format;\n}\nfunction trimIfLast(isLastBlock, isLastMessage, isLastContentPart, text) {\n  return isLastBlock && isLastMessage && isLastContentPart ? text.trim() : text;\n}\nfunction groupIntoBlocks(prompt) {\n  const blocks = [];\n  let currentBlock = void 0;\n  for (const message of prompt) {\n    const { role } = message;\n    switch (role) {\n      case \"system\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"system\") {\n          currentBlock = { type: \"system\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"assistant\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"assistant\") {\n          currentBlock = { type: \"assistant\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"user\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"user\") {\n          currentBlock = { type: \"user\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"tool\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"user\") {\n          currentBlock = { type: \"user\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return blocks;\n}\n\n// src/map-bedrock-finish-reason.ts\nfunction mapBedrockFinishReason(finishReason) {\n  switch (finishReason) {\n    case \"stop_sequence\":\n    case \"end_turn\":\n      return \"stop\";\n    case \"max_tokens\":\n      return \"length\";\n    case \"content_filtered\":\n    case \"guardrail_intervened\":\n      return \"content-filter\";\n    case \"tool_use\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/bedrock-chat-language-model.ts\nvar BedrockChatLanguageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n    this.provider = \"amazon-bedrock\";\n    this.supportedUrls = {\n      // no supported urls for bedrock\n    };\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b, _c, _d, _e, _f;\n    const bedrockOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"bedrock\",\n      providerOptions,\n      schema: bedrockProviderOptions\n    })) != null ? _a : {};\n    const warnings = [];\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"frequencyPenalty\"\n      });\n    }\n    if (presencePenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"presencePenalty\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"seed\"\n      });\n    }\n    if (responseFormat != null && responseFormat.type !== \"text\" && responseFormat.type !== \"json\") {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"Only text and json response formats are supported.\"\n      });\n    }\n    if (tools != null && (responseFormat == null ? void 0 : responseFormat.type) === \"json\") {\n      if (tools.length > 0) {\n        warnings.push({\n          type: \"other\",\n          message: \"JSON response format does not support tools. The provided tools are ignored.\"\n        });\n      }\n    }\n    const jsonResponseTool = (responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null ? {\n      type: \"function\",\n      name: \"json\",\n      description: \"Respond with a JSON object.\",\n      inputSchema: responseFormat.schema\n    } : void 0;\n    const { toolConfig, additionalTools, toolWarnings, betas } = prepareTools({\n      tools: jsonResponseTool ? [jsonResponseTool, ...tools != null ? tools : []] : tools,\n      toolChoice: jsonResponseTool != null ? { type: \"tool\", toolName: jsonResponseTool.name } : toolChoice,\n      modelId: this.modelId\n    });\n    warnings.push(...toolWarnings);\n    if (additionalTools) {\n      bedrockOptions.additionalModelRequestFields = {\n        ...bedrockOptions.additionalModelRequestFields,\n        ...additionalTools\n      };\n    }\n    const isThinking = ((_b = bedrockOptions.reasoningConfig) == null ? void 0 : _b.type) === \"enabled\";\n    const thinkingBudget = (_c = bedrockOptions.reasoningConfig) == null ? void 0 : _c.budgetTokens;\n    const inferenceConfig = {\n      ...maxOutputTokens != null && { maxTokens: maxOutputTokens },\n      ...temperature != null && { temperature },\n      ...topP != null && { topP },\n      ...topK != null && { topK },\n      ...stopSequences != null && { stopSequences }\n    };\n    if (isThinking && thinkingBudget != null) {\n      if (inferenceConfig.maxTokens != null) {\n        inferenceConfig.maxTokens += thinkingBudget;\n      } else {\n        inferenceConfig.maxTokens = thinkingBudget + 4096;\n      }\n      bedrockOptions.additionalModelRequestFields = {\n        ...bedrockOptions.additionalModelRequestFields,\n        thinking: {\n          type: (_d = bedrockOptions.reasoningConfig) == null ? void 0 : _d.type,\n          budget_tokens: thinkingBudget\n        }\n      };\n    }\n    if (isThinking && inferenceConfig.temperature != null) {\n      delete inferenceConfig.temperature;\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"temperature\",\n        details: \"temperature is not supported when thinking is enabled\"\n      });\n    }\n    if (isThinking && inferenceConfig.topP != null) {\n      delete inferenceConfig.topP;\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"topP\",\n        details: \"topP is not supported when thinking is enabled\"\n      });\n    }\n    if (isThinking && inferenceConfig.topK != null) {\n      delete inferenceConfig.topK;\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"topK\",\n        details: \"topK is not supported when thinking is enabled\"\n      });\n    }\n    const hasAnyTools = ((_f = (_e = toolConfig.tools) == null ? void 0 : _e.length) != null ? _f : 0) > 0 || additionalTools;\n    let filteredPrompt = prompt;\n    if (!hasAnyTools) {\n      const hasToolContent = prompt.some(\n        (message) => \"content\" in message && Array.isArray(message.content) && message.content.some(\n          (part) => part.type === \"tool-call\" || part.type === \"tool-result\"\n        )\n      );\n      if (hasToolContent) {\n        filteredPrompt = prompt.map(\n          (message) => message.role === \"system\" ? message : {\n            ...message,\n            content: message.content.filter(\n              (part) => part.type !== \"tool-call\" && part.type !== \"tool-result\"\n            )\n          }\n        ).filter(\n          (message) => message.role === \"system\" || message.content.length > 0\n        );\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"toolContent\",\n          details: \"Tool calls and results removed from conversation because Bedrock does not support tool content without active tools.\"\n        });\n      }\n    }\n    const { system, messages } = await convertToBedrockChatMessages(filteredPrompt);\n    const { reasoningConfig: _, ...filteredBedrockOptions } = (providerOptions == null ? void 0 : providerOptions.bedrock) || {};\n    return {\n      command: {\n        system,\n        messages,\n        additionalModelRequestFields: bedrockOptions.additionalModelRequestFields,\n        ...Object.keys(inferenceConfig).length > 0 && {\n          inferenceConfig\n        },\n        ...filteredBedrockOptions,\n        ...toolConfig.tools !== void 0 && toolConfig.tools.length > 0 ? { toolConfig } : {}\n      },\n      warnings,\n      usesJsonResponseTool: jsonResponseTool != null,\n      betas\n    };\n  }\n  async getHeaders({\n    betas,\n    headers\n  }) {\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers),\n      betas.size > 0 ? { \"anthropic-beta\": Array.from(betas).join(\",\") } : {},\n      headers\n    );\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;\n    const {\n      command: args,\n      warnings,\n      usesJsonResponseTool,\n      betas\n    } = await this.getArgs(options);\n    const url = `${this.getUrl(this.modelId)}/converse`;\n    const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url,\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: args,\n      failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n        errorSchema: BedrockErrorSchema,\n        errorToMessage: (error) => {\n          var _a2;\n          return `${(_a2 = error.message) != null ? _a2 : \"Unknown error\"}`;\n        }\n      }),\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        BedrockResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const content = [];\n    for (const part of response.output.message.content) {\n      if (part.text) {\n        if (!usesJsonResponseTool) {\n          content.push({ type: \"text\", text: part.text });\n        }\n      }\n      if (part.reasoningContent) {\n        if (\"reasoningText\" in part.reasoningContent) {\n          const reasoning = {\n            type: \"reasoning\",\n            text: part.reasoningContent.reasoningText.text\n          };\n          if (part.reasoningContent.reasoningText.signature) {\n            reasoning.providerMetadata = {\n              bedrock: {\n                signature: part.reasoningContent.reasoningText.signature\n              }\n            };\n          }\n          content.push(reasoning);\n        } else if (\"redactedReasoning\" in part.reasoningContent) {\n          content.push({\n            type: \"reasoning\",\n            text: \"\",\n            providerMetadata: {\n              bedrock: {\n                redactedData: (_a = part.reasoningContent.redactedReasoning.data) != null ? _a : \"\"\n              }\n            }\n          });\n        }\n      }\n      if (part.toolUse) {\n        content.push(\n          // when a json response tool is used, the tool call becomes the text:\n          usesJsonResponseTool ? {\n            type: \"text\",\n            text: JSON.stringify(part.toolUse.input)\n          } : {\n            type: \"tool-call\",\n            toolCallId: (_c = (_b = part.toolUse) == null ? void 0 : _b.toolUseId) != null ? _c : this.config.generateId(),\n            toolName: (_e = (_d = part.toolUse) == null ? void 0 : _d.name) != null ? _e : `tool-${this.config.generateId()}`,\n            input: JSON.stringify((_g = (_f = part.toolUse) == null ? void 0 : _f.input) != null ? _g : \"\")\n          }\n        );\n      }\n    }\n    const providerMetadata = response.trace || response.usage || usesJsonResponseTool ? {\n      bedrock: {\n        ...response.trace && typeof response.trace === \"object\" ? { trace: response.trace } : {},\n        ...((_h = response.usage) == null ? void 0 : _h.cacheWriteInputTokens) != null && {\n          usage: {\n            cacheWriteInputTokens: response.usage.cacheWriteInputTokens\n          }\n        },\n        ...usesJsonResponseTool && { isJsonResponseFromTool: true }\n      }\n    } : void 0;\n    return {\n      content,\n      finishReason: mapBedrockFinishReason(\n        response.stopReason\n      ),\n      usage: {\n        inputTokens: (_i = response.usage) == null ? void 0 : _i.inputTokens,\n        outputTokens: (_j = response.usage) == null ? void 0 : _j.outputTokens,\n        totalTokens: ((_k = response.usage) == null ? void 0 : _k.inputTokens) + ((_l = response.usage) == null ? void 0 : _l.outputTokens),\n        cachedInputTokens: (_n = (_m = response.usage) == null ? void 0 : _m.cacheReadInputTokens) != null ? _n : void 0\n      },\n      response: {\n        // TODO add id, timestamp, etc\n        headers: responseHeaders\n      },\n      warnings,\n      ...providerMetadata && { providerMetadata }\n    };\n  }\n  async doStream(options) {\n    const {\n      command: args,\n      warnings,\n      usesJsonResponseTool,\n      betas\n    } = await this.getArgs(options);\n    const url = `${this.getUrl(this.modelId)}/converse-stream`;\n    const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url,\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: args,\n      failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n        errorSchema: BedrockErrorSchema,\n        errorToMessage: (error) => `${error.type}: ${error.message}`\n      }),\n      successfulResponseHandler: createBedrockEventStreamResponseHandler(BedrockStreamSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let providerMetadata = void 0;\n    const contentBlocks = {};\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;\n            function enqueueError(bedrockError) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: bedrockError });\n            }\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              enqueueError(chunk.error);\n              return;\n            }\n            const value = chunk.value;\n            if (value.internalServerException) {\n              enqueueError(value.internalServerException);\n              return;\n            }\n            if (value.modelStreamErrorException) {\n              enqueueError(value.modelStreamErrorException);\n              return;\n            }\n            if (value.throttlingException) {\n              enqueueError(value.throttlingException);\n              return;\n            }\n            if (value.validationException) {\n              enqueueError(value.validationException);\n              return;\n            }\n            if (value.messageStop) {\n              finishReason = mapBedrockFinishReason(\n                value.messageStop.stopReason\n              );\n            }\n            if (value.metadata) {\n              usage.inputTokens = (_b = (_a = value.metadata.usage) == null ? void 0 : _a.inputTokens) != null ? _b : usage.inputTokens;\n              usage.outputTokens = (_d = (_c = value.metadata.usage) == null ? void 0 : _c.outputTokens) != null ? _d : usage.outputTokens;\n              usage.totalTokens = ((_e = usage.inputTokens) != null ? _e : 0) + ((_f = usage.outputTokens) != null ? _f : 0);\n              usage.cachedInputTokens = (_h = (_g = value.metadata.usage) == null ? void 0 : _g.cacheReadInputTokens) != null ? _h : usage.cachedInputTokens;\n              const cacheUsage = ((_i = value.metadata.usage) == null ? void 0 : _i.cacheWriteInputTokens) != null ? {\n                usage: {\n                  cacheWriteInputTokens: value.metadata.usage.cacheWriteInputTokens\n                }\n              } : void 0;\n              const trace = value.metadata.trace ? {\n                trace: value.metadata.trace\n              } : void 0;\n              if (cacheUsage || trace || usesJsonResponseTool) {\n                providerMetadata = {\n                  bedrock: {\n                    ...cacheUsage,\n                    ...trace,\n                    ...usesJsonResponseTool && {\n                      isJsonResponseFromTool: true\n                    }\n                  }\n                };\n              }\n            }\n            if (((_j = value.contentBlockStart) == null ? void 0 : _j.contentBlockIndex) != null && !((_l = (_k = value.contentBlockStart) == null ? void 0 : _k.start) == null ? void 0 : _l.toolUse)) {\n              const blockIndex = value.contentBlockStart.contentBlockIndex;\n              contentBlocks[blockIndex] = { type: \"text\" };\n              controller.enqueue({\n                type: \"text-start\",\n                id: String(blockIndex)\n              });\n            }\n            if (((_m = value.contentBlockDelta) == null ? void 0 : _m.delta) && \"text\" in value.contentBlockDelta.delta && value.contentBlockDelta.delta.text) {\n              const blockIndex = value.contentBlockDelta.contentBlockIndex || 0;\n              if (contentBlocks[blockIndex] == null) {\n                contentBlocks[blockIndex] = { type: \"text\" };\n                if (!usesJsonResponseTool) {\n                  controller.enqueue({\n                    type: \"text-start\",\n                    id: String(blockIndex)\n                  });\n                }\n              }\n              if (!usesJsonResponseTool) {\n                controller.enqueue({\n                  type: \"text-delta\",\n                  id: String(blockIndex),\n                  delta: value.contentBlockDelta.delta.text\n                });\n              }\n            }\n            if (((_n = value.contentBlockStop) == null ? void 0 : _n.contentBlockIndex) != null) {\n              const blockIndex = value.contentBlockStop.contentBlockIndex;\n              const contentBlock = contentBlocks[blockIndex];\n              if (contentBlock != null) {\n                if (contentBlock.type === \"reasoning\") {\n                  controller.enqueue({\n                    type: \"reasoning-end\",\n                    id: String(blockIndex)\n                  });\n                } else if (contentBlock.type === \"text\") {\n                  if (!usesJsonResponseTool) {\n                    controller.enqueue({\n                      type: \"text-end\",\n                      id: String(blockIndex)\n                    });\n                  }\n                } else if (contentBlock.type === \"tool-call\") {\n                  if (usesJsonResponseTool) {\n                    controller.enqueue({\n                      type: \"text-start\",\n                      id: String(blockIndex)\n                    });\n                    controller.enqueue({\n                      type: \"text-delta\",\n                      id: String(blockIndex),\n                      delta: contentBlock.jsonText\n                    });\n                    controller.enqueue({\n                      type: \"text-end\",\n                      id: String(blockIndex)\n                    });\n                  } else {\n                    controller.enqueue({\n                      type: \"tool-input-end\",\n                      id: contentBlock.toolCallId\n                    });\n                    controller.enqueue({\n                      type: \"tool-call\",\n                      toolCallId: contentBlock.toolCallId,\n                      toolName: contentBlock.toolName,\n                      input: contentBlock.jsonText\n                    });\n                  }\n                }\n                delete contentBlocks[blockIndex];\n              }\n            }\n            if (((_o = value.contentBlockDelta) == null ? void 0 : _o.delta) && \"reasoningContent\" in value.contentBlockDelta.delta && value.contentBlockDelta.delta.reasoningContent) {\n              const blockIndex = value.contentBlockDelta.contentBlockIndex || 0;\n              const reasoningContent = value.contentBlockDelta.delta.reasoningContent;\n              if (\"text\" in reasoningContent && reasoningContent.text) {\n                if (contentBlocks[blockIndex] == null) {\n                  contentBlocks[blockIndex] = { type: \"reasoning\" };\n                  controller.enqueue({\n                    type: \"reasoning-start\",\n                    id: String(blockIndex)\n                  });\n                }\n                controller.enqueue({\n                  type: \"reasoning-delta\",\n                  id: String(blockIndex),\n                  delta: reasoningContent.text\n                });\n              } else if (\"signature\" in reasoningContent && reasoningContent.signature) {\n                controller.enqueue({\n                  type: \"reasoning-delta\",\n                  id: String(blockIndex),\n                  delta: \"\",\n                  providerMetadata: {\n                    bedrock: {\n                      signature: reasoningContent.signature\n                    }\n                  }\n                });\n              } else if (\"data\" in reasoningContent && reasoningContent.data) {\n                controller.enqueue({\n                  type: \"reasoning-delta\",\n                  id: String(blockIndex),\n                  delta: \"\",\n                  providerMetadata: {\n                    bedrock: {\n                      redactedData: reasoningContent.data\n                    }\n                  }\n                });\n              }\n            }\n            const contentBlockStart = value.contentBlockStart;\n            if (((_p = contentBlockStart == null ? void 0 : contentBlockStart.start) == null ? void 0 : _p.toolUse) != null) {\n              const toolUse = contentBlockStart.start.toolUse;\n              const blockIndex = contentBlockStart.contentBlockIndex;\n              contentBlocks[blockIndex] = {\n                type: \"tool-call\",\n                toolCallId: toolUse.toolUseId,\n                toolName: toolUse.name,\n                jsonText: \"\"\n              };\n              if (!usesJsonResponseTool) {\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: toolUse.toolUseId,\n                  toolName: toolUse.name\n                });\n              }\n            }\n            const contentBlockDelta = value.contentBlockDelta;\n            if ((contentBlockDelta == null ? void 0 : contentBlockDelta.delta) && \"toolUse\" in contentBlockDelta.delta && contentBlockDelta.delta.toolUse) {\n              const blockIndex = contentBlockDelta.contentBlockIndex;\n              const contentBlock = contentBlocks[blockIndex];\n              if ((contentBlock == null ? void 0 : contentBlock.type) === \"tool-call\") {\n                const delta = (_q = contentBlockDelta.delta.toolUse.input) != null ? _q : \"\";\n                if (!usesJsonResponseTool) {\n                  controller.enqueue({\n                    type: \"tool-input-delta\",\n                    id: contentBlock.toolCallId,\n                    delta\n                  });\n                }\n                contentBlock.jsonText += delta;\n              }\n            }\n          },\n          flush(controller) {\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              ...providerMetadata && { providerMetadata }\n            });\n          }\n        })\n      ),\n      // TODO request?\n      response: { headers: responseHeaders }\n    };\n  }\n  getUrl(modelId) {\n    const encodedModelId = encodeURIComponent(modelId);\n    return `${this.config.baseUrl()}/model/${encodedModelId}`;\n  }\n};\nvar BedrockStopReasonSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"](BEDROCK_STOP_REASONS),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n]);\nvar BedrockToolUseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  toolUseId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown()\n});\nvar BedrockReasoningTextSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nvar BedrockRedactedReasoningSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nvar BedrockResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  metrics: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    latencyMs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n  }).nullish(),\n  output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n          toolUse: BedrockToolUseSchema.nullish(),\n          reasoningContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n              reasoningText: BedrockReasoningTextSchema\n            }),\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n              redactedReasoning: BedrockRedactedReasoningSchema\n            })\n          ]).nullish()\n        })\n      ),\n      role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    })\n  }),\n  stopReason: BedrockStopReasonSchema,\n  trace: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown().nullish(),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    inputTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    outputTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    totalTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    cacheReadInputTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n    cacheWriteInputTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish()\n  })\n});\nvar BedrockStreamSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  contentBlockDelta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    contentBlockIndex: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ toolUse: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() }) }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        reasoningContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() })\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        reasoningContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        })\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        reasoningContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() })\n      })\n    ]).nullish()\n  }).nullish(),\n  contentBlockStart: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    contentBlockIndex: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      toolUse: BedrockToolUseSchema.nullish()\n    }).nullish()\n  }).nullish(),\n  contentBlockStop: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    contentBlockIndex: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n  }).nullish(),\n  internalServerException: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown()).nullish(),\n  messageStop: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    additionalModelResponseFields: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown()).nullish(),\n    stopReason: BedrockStopReasonSchema\n  }).nullish(),\n  metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    trace: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown().nullish(),\n    usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      cacheReadInputTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n      cacheWriteInputTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n      inputTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n      outputTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n    }).nullish()\n  }).nullish(),\n  modelStreamErrorException: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown()).nullish(),\n  throttlingException: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown()).nullish(),\n  validationException: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown()).nullish()\n});\nvar bedrockReasoningMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  redactedData: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n\n// src/bedrock-embedding-model.ts\n\n\n\n// src/bedrock-embedding-options.ts\n\nvar bedrockEmbeddingProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /**\n  The number of dimensions the resulting output embeddings should have (defaults to 1024).\n  Only supported in amazon.titan-embed-text-v2:0.\n     */\n  dimensions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(1024), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(512), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(256)]).optional(),\n  /**\n  Flag indicating whether or not to normalize the output embeddings. Defaults to true\n  Only supported in amazon.titan-embed-text-v2:0.\n   */\n  normalize: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n});\n\n// src/bedrock-embedding-model.ts\n\nvar BedrockEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n    this.provider = \"amazon-bedrock\";\n    this.maxEmbeddingsPerCall = 1;\n    this.supportsParallelCalls = true;\n  }\n  getUrl(modelId) {\n    const encodedModelId = encodeURIComponent(modelId);\n    return `${this.config.baseUrl()}/model/${encodedModelId}/invoke`;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    var _a;\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values\n      });\n    }\n    const bedrockOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"bedrock\",\n      providerOptions,\n      schema: bedrockEmbeddingProviderOptions\n    })) != null ? _a : {};\n    const args = {\n      inputText: values[0],\n      dimensions: bedrockOptions.dimensions,\n      normalize: bedrockOptions.normalize\n    };\n    const url = this.getUrl(this.modelId);\n    const { value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url,\n      headers: await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(\n        (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers), headers)\n      ),\n      body: args,\n      failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n        errorSchema: BedrockErrorSchema,\n        errorToMessage: (error) => `${error.type}: ${error.message}`\n      }),\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        BedrockEmbeddingResponseSchema\n      ),\n      fetch: this.config.fetch,\n      abortSignal\n    });\n    return {\n      embeddings: [response.embedding],\n      usage: { tokens: response.inputTextTokenCount }\n    };\n  }\n};\nvar BedrockEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  embedding: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()),\n  inputTextTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n});\n\n// src/bedrock-image-model.ts\n\n\n// src/bedrock-image-settings.ts\nvar modelMaxImagesPerCall = {\n  \"amazon.nova-canvas-v1:0\": 5\n};\n\n// src/bedrock-image-model.ts\n\nvar BedrockImageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n    this.provider = \"amazon-bedrock\";\n  }\n  get maxImagesPerCall() {\n    var _a;\n    return (_a = modelMaxImagesPerCall[this.modelId]) != null ? _a : 1;\n  }\n  getUrl(modelId) {\n    const encodedModelId = encodeURIComponent(modelId);\n    return `${this.config.baseUrl()}/model/${encodedModelId}/invoke`;\n  }\n  async doGenerate({\n    prompt,\n    n,\n    size,\n    aspectRatio,\n    seed,\n    providerOptions,\n    headers,\n    abortSignal\n  }) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const warnings = [];\n    const [width, height] = size ? size.split(\"x\").map(Number) : [];\n    const args = {\n      taskType: \"TEXT_IMAGE\",\n      textToImageParams: {\n        text: prompt,\n        ...((_a = providerOptions == null ? void 0 : providerOptions.bedrock) == null ? void 0 : _a.negativeText) ? {\n          negativeText: providerOptions.bedrock.negativeText\n        } : {},\n        ...((_b = providerOptions == null ? void 0 : providerOptions.bedrock) == null ? void 0 : _b.style) ? {\n          style: providerOptions.bedrock.style\n        } : {}\n      },\n      imageGenerationConfig: {\n        ...width ? { width } : {},\n        ...height ? { height } : {},\n        ...seed ? { seed } : {},\n        ...n ? { numberOfImages: n } : {},\n        ...((_c = providerOptions == null ? void 0 : providerOptions.bedrock) == null ? void 0 : _c.quality) ? { quality: providerOptions.bedrock.quality } : {},\n        ...((_d = providerOptions == null ? void 0 : providerOptions.bedrock) == null ? void 0 : _d.cfgScale) ? { cfgScale: providerOptions.bedrock.cfgScale } : {}\n      }\n    };\n    if (aspectRatio != void 0) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"aspectRatio\",\n        details: \"This model does not support aspect ratio. Use `size` instead.\"\n      });\n    }\n    const currentDate = (_g = (_f = (_e = this.config._internal) == null ? void 0 : _e.currentDate) == null ? void 0 : _f.call(_e)) != null ? _g : /* @__PURE__ */ new Date();\n    const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.getUrl(this.modelId),\n      headers: await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(\n        (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers), headers)\n      ),\n      body: args,\n      failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n        errorSchema: BedrockErrorSchema,\n        errorToMessage: (error) => `${error.type}: ${error.message}`\n      }),\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        bedrockImageResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      images: response.images,\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders\n      }\n    };\n  }\n};\nvar bedrockImageResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  images: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string())\n});\n\n// src/headers-utils.ts\nfunction extractHeaders(headers) {\n  let originalHeaders = {};\n  if (headers) {\n    if (headers instanceof Headers) {\n      originalHeaders = convertHeadersToRecord(headers);\n    } else if (Array.isArray(headers)) {\n      for (const [k, v] of headers) {\n        originalHeaders[k.toLowerCase()] = v;\n      }\n    } else {\n      originalHeaders = Object.fromEntries(\n        Object.entries(headers).map(([k, v]) => [k.toLowerCase(), v])\n      );\n    }\n  }\n  return originalHeaders;\n}\nfunction convertHeadersToRecord(headers) {\n  return Object.fromEntries([...headers]);\n}\n\n// src/bedrock-sigv4-fetch.ts\n\n\nfunction createSigV4FetchFunction(getCredentials, fetch = globalThis.fetch) {\n  return async (input, init) => {\n    var _a;\n    const originalHeaders = extractHeaders(init == null ? void 0 : init.headers);\n    const headersWithUserAgent = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withUserAgentSuffix)(\n      originalHeaders,\n      `ai-sdk/amazon-bedrock/${VERSION}`,\n      (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.getRuntimeEnvironmentUserAgent)()\n    );\n    if (((_a = init == null ? void 0 : init.method) == null ? void 0 : _a.toUpperCase()) !== \"POST\" || !(init == null ? void 0 : init.body)) {\n      return fetch(input, {\n        ...init,\n        headers: headersWithUserAgent\n      });\n    }\n    const url = typeof input === \"string\" ? input : input instanceof URL ? input.href : input.url;\n    const body = prepareBodyString(init.body);\n    const credentials = await getCredentials();\n    const signer = new aws4fetch__WEBPACK_IMPORTED_MODULE_7__.AwsV4Signer({\n      url,\n      method: \"POST\",\n      headers: Object.entries(headersWithUserAgent),\n      body,\n      region: credentials.region,\n      accessKeyId: credentials.accessKeyId,\n      secretAccessKey: credentials.secretAccessKey,\n      sessionToken: credentials.sessionToken,\n      service: \"bedrock\"\n    });\n    const signingResult = await signer.sign();\n    const signedHeaders = convertHeadersToRecord(signingResult.headers);\n    const combinedHeaders = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(headersWithUserAgent, signedHeaders);\n    return fetch(input, {\n      ...init,\n      body,\n      headers: combinedHeaders\n    });\n  };\n}\nfunction prepareBodyString(body) {\n  if (typeof body === \"string\") {\n    return body;\n  } else if (body instanceof Uint8Array) {\n    return new TextDecoder().decode(body);\n  } else if (body instanceof ArrayBuffer) {\n    return new TextDecoder().decode(new Uint8Array(body));\n  } else {\n    return JSON.stringify(body);\n  }\n}\nfunction createApiKeyFetchFunction(apiKey, fetch = globalThis.fetch) {\n  return async (input, init) => {\n    const originalHeaders = extractHeaders(init == null ? void 0 : init.headers);\n    const headersWithUserAgent = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withUserAgentSuffix)(\n      originalHeaders,\n      `ai-sdk/amazon-bedrock/${VERSION}`,\n      (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.getRuntimeEnvironmentUserAgent)()\n    );\n    const finalHeaders = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(headersWithUserAgent, {\n      Authorization: `Bearer ${apiKey}`\n    });\n    return fetch(input, {\n      ...init,\n      headers: finalHeaders\n    });\n  };\n}\n\n// src/bedrock-provider.ts\nfunction createAmazonBedrock(options = {}) {\n  const rawApiKey = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadOptionalSetting)({\n    settingValue: options.apiKey,\n    environmentVariableName: \"AWS_BEARER_TOKEN_BEDROCK\"\n  });\n  const apiKey = rawApiKey && rawApiKey.trim().length > 0 ? rawApiKey.trim() : void 0;\n  const fetchFunction = apiKey ? createApiKeyFetchFunction(apiKey, options.fetch) : createSigV4FetchFunction(async () => {\n    const region = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadSetting)({\n      settingValue: options.region,\n      settingName: \"region\",\n      environmentVariableName: \"AWS_REGION\",\n      description: \"AWS region\"\n    });\n    if (options.credentialProvider) {\n      try {\n        return {\n          ...await options.credentialProvider(),\n          region\n        };\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        throw new Error(\n          `AWS credential provider failed: ${errorMessage}. Please ensure your credential provider returns valid AWS credentials with accessKeyId and secretAccessKey properties.`\n        );\n      }\n    }\n    try {\n      return {\n        region,\n        accessKeyId: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadSetting)({\n          settingValue: options.accessKeyId,\n          settingName: \"accessKeyId\",\n          environmentVariableName: \"AWS_ACCESS_KEY_ID\",\n          description: \"AWS access key ID\"\n        }),\n        secretAccessKey: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadSetting)({\n          settingValue: options.secretAccessKey,\n          settingName: \"secretAccessKey\",\n          environmentVariableName: \"AWS_SECRET_ACCESS_KEY\",\n          description: \"AWS secret access key\"\n        }),\n        sessionToken: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadOptionalSetting)({\n          settingValue: options.sessionToken,\n          environmentVariableName: \"AWS_SESSION_TOKEN\"\n        })\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      if (errorMessage.includes(\"AWS_ACCESS_KEY_ID\") || errorMessage.includes(\"accessKeyId\")) {\n        throw new Error(\n          `AWS SigV4 authentication requires AWS credentials. Please provide either:\n1. Set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables\n2. Provide accessKeyId and secretAccessKey in options\n3. Use a credentialProvider function\n4. Use API key authentication with AWS_BEARER_TOKEN_BEDROCK or apiKey option\nOriginal error: ${errorMessage}`\n        );\n      }\n      if (errorMessage.includes(\"AWS_SECRET_ACCESS_KEY\") || errorMessage.includes(\"secretAccessKey\")) {\n        throw new Error(\n          `AWS SigV4 authentication requires both AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. Please ensure both credentials are provided.\nOriginal error: ${errorMessage}`\n        );\n      }\n      throw error;\n    }\n  }, options.fetch);\n  const getBaseUrl = () => {\n    var _a, _b;\n    return (_b = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(\n      (_a = options.baseURL) != null ? _a : `https://bedrock-runtime.${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadSetting)({\n        settingValue: options.region,\n        settingName: \"region\",\n        environmentVariableName: \"AWS_REGION\",\n        description: \"AWS region\"\n      })}.amazonaws.com`\n    )) != null ? _b : `https://bedrock-runtime.us-east-1.amazonaws.com`;\n  };\n  const getHeaders = () => {\n    var _a;\n    const baseHeaders = (_a = options.headers) != null ? _a : {};\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withUserAgentSuffix)(baseHeaders, `ai-sdk/amazon-bedrock/${VERSION}`);\n  };\n  const createChatModel = (modelId) => new BedrockChatLanguageModel(modelId, {\n    baseUrl: getBaseUrl,\n    headers: getHeaders,\n    fetch: fetchFunction,\n    generateId: _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId\n  });\n  const provider = function(modelId) {\n    if (new.target) {\n      throw new Error(\n        \"The Amazon Bedrock model function cannot be called with the new keyword.\"\n      );\n    }\n    return createChatModel(modelId);\n  };\n  const createEmbeddingModel = (modelId) => new BedrockEmbeddingModel(modelId, {\n    baseUrl: getBaseUrl,\n    headers: getHeaders,\n    fetch: fetchFunction\n  });\n  const createImageModel = (modelId) => new BedrockImageModel(modelId, {\n    baseUrl: getBaseUrl,\n    headers: getHeaders,\n    fetch: fetchFunction\n  });\n  provider.languageModel = createChatModel;\n  provider.embedding = createEmbeddingModel;\n  provider.textEmbedding = createEmbeddingModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n  provider.tools = _ai_sdk_anthropic_internal__WEBPACK_IMPORTED_MODULE_6__.anthropicTools;\n  return provider;\n}\nvar bedrock = createAmazonBedrock();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/amazon-bedrock/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/anthropic/dist/internal/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@ai-sdk/anthropic/dist/internal/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnthropicMessagesLanguageModel: () => (/* binding */ AnthropicMessagesLanguageModel),\n/* harmony export */   anthropicTools: () => (/* binding */ anthropicTools),\n/* harmony export */   prepareTools: () => (/* binding */ prepareTools)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/index.js\");\n// src/anthropic-messages-language-model.ts\n\n\n\n\n// src/anthropic-error.ts\n\n\nvar anthropicErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"error\"),\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n  })\n});\nvar anthropicFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: anthropicErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/anthropic-messages-options.ts\n\nvar anthropicFilePartProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /**\n   * Citation configuration for this document.\n   * When enabled, this document will generate citations in the response.\n   */\n  citations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * Enable citations for this document\n     */\n    enabled: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean()\n  }).optional(),\n  /**\n   * Custom title for the document.\n   * If not provided, the filename will be used.\n   */\n  title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  /**\n   * Context about the document that will be passed to the model\n   * but not used towards cited content.\n   * Useful for storing document metadata as text or stringified JSON.\n   */\n  context: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\nvar anthropicProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  sendReasoning: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"enabled\"), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"disabled\")]),\n    budgetTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().optional()\n  }).optional(),\n  /**\n   * Whether to disable parallel function calling during tool use. Default is false.\n   * When set to true, Claude will use at most one tool per response.\n   */\n  disableParallelToolUse: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  /**\n   * Cache control settings for this message.\n   * See https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching\n   */\n  cacheControl: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"ephemeral\"),\n    ttl: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"5m\"), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"1h\")]).optional()\n  }).optional()\n});\n\n// src/anthropic-prepare-tools.ts\n\n\n// src/get-cache-control.ts\nfunction getCacheControl(providerMetadata) {\n  var _a;\n  const anthropic = providerMetadata == null ? void 0 : providerMetadata.anthropic;\n  const cacheControlValue = (_a = anthropic == null ? void 0 : anthropic.cacheControl) != null ? _a : anthropic == null ? void 0 : anthropic.cache_control;\n  return cacheControlValue;\n}\n\n// src/tool/web-search_20250305.ts\n\n\nvar webSearch_20250305ArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /**\n   * Maximum number of web searches Claude can perform during the conversation.\n   */\n  maxUses: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  /**\n   * Optional list of domains that Claude is allowed to search.\n   */\n  allowedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n  /**\n   * Optional list of domains that Claude should avoid when searching.\n   */\n  blockedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n  /**\n   * Optional user location information to provide geographically relevant search results.\n   */\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"approximate\"),\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n  }).optional()\n});\nvar webSearch_20250305OutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    pageAge: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable(),\n    encryptedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n  })\n);\nvar factory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"anthropic.web_search_20250305\",\n  name: \"web_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n  }),\n  outputSchema: webSearch_20250305OutputSchema\n});\nvar webSearch_20250305 = (args = {}) => {\n  return factory(args);\n};\n\n// src/anthropic-prepare-tools.ts\nfunction isWebSearchTool(tool) {\n  return typeof tool === \"object\" && tool !== null && \"type\" in tool && tool.type === \"web_search_20250305\";\n}\nfunction prepareTools({\n  tools,\n  toolChoice,\n  disableParallelToolUse\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  const betas = /* @__PURE__ */ new Set();\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings, betas };\n  }\n  const anthropicTools2 = [];\n  for (const tool of tools) {\n    if (isWebSearchTool(tool)) {\n      anthropicTools2.push(tool);\n      continue;\n    }\n    switch (tool.type) {\n      case \"function\":\n        const cacheControl = getCacheControl(tool.providerOptions);\n        anthropicTools2.push({\n          name: tool.name,\n          description: tool.description,\n          input_schema: tool.inputSchema,\n          cache_control: cacheControl\n        });\n        break;\n      case \"provider-defined\":\n        switch (tool.id) {\n          case \"anthropic.computer_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"computer\",\n              type: \"computer_20250124\",\n              display_width_px: tool.args.displayWidthPx,\n              display_height_px: tool.args.displayHeightPx,\n              display_number: tool.args.displayNumber\n            });\n            break;\n          case \"anthropic.computer_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"computer\",\n              type: \"computer_20241022\",\n              display_width_px: tool.args.displayWidthPx,\n              display_height_px: tool.args.displayHeightPx,\n              display_number: tool.args.displayNumber\n            });\n            break;\n          case \"anthropic.text_editor_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"str_replace_editor\",\n              type: \"text_editor_20250124\"\n            });\n            break;\n          case \"anthropic.text_editor_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"str_replace_editor\",\n              type: \"text_editor_20241022\"\n            });\n            break;\n          case \"anthropic.text_editor_20250429\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"str_replace_based_edit_tool\",\n              type: \"text_editor_20250429\"\n            });\n            break;\n          case \"anthropic.bash_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"bash\",\n              type: \"bash_20250124\"\n            });\n            break;\n          case \"anthropic.bash_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"bash\",\n              type: \"bash_20241022\"\n            });\n            break;\n          case \"anthropic.web_search_20250305\": {\n            const args = webSearch_20250305ArgsSchema.parse(tool.args);\n            anthropicTools2.push({\n              type: \"web_search_20250305\",\n              name: \"web_search\",\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"anthropic.code_execution_20250522\": {\n            betas.add(\"code-execution-2025-05-22\");\n            anthropicTools2.push({\n              type: \"code_execution_20250522\",\n              name: \"code_execution\"\n            });\n            break;\n          }\n          default:\n            toolWarnings.push({ type: \"unsupported-tool\", tool });\n            break;\n        }\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return {\n      tools: anthropicTools2,\n      toolChoice: disableParallelToolUse ? { type: \"auto\", disable_parallel_tool_use: disableParallelToolUse } : void 0,\n      toolWarnings,\n      betas\n    };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"auto\",\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    case \"required\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"any\",\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    case \"none\":\n      return { tools: void 0, toolChoice: void 0, toolWarnings, betas };\n    case \"tool\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"tool\",\n          name: toolChoice.toolName,\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/convert-to-anthropic-messages-prompt.ts\n\n\n\n// src/tool/code-execution_20250522.ts\n\n\nvar codeExecution_20250522OutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"code_execution_result\"),\n  stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n});\nvar factory2 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"anthropic.code_execution_20250522\",\n  name: \"code_execution\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n  }),\n  outputSchema: codeExecution_20250522OutputSchema\n});\nvar codeExecution_20250522 = (args = {}) => {\n  return factory2(args);\n};\n\n// src/convert-to-anthropic-messages-prompt.ts\nfunction convertToString(data) {\n  if (typeof data === \"string\") {\n    return Buffer.from(data, \"base64\").toString(\"utf-8\");\n  }\n  if (data instanceof Uint8Array) {\n    return new TextDecoder().decode(data);\n  }\n  if (data instanceof URL) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n      functionality: \"URL-based text documents are not supported for citations\"\n    });\n  }\n  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n    functionality: `unsupported data type for text documents: ${typeof data}`\n  });\n}\nasync function convertToAnthropicMessagesPrompt({\n  prompt,\n  sendReasoning,\n  warnings\n}) {\n  var _a, _b, _c, _d, _e;\n  const betas = /* @__PURE__ */ new Set();\n  const blocks = groupIntoBlocks(prompt);\n  let system = void 0;\n  const messages = [];\n  async function shouldEnableCitations(providerMetadata) {\n    var _a2, _b2;\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions\n    });\n    return (_b2 = (_a2 = anthropicOptions == null ? void 0 : anthropicOptions.citations) == null ? void 0 : _a2.enabled) != null ? _b2 : false;\n  }\n  async function getDocumentMetadata(providerMetadata) {\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions\n    });\n    return {\n      title: anthropicOptions == null ? void 0 : anthropicOptions.title,\n      context: anthropicOptions == null ? void 0 : anthropicOptions.context\n    };\n  }\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    const isLastBlock = i === blocks.length - 1;\n    const type = block.type;\n    switch (type) {\n      case \"system\": {\n        if (system != null) {\n          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n            functionality: \"Multiple system messages that are separated by user/assistant messages\"\n          });\n        }\n        system = block.messages.map(({ content, providerOptions }) => ({\n          type: \"text\",\n          text: content,\n          cache_control: getCacheControl(providerOptions)\n        }));\n        break;\n      }\n      case \"user\": {\n        const anthropicContent = [];\n        for (const message of block.messages) {\n          const { role, content } = message;\n          switch (role) {\n            case \"user\": {\n              for (let j = 0; j < content.length; j++) {\n                const part = content[j];\n                const isLastPart = j === content.length - 1;\n                const cacheControl = (_a = getCacheControl(part.providerOptions)) != null ? _a : isLastPart ? getCacheControl(message.providerOptions) : void 0;\n                switch (part.type) {\n                  case \"text\": {\n                    anthropicContent.push({\n                      type: \"text\",\n                      text: part.text,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  case \"file\": {\n                    if (part.mediaType.startsWith(\"image/\")) {\n                      anthropicContent.push({\n                        type: \"image\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"base64\",\n                          media_type: part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType,\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else if (part.mediaType === \"application/pdf\") {\n                      betas.add(\"pdfs-2024-09-25\");\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions\n                      );\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions\n                      );\n                      anthropicContent.push({\n                        type: \"document\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"base64\",\n                          media_type: \"application/pdf\",\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                        },\n                        title: (_b = metadata.title) != null ? _b : part.filename,\n                        ...metadata.context && { context: metadata.context },\n                        ...enableCitations && {\n                          citations: { enabled: true }\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else if (part.mediaType === \"text/plain\") {\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions\n                      );\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions\n                      );\n                      anthropicContent.push({\n                        type: \"document\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"text\",\n                          media_type: \"text/plain\",\n                          data: convertToString(part.data)\n                        },\n                        title: (_c = metadata.title) != null ? _c : part.filename,\n                        ...metadata.context && { context: metadata.context },\n                        ...enableCitations && {\n                          citations: { enabled: true }\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else {\n                      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                        functionality: `media type: ${part.mediaType}`\n                      });\n                    }\n                    break;\n                  }\n                }\n              }\n              break;\n            }\n            case \"tool\": {\n              for (let i2 = 0; i2 < content.length; i2++) {\n                const part = content[i2];\n                const isLastPart = i2 === content.length - 1;\n                const cacheControl = (_d = getCacheControl(part.providerOptions)) != null ? _d : isLastPart ? getCacheControl(message.providerOptions) : void 0;\n                const output = part.output;\n                let contentValue;\n                switch (output.type) {\n                  case \"content\":\n                    contentValue = output.value.map((contentPart) => {\n                      switch (contentPart.type) {\n                        case \"text\":\n                          return {\n                            type: \"text\",\n                            text: contentPart.text,\n                            cache_control: void 0\n                          };\n                        case \"media\": {\n                          if (contentPart.mediaType.startsWith(\"image/\")) {\n                            return {\n                              type: \"image\",\n                              source: {\n                                type: \"base64\",\n                                media_type: contentPart.mediaType,\n                                data: contentPart.data\n                              },\n                              cache_control: void 0\n                            };\n                          }\n                          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                            functionality: `media type: ${contentPart.mediaType}`\n                          });\n                        }\n                      }\n                    });\n                    break;\n                  case \"text\":\n                  case \"error-text\":\n                    contentValue = output.value;\n                    break;\n                  case \"json\":\n                  case \"error-json\":\n                  default:\n                    contentValue = JSON.stringify(output.value);\n                    break;\n                }\n                anthropicContent.push({\n                  type: \"tool_result\",\n                  tool_use_id: part.toolCallId,\n                  content: contentValue,\n                  is_error: output.type === \"error-text\" || output.type === \"error-json\" ? true : void 0,\n                  cache_control: cacheControl\n                });\n              }\n              break;\n            }\n            default: {\n              const _exhaustiveCheck = role;\n              throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n            }\n          }\n        }\n        messages.push({ role: \"user\", content: anthropicContent });\n        break;\n      }\n      case \"assistant\": {\n        const anthropicContent = [];\n        for (let j = 0; j < block.messages.length; j++) {\n          const message = block.messages[j];\n          const isLastMessage = j === block.messages.length - 1;\n          const { content } = message;\n          for (let k = 0; k < content.length; k++) {\n            const part = content[k];\n            const isLastContentPart = k === content.length - 1;\n            const cacheControl = (_e = getCacheControl(part.providerOptions)) != null ? _e : isLastContentPart ? getCacheControl(message.providerOptions) : void 0;\n            switch (part.type) {\n              case \"text\": {\n                anthropicContent.push({\n                  type: \"text\",\n                  text: (\n                    // trim the last text part if it's the last message in the block\n                    // because Anthropic does not allow trailing whitespace\n                    // in pre-filled assistant responses\n                    isLastBlock && isLastMessage && isLastContentPart ? part.text.trim() : part.text\n                  ),\n                  cache_control: cacheControl\n                });\n                break;\n              }\n              case \"reasoning\": {\n                if (sendReasoning) {\n                  const reasoningMetadata = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n                    provider: \"anthropic\",\n                    providerOptions: part.providerOptions,\n                    schema: anthropicReasoningMetadataSchema\n                  });\n                  if (reasoningMetadata != null) {\n                    if (reasoningMetadata.signature != null) {\n                      anthropicContent.push({\n                        type: \"thinking\",\n                        thinking: part.text,\n                        signature: reasoningMetadata.signature,\n                        cache_control: cacheControl\n                      });\n                    } else if (reasoningMetadata.redactedData != null) {\n                      anthropicContent.push({\n                        type: \"redacted_thinking\",\n                        data: reasoningMetadata.redactedData,\n                        cache_control: cacheControl\n                      });\n                    } else {\n                      warnings.push({\n                        type: \"other\",\n                        message: \"unsupported reasoning metadata\"\n                      });\n                    }\n                  } else {\n                    warnings.push({\n                      type: \"other\",\n                      message: \"unsupported reasoning metadata\"\n                    });\n                  }\n                } else {\n                  warnings.push({\n                    type: \"other\",\n                    message: \"sending reasoning content is disabled for this model\"\n                  });\n                }\n                break;\n              }\n              case \"tool-call\": {\n                if (part.providerExecuted) {\n                  if (part.toolName === \"web_search\") {\n                    anthropicContent.push({\n                      type: \"server_tool_use\",\n                      id: part.toolCallId,\n                      name: \"web_search\",\n                      input: part.input,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  if (part.toolName === \"code_execution\") {\n                    anthropicContent.push({\n                      type: \"server_tool_use\",\n                      id: part.toolCallId,\n                      name: \"code_execution\",\n                      input: part.input,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  warnings.push({\n                    type: \"other\",\n                    message: `provider executed tool call for tool ${part.toolName} is not supported`\n                  });\n                  break;\n                }\n                anthropicContent.push({\n                  type: \"tool_use\",\n                  id: part.toolCallId,\n                  name: part.toolName,\n                  input: part.input,\n                  cache_control: cacheControl\n                });\n                break;\n              }\n              case \"tool-result\": {\n                if (part.toolName === \"web_search\") {\n                  const output = part.output;\n                  if (output.type !== \"json\") {\n                    warnings.push({\n                      type: \"other\",\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`\n                    });\n                    break;\n                  }\n                  const webSearchOutput = webSearch_20250305OutputSchema.parse(\n                    output.value\n                  );\n                  anthropicContent.push({\n                    type: \"web_search_tool_result\",\n                    tool_use_id: part.toolCallId,\n                    content: webSearchOutput.map((result) => ({\n                      url: result.url,\n                      title: result.title,\n                      page_age: result.pageAge,\n                      encrypted_content: result.encryptedContent,\n                      type: result.type\n                    })),\n                    cache_control: cacheControl\n                  });\n                  break;\n                }\n                if (part.toolName === \"code_execution\") {\n                  const output = part.output;\n                  if (output.type !== \"json\") {\n                    warnings.push({\n                      type: \"other\",\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`\n                    });\n                    break;\n                  }\n                  const codeExecutionOutput = codeExecution_20250522OutputSchema.parse(output.value);\n                  anthropicContent.push({\n                    type: \"code_execution_tool_result\",\n                    tool_use_id: part.toolCallId,\n                    content: {\n                      type: codeExecutionOutput.type,\n                      stdout: codeExecutionOutput.stdout,\n                      stderr: codeExecutionOutput.stderr,\n                      return_code: codeExecutionOutput.return_code\n                    },\n                    cache_control: cacheControl\n                  });\n                  break;\n                }\n                warnings.push({\n                  type: \"other\",\n                  message: `provider executed tool result for tool ${part.toolName} is not supported`\n                });\n                break;\n              }\n            }\n          }\n        }\n        messages.push({ role: \"assistant\", content: anthropicContent });\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = type;\n        throw new Error(`content type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return {\n    prompt: { system, messages },\n    betas\n  };\n}\nfunction groupIntoBlocks(prompt) {\n  const blocks = [];\n  let currentBlock = void 0;\n  for (const message of prompt) {\n    const { role } = message;\n    switch (role) {\n      case \"system\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"system\") {\n          currentBlock = { type: \"system\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"assistant\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"assistant\") {\n          currentBlock = { type: \"assistant\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"user\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"user\") {\n          currentBlock = { type: \"user\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"tool\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"user\") {\n          currentBlock = { type: \"user\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return blocks;\n}\n\n// src/map-anthropic-stop-reason.ts\nfunction mapAnthropicStopReason({\n  finishReason,\n  isJsonResponseFromTool\n}) {\n  switch (finishReason) {\n    case \"pause_turn\":\n    case \"end_turn\":\n    case \"stop_sequence\":\n      return \"stop\";\n    case \"refusal\":\n      return \"content-filter\";\n    case \"tool_use\":\n      return isJsonResponseFromTool ? \"stop\" : \"tool-calls\";\n    case \"max_tokens\":\n      return \"length\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/anthropic-messages-language-model.ts\nvar citationSchemas = {\n  webSearchResult: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"web_search_result_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    encrypted_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n  }),\n  pageLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"page_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    document_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    document_title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable(),\n    start_page_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    end_page_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n  }),\n  charLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"char_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    document_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    document_title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable(),\n    start_char_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    end_char_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n  })\n};\nvar citationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n  citationSchemas.webSearchResult,\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation\n]);\nvar documentCitationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation\n]);\nfunction processCitation(citation, citationDocuments, generateId2, onSource) {\n  if (citation.type === \"page_location\" || citation.type === \"char_location\") {\n    const source = createCitationSource(\n      citation,\n      citationDocuments,\n      generateId2\n    );\n    if (source) {\n      onSource(source);\n    }\n  }\n}\nfunction createCitationSource(citation, citationDocuments, generateId2) {\n  var _a;\n  const documentInfo = citationDocuments[citation.document_index];\n  if (!documentInfo) {\n    return null;\n  }\n  const providerMetadata = citation.type === \"page_location\" ? {\n    citedText: citation.cited_text,\n    startPageNumber: citation.start_page_number,\n    endPageNumber: citation.end_page_number\n  } : {\n    citedText: citation.cited_text,\n    startCharIndex: citation.start_char_index,\n    endCharIndex: citation.end_char_index\n  };\n  return {\n    type: \"source\",\n    sourceType: \"document\",\n    id: generateId2(),\n    mediaType: documentInfo.mediaType,\n    title: (_a = citation.document_title) != null ? _a : documentInfo.title,\n    filename: documentInfo.filename,\n    providerMetadata: {\n      anthropic: providerMetadata\n    }\n  };\n}\nvar AnthropicMessagesLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    var _a;\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = (_a = config.generateId) != null ? _a : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId;\n  }\n  supportsUrl(url) {\n    return url.protocol === \"https:\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  get supportedUrls() {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).supportedUrls) == null ? void 0 : _b.call(_a)) != null ? _c : {};\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens = 4096,\n    // 4096: max model output tokens TODO update default in v5\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b, _c;\n    const warnings = [];\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"frequencyPenalty\"\n      });\n    }\n    if (presencePenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"presencePenalty\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"seed\"\n      });\n    }\n    if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\") {\n      if (responseFormat.schema == null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"responseFormat\",\n          details: \"JSON response format requires a schema. The response format is ignored.\"\n        });\n      } else if (tools != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"tools\",\n          details: \"JSON response format does not support tools. The provided tools are ignored.\"\n        });\n      }\n    }\n    const jsonResponseTool = (responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null ? {\n      type: \"function\",\n      name: \"json\",\n      description: \"Respond with a JSON object.\",\n      inputSchema: responseFormat.schema\n    } : void 0;\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions,\n      schema: anthropicProviderOptions\n    });\n    const { prompt: messagesPrompt, betas: messagesBetas } = await convertToAnthropicMessagesPrompt({\n      prompt,\n      sendReasoning: (_a = anthropicOptions == null ? void 0 : anthropicOptions.sendReasoning) != null ? _a : true,\n      warnings\n    });\n    const isThinking = ((_b = anthropicOptions == null ? void 0 : anthropicOptions.thinking) == null ? void 0 : _b.type) === \"enabled\";\n    const thinkingBudget = (_c = anthropicOptions == null ? void 0 : anthropicOptions.thinking) == null ? void 0 : _c.budgetTokens;\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_k: topK,\n      top_p: topP,\n      stop_sequences: stopSequences,\n      // provider specific settings:\n      ...isThinking && {\n        thinking: { type: \"enabled\", budget_tokens: thinkingBudget }\n      },\n      // prompt:\n      system: messagesPrompt.system,\n      messages: messagesPrompt.messages\n    };\n    if (isThinking) {\n      if (thinkingBudget == null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n          functionality: \"thinking requires a budget\"\n        });\n      }\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported when thinking is enabled\"\n        });\n      }\n      if (topK != null) {\n        baseArgs.top_k = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topK\",\n          details: \"topK is not supported when thinking is enabled\"\n        });\n      }\n      if (topP != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported when thinking is enabled\"\n        });\n      }\n      baseArgs.max_tokens = maxOutputTokens + thinkingBudget;\n    }\n    const {\n      tools: anthropicTools2,\n      toolChoice: anthropicToolChoice,\n      toolWarnings,\n      betas: toolsBetas\n    } = prepareTools(\n      jsonResponseTool != null ? {\n        tools: [jsonResponseTool],\n        toolChoice: { type: \"tool\", toolName: jsonResponseTool.name },\n        disableParallelToolUse: true\n      } : {\n        tools: tools != null ? tools : [],\n        toolChoice,\n        disableParallelToolUse: anthropicOptions == null ? void 0 : anthropicOptions.disableParallelToolUse\n      }\n    );\n    return {\n      args: {\n        ...baseArgs,\n        tools: anthropicTools2,\n        tool_choice: anthropicToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings],\n      betas: /* @__PURE__ */ new Set([...messagesBetas, ...toolsBetas]),\n      usesJsonResponseTool: jsonResponseTool != null\n    };\n  }\n  async getHeaders({\n    betas,\n    headers\n  }) {\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers),\n      betas.size > 0 ? { \"anthropic-beta\": Array.from(betas).join(\",\") } : {},\n      headers\n    );\n  }\n  buildRequestUrl(isStreaming) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).buildRequestUrl) == null ? void 0 : _b.call(_a, this.config.baseURL, isStreaming)) != null ? _c : `${this.config.baseURL}/messages`;\n  }\n  transformRequestBody(args) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).transformRequestBody) == null ? void 0 : _b.call(_a, args)) != null ? _c : args;\n  }\n  extractCitationDocuments(prompt) {\n    const isCitationPart = (part) => {\n      var _a, _b;\n      if (part.type !== \"file\") {\n        return false;\n      }\n      if (part.mediaType !== \"application/pdf\" && part.mediaType !== \"text/plain\") {\n        return false;\n      }\n      const anthropic = (_a = part.providerOptions) == null ? void 0 : _a.anthropic;\n      const citationsConfig = anthropic == null ? void 0 : anthropic.citations;\n      return (_b = citationsConfig == null ? void 0 : citationsConfig.enabled) != null ? _b : false;\n    };\n    return prompt.filter((message) => message.role === \"user\").flatMap((message) => message.content).filter(isCitationPart).map((part) => {\n      var _a;\n      const filePart = part;\n      return {\n        title: (_a = filePart.filename) != null ? _a : \"Untitled Document\",\n        filename: filePart.filename,\n        mediaType: filePart.mediaType\n      };\n    });\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e;\n    const { args, warnings, betas, usesJsonResponseTool } = await this.getArgs(options);\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.buildRequestUrl(false),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(args),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        anthropicMessagesResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const content = [];\n    for (const part of response.content) {\n      switch (part.type) {\n        case \"text\": {\n          if (!usesJsonResponseTool) {\n            content.push({ type: \"text\", text: part.text });\n            if (part.citations) {\n              for (const citation of part.citations) {\n                processCitation(\n                  citation,\n                  citationDocuments,\n                  this.generateId,\n                  (source) => content.push(source)\n                );\n              }\n            }\n          }\n          break;\n        }\n        case \"thinking\": {\n          content.push({\n            type: \"reasoning\",\n            text: part.thinking,\n            providerMetadata: {\n              anthropic: {\n                signature: part.signature\n              }\n            }\n          });\n          break;\n        }\n        case \"redacted_thinking\": {\n          content.push({\n            type: \"reasoning\",\n            text: \"\",\n            providerMetadata: {\n              anthropic: {\n                redactedData: part.data\n              }\n            }\n          });\n          break;\n        }\n        case \"tool_use\": {\n          content.push(\n            // when a json response tool is used, the tool call becomes the text:\n            usesJsonResponseTool ? {\n              type: \"text\",\n              text: JSON.stringify(part.input)\n            } : {\n              type: \"tool-call\",\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input)\n            }\n          );\n          break;\n        }\n        case \"server_tool_use\": {\n          if (part.name === \"web_search\" || part.name === \"code_execution\") {\n            content.push({\n              type: \"tool-call\",\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input),\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n        case \"web_search_tool_result\": {\n          if (Array.isArray(part.content)) {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"web_search\",\n              result: part.content.map((result) => {\n                var _a2;\n                return {\n                  url: result.url,\n                  title: result.title,\n                  pageAge: (_a2 = result.page_age) != null ? _a2 : null,\n                  encryptedContent: result.encrypted_content,\n                  type: result.type\n                };\n              }),\n              providerExecuted: true\n            });\n            for (const result of part.content) {\n              content.push({\n                type: \"source\",\n                sourceType: \"url\",\n                id: this.generateId(),\n                url: result.url,\n                title: result.title,\n                providerMetadata: {\n                  anthropic: {\n                    pageAge: (_a = result.page_age) != null ? _a : null\n                  }\n                }\n              });\n            }\n          } else {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"web_search\",\n              isError: true,\n              result: {\n                type: \"web_search_tool_result_error\",\n                errorCode: part.content.error_code\n              },\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n        case \"code_execution_tool_result\": {\n          if (part.content.type === \"code_execution_result\") {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"code_execution\",\n              result: {\n                type: part.content.type,\n                stdout: part.content.stdout,\n                stderr: part.content.stderr,\n                return_code: part.content.return_code\n              },\n              providerExecuted: true\n            });\n          } else if (part.content.type === \"code_execution_tool_result_error\") {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"code_execution\",\n              isError: true,\n              result: {\n                type: \"code_execution_tool_result_error\",\n                errorCode: part.content.error_code\n              },\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n      }\n    }\n    return {\n      content,\n      finishReason: mapAnthropicStopReason({\n        finishReason: response.stop_reason,\n        isJsonResponseFromTool: usesJsonResponseTool\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        cachedInputTokens: (_b = response.usage.cache_read_input_tokens) != null ? _b : void 0\n      },\n      request: { body: args },\n      response: {\n        id: (_c = response.id) != null ? _c : void 0,\n        modelId: (_d = response.model) != null ? _d : void 0,\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      warnings,\n      providerMetadata: {\n        anthropic: {\n          usage: response.usage,\n          cacheCreationInputTokens: (_e = response.usage.cache_creation_input_tokens) != null ? _e : null\n        }\n      }\n    };\n  }\n  async doStream(options) {\n    const { args, warnings, betas, usesJsonResponseTool } = await this.getArgs(options);\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n    const body = { ...args, stream: true };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.buildRequestUrl(true),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(body),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        anthropicMessagesChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    const contentBlocks = {};\n    let providerMetadata = void 0;\n    let blockType = void 0;\n    const generateId2 = this.generateId;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            switch (value.type) {\n              case \"ping\": {\n                return;\n              }\n              case \"content_block_start\": {\n                const contentBlockType = value.content_block.type;\n                blockType = contentBlockType;\n                switch (contentBlockType) {\n                  case \"text\": {\n                    contentBlocks[value.index] = { type: \"text\" };\n                    controller.enqueue({\n                      type: \"text-start\",\n                      id: String(value.index)\n                    });\n                    return;\n                  }\n                  case \"thinking\": {\n                    contentBlocks[value.index] = { type: \"reasoning\" };\n                    controller.enqueue({\n                      type: \"reasoning-start\",\n                      id: String(value.index)\n                    });\n                    return;\n                  }\n                  case \"redacted_thinking\": {\n                    contentBlocks[value.index] = { type: \"reasoning\" };\n                    controller.enqueue({\n                      type: \"reasoning-start\",\n                      id: String(value.index),\n                      providerMetadata: {\n                        anthropic: {\n                          redactedData: value.content_block.data\n                        }\n                      }\n                    });\n                    return;\n                  }\n                  case \"tool_use\": {\n                    contentBlocks[value.index] = usesJsonResponseTool ? { type: \"text\" } : {\n                      type: \"tool-call\",\n                      toolCallId: value.content_block.id,\n                      toolName: value.content_block.name,\n                      input: \"\"\n                    };\n                    controller.enqueue(\n                      usesJsonResponseTool ? { type: \"text-start\", id: String(value.index) } : {\n                        type: \"tool-input-start\",\n                        id: value.content_block.id,\n                        toolName: value.content_block.name\n                      }\n                    );\n                    return;\n                  }\n                  case \"server_tool_use\": {\n                    if (value.content_block.name === \"web_search\" || value.content_block.name === \"code_execution\") {\n                      contentBlocks[value.index] = {\n                        type: \"tool-call\",\n                        toolCallId: value.content_block.id,\n                        toolName: value.content_block.name,\n                        input: \"\",\n                        providerExecuted: true\n                      };\n                      controller.enqueue({\n                        type: \"tool-input-start\",\n                        id: value.content_block.id,\n                        toolName: value.content_block.name,\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  case \"web_search_tool_result\": {\n                    const part = value.content_block;\n                    if (Array.isArray(part.content)) {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"web_search\",\n                        result: part.content.map((result) => {\n                          var _a2;\n                          return {\n                            url: result.url,\n                            title: result.title,\n                            pageAge: (_a2 = result.page_age) != null ? _a2 : null,\n                            encryptedContent: result.encrypted_content,\n                            type: result.type\n                          };\n                        }),\n                        providerExecuted: true\n                      });\n                      for (const result of part.content) {\n                        controller.enqueue({\n                          type: \"source\",\n                          sourceType: \"url\",\n                          id: generateId2(),\n                          url: result.url,\n                          title: result.title,\n                          providerMetadata: {\n                            anthropic: {\n                              pageAge: (_a = result.page_age) != null ? _a : null\n                            }\n                          }\n                        });\n                      }\n                    } else {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"web_search\",\n                        isError: true,\n                        result: {\n                          type: \"web_search_tool_result_error\",\n                          errorCode: part.content.error_code\n                        },\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  case \"code_execution_tool_result\": {\n                    const part = value.content_block;\n                    if (part.content.type === \"code_execution_result\") {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"code_execution\",\n                        result: {\n                          type: part.content.type,\n                          stdout: part.content.stdout,\n                          stderr: part.content.stderr,\n                          return_code: part.content.return_code\n                        },\n                        providerExecuted: true\n                      });\n                    } else if (part.content.type === \"code_execution_tool_result_error\") {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"code_execution\",\n                        isError: true,\n                        result: {\n                          type: \"code_execution_tool_result_error\",\n                          errorCode: part.content.error_code\n                        },\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  default: {\n                    const _exhaustiveCheck = contentBlockType;\n                    throw new Error(\n                      `Unsupported content block type: ${_exhaustiveCheck}`\n                    );\n                  }\n                }\n              }\n              case \"content_block_stop\": {\n                if (contentBlocks[value.index] != null) {\n                  const contentBlock = contentBlocks[value.index];\n                  switch (contentBlock.type) {\n                    case \"text\": {\n                      controller.enqueue({\n                        type: \"text-end\",\n                        id: String(value.index)\n                      });\n                      break;\n                    }\n                    case \"reasoning\": {\n                      controller.enqueue({\n                        type: \"reasoning-end\",\n                        id: String(value.index)\n                      });\n                      break;\n                    }\n                    case \"tool-call\":\n                      if (!usesJsonResponseTool) {\n                        controller.enqueue({\n                          type: \"tool-input-end\",\n                          id: contentBlock.toolCallId\n                        });\n                        controller.enqueue(contentBlock);\n                      }\n                      break;\n                  }\n                  delete contentBlocks[value.index];\n                }\n                blockType = void 0;\n                return;\n              }\n              case \"content_block_delta\": {\n                const deltaType = value.delta.type;\n                switch (deltaType) {\n                  case \"text_delta\": {\n                    if (usesJsonResponseTool) {\n                      return;\n                    }\n                    controller.enqueue({\n                      type: \"text-delta\",\n                      id: String(value.index),\n                      delta: value.delta.text\n                    });\n                    return;\n                  }\n                  case \"thinking_delta\": {\n                    controller.enqueue({\n                      type: \"reasoning-delta\",\n                      id: String(value.index),\n                      delta: value.delta.thinking\n                    });\n                    return;\n                  }\n                  case \"signature_delta\": {\n                    if (blockType === \"thinking\") {\n                      controller.enqueue({\n                        type: \"reasoning-delta\",\n                        id: String(value.index),\n                        delta: \"\",\n                        providerMetadata: {\n                          anthropic: {\n                            signature: value.delta.signature\n                          }\n                        }\n                      });\n                    }\n                    return;\n                  }\n                  case \"input_json_delta\": {\n                    const contentBlock = contentBlocks[value.index];\n                    const delta = value.delta.partial_json;\n                    if (usesJsonResponseTool) {\n                      if ((contentBlock == null ? void 0 : contentBlock.type) !== \"text\") {\n                        return;\n                      }\n                      controller.enqueue({\n                        type: \"text-delta\",\n                        id: String(value.index),\n                        delta\n                      });\n                    } else {\n                      if ((contentBlock == null ? void 0 : contentBlock.type) !== \"tool-call\") {\n                        return;\n                      }\n                      controller.enqueue({\n                        type: \"tool-input-delta\",\n                        id: contentBlock.toolCallId,\n                        delta\n                      });\n                      contentBlock.input += delta;\n                    }\n                    return;\n                  }\n                  case \"citations_delta\": {\n                    const citation = value.delta.citation;\n                    processCitation(\n                      citation,\n                      citationDocuments,\n                      generateId2,\n                      (source) => controller.enqueue(source)\n                    );\n                    return;\n                  }\n                  default: {\n                    const _exhaustiveCheck = deltaType;\n                    throw new Error(\n                      `Unsupported delta type: ${_exhaustiveCheck}`\n                    );\n                  }\n                }\n              }\n              case \"message_start\": {\n                usage.inputTokens = value.message.usage.input_tokens;\n                usage.cachedInputTokens = (_b = value.message.usage.cache_read_input_tokens) != null ? _b : void 0;\n                providerMetadata = {\n                  anthropic: {\n                    usage: value.message.usage,\n                    cacheCreationInputTokens: (_c = value.message.usage.cache_creation_input_tokens) != null ? _c : null\n                  }\n                };\n                controller.enqueue({\n                  type: \"response-metadata\",\n                  id: (_d = value.message.id) != null ? _d : void 0,\n                  modelId: (_e = value.message.model) != null ? _e : void 0\n                });\n                return;\n              }\n              case \"message_delta\": {\n                usage.outputTokens = value.usage.output_tokens;\n                usage.totalTokens = ((_f = usage.inputTokens) != null ? _f : 0) + ((_g = value.usage.output_tokens) != null ? _g : 0);\n                finishReason = mapAnthropicStopReason({\n                  finishReason: value.delta.stop_reason,\n                  isJsonResponseFromTool: usesJsonResponseTool\n                });\n                return;\n              }\n              case \"message_stop\": {\n                controller.enqueue({\n                  type: \"finish\",\n                  finishReason,\n                  usage,\n                  providerMetadata\n                });\n                return;\n              }\n              case \"error\": {\n                controller.enqueue({ type: \"error\", error: value.error });\n                return;\n              }\n              default: {\n                const _exhaustiveCheck = value;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar anthropicMessagesResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"message\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"text\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        citations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(citationSchema).optional()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"thinking\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"redacted_thinking\"),\n        data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"server_tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown()).nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"web_search_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"web_search_result\"),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n              encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n              page_age: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n            })\n          ),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"web_search_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"code_execution_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"code_execution_result\"),\n            stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"code_execution_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n          })\n        ])\n      })\n    ])\n  ),\n  stop_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.looseObject({\n    input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    cache_creation_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n    cache_read_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish()\n  })\n});\nvar anthropicMessagesChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"message_start\"),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n      model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n      usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.looseObject({\n        input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n        output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n        cache_creation_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n        cache_read_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish()\n      })\n    })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"content_block_start\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    content_block: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"text\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"thinking\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"redacted_thinking\"),\n        data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"server_tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown()).nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"web_search_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"web_search_result\"),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n              encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n              page_age: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n            })\n          ),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"web_search_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"code_execution_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"code_execution_result\"),\n            stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"code_execution_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n          })\n        ])\n      })\n    ])\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"content_block_delta\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"input_json_delta\"),\n        partial_json: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"text_delta\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"thinking_delta\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"signature_delta\"),\n        signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"citations_delta\"),\n        citation: citationSchema\n      })\n    ])\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"content_block_stop\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"error\"),\n    error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"message_delta\"),\n    delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ stop_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish() }),\n    usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number() })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"message_stop\")\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"ping\")\n  })\n]);\nvar anthropicReasoningMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  redactedData: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n\n// src/tool/bash_20241022.ts\n\n\nvar bash_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.bash_20241022\",\n  name: \"bash\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].string(),\n    restart: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].boolean().optional()\n  })\n});\n\n// src/tool/bash_20250124.ts\n\n\nvar bash_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.bash_20250124\",\n  name: \"bash\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].string(),\n    restart: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].boolean().optional()\n  })\n});\n\n// src/tool/computer_20241022.ts\n\n\nvar computer_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.computer_20241022\",\n  name: \"computer\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\n      \"key\",\n      \"type\",\n      \"mouse_move\",\n      \"left_click\",\n      \"left_click_drag\",\n      \"right_click\",\n      \"middle_click\",\n      \"double_click\",\n      \"screenshot\",\n      \"cursor_position\"\n    ]),\n    coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().int()).optional(),\n    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n  })\n});\n\n// src/tool/computer_20250124.ts\n\n\nvar computer_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.computer_20250124\",\n  name: \"computer\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\n      \"key\",\n      \"hold_key\",\n      \"type\",\n      \"cursor_position\",\n      \"mouse_move\",\n      \"left_mouse_down\",\n      \"left_mouse_up\",\n      \"left_click\",\n      \"left_click_drag\",\n      \"right_click\",\n      \"middle_click\",\n      \"double_click\",\n      \"triple_click\",\n      \"scroll\",\n      \"wait\",\n      \"screenshot\"\n    ]),\n    coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.tuple([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().int(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().int()]).optional(),\n    duration: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n    scroll_amount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n    scroll_direction: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"up\", \"down\", \"left\", \"right\"]).optional(),\n    start_coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.tuple([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().int(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().int()]).optional(),\n    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n  })\n});\n\n// src/tool/text-editor_20241022.ts\n\n\nvar textEditor_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20241022\",\n  name: \"str_replace_editor\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\", \"undo_edit\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().int()).optional()\n  })\n});\n\n// src/tool/text-editor_20250124.ts\n\n\nvar textEditor_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20250124\",\n  name: \"str_replace_editor\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\", \"undo_edit\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().int()).optional()\n  })\n});\n\n// src/tool/text-editor_20250429.ts\n\n\nvar textEditor_20250429 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20250429\",\n  name: \"str_replace_based_edit_tool\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().int()).optional()\n  })\n});\n\n// src/anthropic-tools.ts\nvar anthropicTools = {\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20241022,\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20250124,\n  /**\n   * Claude can analyze data, create visualizations, perform complex calculations,\n   * run system commands, create and edit files, and process uploaded files directly within\n   * the API conversation.\n   *\n   * The code execution tool allows Claude to run Bash commands and manipulate files,\n   * including writing code, in a secure, sandboxed environment.\n   *\n   * Tool name must be `code_execution`.\n   */\n  codeExecution_20250522,\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20241022,\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20250124,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20241022,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20250124,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Note: This version does not support the \"undo_edit\" command.\n   *\n   * Tool name must be `str_replace_based_edit_tool`.\n   */\n  textEditor_20250429,\n  /**\n   * Creates a web search tool that gives Claude direct access to real-time web content.\n   *\n   * Tool name must be `web_search`.\n   *\n   * @param maxUses - Maximum number of web searches Claude can perform during the conversation.\n   * @param allowedDomains - Optional list of domains that Claude is allowed to search.\n   * @param blockedDomains - Optional list of domains that Claude should avoid when searching.\n   * @param userLocation - Optional user location information to provide geographically relevant search results.\n   */\n  webSearch_20250305\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFpLXNkay9hbnRocm9waWMvZGlzdC9pbnRlcm5hbC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFHMEI7QUFTTTtBQUNDOztBQUVqQztBQUN3RTtBQUM3QztBQUMzQiwrQkFBK0IsNENBQVE7QUFDdkMsUUFBUSw2Q0FBUztBQUNqQixTQUFTLDRDQUFRO0FBQ2pCLFVBQVUsNENBQVE7QUFDbEIsYUFBYSw0Q0FBUTtBQUNyQixHQUFHO0FBQ0gsQ0FBQztBQUNELHFDQUFxQyxzRkFBOEI7QUFDbkU7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDaUM7QUFDakMsdUNBQXVDLDRDQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw0Q0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLDZDQUFVO0FBQ3ZCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsNENBQVM7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNENBQVM7QUFDcEIsQ0FBQztBQUNELCtCQUErQiw0Q0FBUztBQUN4QyxpQkFBaUIsNkNBQVU7QUFDM0IsWUFBWSw0Q0FBUztBQUNyQixVQUFVLDJDQUFRLEVBQUUsNkNBQVUsYUFBYSw2Q0FBVTtBQUNyRCxrQkFBa0IsNENBQVM7QUFDM0IsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDZDQUFVO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDRDQUFTO0FBQ3pCLFVBQVUsNkNBQVU7QUFDcEIsU0FBUywyQ0FBUSxFQUFFLDZDQUFVLFFBQVEsNkNBQVU7QUFDL0MsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFHMEI7O0FBRTFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQzBGO0FBQ3pEO0FBQ2pDLG1DQUFtQyw0Q0FBUztBQUM1QztBQUNBO0FBQ0E7QUFDQSxXQUFXLDRDQUFTO0FBQ3BCO0FBQ0E7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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbWF0c3Vtb19hbmQvc3BlY2lmaWNhdGlvbi1kb2N1bWVudC1hZ2VudC9ub2RlX21vZHVsZXMvQGFpLXNkay9hbnRocm9waWMvZGlzdC9pbnRlcm5hbC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2FudGhyb3BpYy1tZXNzYWdlcy1sYW5ndWFnZS1tb2RlbC50c1xuaW1wb3J0IHtcbiAgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IgYXMgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IzXG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyXCI7XG5pbXBvcnQge1xuICBjb21iaW5lSGVhZGVycyxcbiAgY3JlYXRlRXZlbnRTb3VyY2VSZXNwb25zZUhhbmRsZXIsXG4gIGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXIsXG4gIGdlbmVyYXRlSWQsXG4gIHBhcnNlUHJvdmlkZXJPcHRpb25zIGFzIHBhcnNlUHJvdmlkZXJPcHRpb25zMixcbiAgcG9zdEpzb25Ub0FwaSxcbiAgcmVzb2x2ZVxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuaW1wb3J0IHsgeiBhcyB6NSB9IGZyb20gXCJ6b2QvdjRcIjtcblxuLy8gc3JjL2FudGhyb3BpYy1lcnJvci50c1xuaW1wb3J0IHsgY3JlYXRlSnNvbkVycm9yUmVzcG9uc2VIYW5kbGVyIH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogfSBmcm9tIFwiem9kL3Y0XCI7XG52YXIgYW50aHJvcGljRXJyb3JEYXRhU2NoZW1hID0gei5vYmplY3Qoe1xuICB0eXBlOiB6LmxpdGVyYWwoXCJlcnJvclwiKSxcbiAgZXJyb3I6IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICAgIG1lc3NhZ2U6IHouc3RyaW5nKClcbiAgfSlcbn0pO1xudmFyIGFudGhyb3BpY0ZhaWxlZFJlc3BvbnNlSGFuZGxlciA9IGNyZWF0ZUpzb25FcnJvclJlc3BvbnNlSGFuZGxlcih7XG4gIGVycm9yU2NoZW1hOiBhbnRocm9waWNFcnJvckRhdGFTY2hlbWEsXG4gIGVycm9yVG9NZXNzYWdlOiAoZGF0YSkgPT4gZGF0YS5lcnJvci5tZXNzYWdlXG59KTtcblxuLy8gc3JjL2FudGhyb3BpYy1tZXNzYWdlcy1vcHRpb25zLnRzXG5pbXBvcnQgeyB6IGFzIHoyIH0gZnJvbSBcInpvZC92NFwiO1xudmFyIGFudGhyb3BpY0ZpbGVQYXJ0UHJvdmlkZXJPcHRpb25zID0gejIub2JqZWN0KHtcbiAgLyoqXG4gICAqIENpdGF0aW9uIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgZG9jdW1lbnQuXG4gICAqIFdoZW4gZW5hYmxlZCwgdGhpcyBkb2N1bWVudCB3aWxsIGdlbmVyYXRlIGNpdGF0aW9ucyBpbiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICBjaXRhdGlvbnM6IHoyLm9iamVjdCh7XG4gICAgLyoqXG4gICAgICogRW5hYmxlIGNpdGF0aW9ucyBmb3IgdGhpcyBkb2N1bWVudFxuICAgICAqL1xuICAgIGVuYWJsZWQ6IHoyLmJvb2xlYW4oKVxuICB9KS5vcHRpb25hbCgpLFxuICAvKipcbiAgICogQ3VzdG9tIHRpdGxlIGZvciB0aGUgZG9jdW1lbnQuXG4gICAqIElmIG5vdCBwcm92aWRlZCwgdGhlIGZpbGVuYW1lIHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIHRpdGxlOiB6Mi5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAvKipcbiAgICogQ29udGV4dCBhYm91dCB0aGUgZG9jdW1lbnQgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgbW9kZWxcbiAgICogYnV0IG5vdCB1c2VkIHRvd2FyZHMgY2l0ZWQgY29udGVudC5cbiAgICogVXNlZnVsIGZvciBzdG9yaW5nIGRvY3VtZW50IG1ldGFkYXRhIGFzIHRleHQgb3Igc3RyaW5naWZpZWQgSlNPTi5cbiAgICovXG4gIGNvbnRleHQ6IHoyLnN0cmluZygpLm9wdGlvbmFsKClcbn0pO1xudmFyIGFudGhyb3BpY1Byb3ZpZGVyT3B0aW9ucyA9IHoyLm9iamVjdCh7XG4gIHNlbmRSZWFzb25pbmc6IHoyLmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICB0aGlua2luZzogejIub2JqZWN0KHtcbiAgICB0eXBlOiB6Mi51bmlvbihbejIubGl0ZXJhbChcImVuYWJsZWRcIiksIHoyLmxpdGVyYWwoXCJkaXNhYmxlZFwiKV0pLFxuICAgIGJ1ZGdldFRva2VuczogejIubnVtYmVyKCkub3B0aW9uYWwoKVxuICB9KS5vcHRpb25hbCgpLFxuICAvKipcbiAgICogV2hldGhlciB0byBkaXNhYmxlIHBhcmFsbGVsIGZ1bmN0aW9uIGNhbGxpbmcgZHVyaW5nIHRvb2wgdXNlLiBEZWZhdWx0IGlzIGZhbHNlLlxuICAgKiBXaGVuIHNldCB0byB0cnVlLCBDbGF1ZGUgd2lsbCB1c2UgYXQgbW9zdCBvbmUgdG9vbCBwZXIgcmVzcG9uc2UuXG4gICAqL1xuICBkaXNhYmxlUGFyYWxsZWxUb29sVXNlOiB6Mi5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgLyoqXG4gICAqIENhY2hlIGNvbnRyb2wgc2V0dGluZ3MgZm9yIHRoaXMgbWVzc2FnZS5cbiAgICogU2VlIGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3MvYnVpbGQtd2l0aC1jbGF1ZGUvcHJvbXB0LWNhY2hpbmdcbiAgICovXG4gIGNhY2hlQ29udHJvbDogejIub2JqZWN0KHtcbiAgICB0eXBlOiB6Mi5saXRlcmFsKFwiZXBoZW1lcmFsXCIpLFxuICAgIHR0bDogejIudW5pb24oW3oyLmxpdGVyYWwoXCI1bVwiKSwgejIubGl0ZXJhbChcIjFoXCIpXSkub3B0aW9uYWwoKVxuICB9KS5vcHRpb25hbCgpXG59KTtcblxuLy8gc3JjL2FudGhyb3BpYy1wcmVwYXJlLXRvb2xzLnRzXG5pbXBvcnQge1xuICBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvclxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlclwiO1xuXG4vLyBzcmMvZ2V0LWNhY2hlLWNvbnRyb2wudHNcbmZ1bmN0aW9uIGdldENhY2hlQ29udHJvbChwcm92aWRlck1ldGFkYXRhKSB7XG4gIHZhciBfYTtcbiAgY29uc3QgYW50aHJvcGljID0gcHJvdmlkZXJNZXRhZGF0YSA9PSBudWxsID8gdm9pZCAwIDogcHJvdmlkZXJNZXRhZGF0YS5hbnRocm9waWM7XG4gIGNvbnN0IGNhY2hlQ29udHJvbFZhbHVlID0gKF9hID0gYW50aHJvcGljID09IG51bGwgPyB2b2lkIDAgOiBhbnRocm9waWMuY2FjaGVDb250cm9sKSAhPSBudWxsID8gX2EgOiBhbnRocm9waWMgPT0gbnVsbCA/IHZvaWQgMCA6IGFudGhyb3BpYy5jYWNoZV9jb250cm9sO1xuICByZXR1cm4gY2FjaGVDb250cm9sVmFsdWU7XG59XG5cbi8vIHNyYy90b29sL3dlYi1zZWFyY2hfMjAyNTAzMDUudHNcbmltcG9ydCB7IGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5V2l0aE91dHB1dFNjaGVtYSB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHozIH0gZnJvbSBcInpvZC92NFwiO1xudmFyIHdlYlNlYXJjaF8yMDI1MDMwNUFyZ3NTY2hlbWEgPSB6My5vYmplY3Qoe1xuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygd2ViIHNlYXJjaGVzIENsYXVkZSBjYW4gcGVyZm9ybSBkdXJpbmcgdGhlIGNvbnZlcnNhdGlvbi5cbiAgICovXG4gIG1heFVzZXM6IHozLm51bWJlcigpLm9wdGlvbmFsKCksXG4gIC8qKlxuICAgKiBPcHRpb25hbCBsaXN0IG9mIGRvbWFpbnMgdGhhdCBDbGF1ZGUgaXMgYWxsb3dlZCB0byBzZWFyY2guXG4gICAqL1xuICBhbGxvd2VkRG9tYWluczogejMuYXJyYXkoejMuc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gIC8qKlxuICAgKiBPcHRpb25hbCBsaXN0IG9mIGRvbWFpbnMgdGhhdCBDbGF1ZGUgc2hvdWxkIGF2b2lkIHdoZW4gc2VhcmNoaW5nLlxuICAgKi9cbiAgYmxvY2tlZERvbWFpbnM6IHozLmFycmF5KHozLnN0cmluZygpKS5vcHRpb25hbCgpLFxuICAvKipcbiAgICogT3B0aW9uYWwgdXNlciBsb2NhdGlvbiBpbmZvcm1hdGlvbiB0byBwcm92aWRlIGdlb2dyYXBoaWNhbGx5IHJlbGV2YW50IHNlYXJjaCByZXN1bHRzLlxuICAgKi9cbiAgdXNlckxvY2F0aW9uOiB6My5vYmplY3Qoe1xuICAgIHR5cGU6IHozLmxpdGVyYWwoXCJhcHByb3hpbWF0ZVwiKSxcbiAgICBjaXR5OiB6My5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHJlZ2lvbjogejMuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBjb3VudHJ5OiB6My5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHRpbWV6b25lOiB6My5zdHJpbmcoKS5vcHRpb25hbCgpXG4gIH0pLm9wdGlvbmFsKClcbn0pO1xudmFyIHdlYlNlYXJjaF8yMDI1MDMwNU91dHB1dFNjaGVtYSA9IHozLmFycmF5KFxuICB6My5vYmplY3Qoe1xuICAgIHVybDogejMuc3RyaW5nKCksXG4gICAgdGl0bGU6IHozLnN0cmluZygpLFxuICAgIHBhZ2VBZ2U6IHozLnN0cmluZygpLm51bGxhYmxlKCksXG4gICAgZW5jcnlwdGVkQ29udGVudDogejMuc3RyaW5nKCksXG4gICAgdHlwZTogejMuc3RyaW5nKClcbiAgfSlcbik7XG52YXIgZmFjdG9yeSA9IGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5V2l0aE91dHB1dFNjaGVtYSh7XG4gIGlkOiBcImFudGhyb3BpYy53ZWJfc2VhcmNoXzIwMjUwMzA1XCIsXG4gIG5hbWU6IFwid2ViX3NlYXJjaFwiLFxuICBpbnB1dFNjaGVtYTogejMub2JqZWN0KHtcbiAgICBxdWVyeTogejMuc3RyaW5nKClcbiAgfSksXG4gIG91dHB1dFNjaGVtYTogd2ViU2VhcmNoXzIwMjUwMzA1T3V0cHV0U2NoZW1hXG59KTtcbnZhciB3ZWJTZWFyY2hfMjAyNTAzMDUgPSAoYXJncyA9IHt9KSA9PiB7XG4gIHJldHVybiBmYWN0b3J5KGFyZ3MpO1xufTtcblxuLy8gc3JjL2FudGhyb3BpYy1wcmVwYXJlLXRvb2xzLnRzXG5mdW5jdGlvbiBpc1dlYlNlYXJjaFRvb2wodG9vbCkge1xuICByZXR1cm4gdHlwZW9mIHRvb2wgPT09IFwib2JqZWN0XCIgJiYgdG9vbCAhPT0gbnVsbCAmJiBcInR5cGVcIiBpbiB0b29sICYmIHRvb2wudHlwZSA9PT0gXCJ3ZWJfc2VhcmNoXzIwMjUwMzA1XCI7XG59XG5mdW5jdGlvbiBwcmVwYXJlVG9vbHMoe1xuICB0b29scyxcbiAgdG9vbENob2ljZSxcbiAgZGlzYWJsZVBhcmFsbGVsVG9vbFVzZVxufSkge1xuICB0b29scyA9ICh0b29scyA9PSBudWxsID8gdm9pZCAwIDogdG9vbHMubGVuZ3RoKSA/IHRvb2xzIDogdm9pZCAwO1xuICBjb25zdCB0b29sV2FybmluZ3MgPSBbXTtcbiAgY29uc3QgYmV0YXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBpZiAodG9vbHMgPT0gbnVsbCkge1xuICAgIHJldHVybiB7IHRvb2xzOiB2b2lkIDAsIHRvb2xDaG9pY2U6IHZvaWQgMCwgdG9vbFdhcm5pbmdzLCBiZXRhcyB9O1xuICB9XG4gIGNvbnN0IGFudGhyb3BpY1Rvb2xzMiA9IFtdO1xuICBmb3IgKGNvbnN0IHRvb2wgb2YgdG9vbHMpIHtcbiAgICBpZiAoaXNXZWJTZWFyY2hUb29sKHRvb2wpKSB7XG4gICAgICBhbnRocm9waWNUb29sczIucHVzaCh0b29sKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRvb2wudHlwZSkge1xuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgIGNvbnN0IGNhY2hlQ29udHJvbCA9IGdldENhY2hlQ29udHJvbCh0b29sLnByb3ZpZGVyT3B0aW9ucyk7XG4gICAgICAgIGFudGhyb3BpY1Rvb2xzMi5wdXNoKHtcbiAgICAgICAgICBuYW1lOiB0b29sLm5hbWUsXG4gICAgICAgICAgZGVzY3JpcHRpb246IHRvb2wuZGVzY3JpcHRpb24sXG4gICAgICAgICAgaW5wdXRfc2NoZW1hOiB0b29sLmlucHV0U2NoZW1hLFxuICAgICAgICAgIGNhY2hlX2NvbnRyb2w6IGNhY2hlQ29udHJvbFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwicHJvdmlkZXItZGVmaW5lZFwiOlxuICAgICAgICBzd2l0Y2ggKHRvb2wuaWQpIHtcbiAgICAgICAgICBjYXNlIFwiYW50aHJvcGljLmNvbXB1dGVyXzIwMjUwMTI0XCI6XG4gICAgICAgICAgICBiZXRhcy5hZGQoXCJjb21wdXRlci11c2UtMjAyNS0wMS0yNFwiKTtcbiAgICAgICAgICAgIGFudGhyb3BpY1Rvb2xzMi5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogXCJjb21wdXRlclwiLFxuICAgICAgICAgICAgICB0eXBlOiBcImNvbXB1dGVyXzIwMjUwMTI0XCIsXG4gICAgICAgICAgICAgIGRpc3BsYXlfd2lkdGhfcHg6IHRvb2wuYXJncy5kaXNwbGF5V2lkdGhQeCxcbiAgICAgICAgICAgICAgZGlzcGxheV9oZWlnaHRfcHg6IHRvb2wuYXJncy5kaXNwbGF5SGVpZ2h0UHgsXG4gICAgICAgICAgICAgIGRpc3BsYXlfbnVtYmVyOiB0b29sLmFyZ3MuZGlzcGxheU51bWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYW50aHJvcGljLmNvbXB1dGVyXzIwMjQxMDIyXCI6XG4gICAgICAgICAgICBiZXRhcy5hZGQoXCJjb21wdXRlci11c2UtMjAyNC0xMC0yMlwiKTtcbiAgICAgICAgICAgIGFudGhyb3BpY1Rvb2xzMi5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogXCJjb21wdXRlclwiLFxuICAgICAgICAgICAgICB0eXBlOiBcImNvbXB1dGVyXzIwMjQxMDIyXCIsXG4gICAgICAgICAgICAgIGRpc3BsYXlfd2lkdGhfcHg6IHRvb2wuYXJncy5kaXNwbGF5V2lkdGhQeCxcbiAgICAgICAgICAgICAgZGlzcGxheV9oZWlnaHRfcHg6IHRvb2wuYXJncy5kaXNwbGF5SGVpZ2h0UHgsXG4gICAgICAgICAgICAgIGRpc3BsYXlfbnVtYmVyOiB0b29sLmFyZ3MuZGlzcGxheU51bWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYW50aHJvcGljLnRleHRfZWRpdG9yXzIwMjUwMTI0XCI6XG4gICAgICAgICAgICBiZXRhcy5hZGQoXCJjb21wdXRlci11c2UtMjAyNS0wMS0yNFwiKTtcbiAgICAgICAgICAgIGFudGhyb3BpY1Rvb2xzMi5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogXCJzdHJfcmVwbGFjZV9lZGl0b3JcIixcbiAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0X2VkaXRvcl8yMDI1MDEyNFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJhbnRocm9waWMudGV4dF9lZGl0b3JfMjAyNDEwMjJcIjpcbiAgICAgICAgICAgIGJldGFzLmFkZChcImNvbXB1dGVyLXVzZS0yMDI0LTEwLTIyXCIpO1xuICAgICAgICAgICAgYW50aHJvcGljVG9vbHMyLnB1c2goe1xuICAgICAgICAgICAgICBuYW1lOiBcInN0cl9yZXBsYWNlX2VkaXRvclwiLFxuICAgICAgICAgICAgICB0eXBlOiBcInRleHRfZWRpdG9yXzIwMjQxMDIyXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImFudGhyb3BpYy50ZXh0X2VkaXRvcl8yMDI1MDQyOVwiOlxuICAgICAgICAgICAgYmV0YXMuYWRkKFwiY29tcHV0ZXItdXNlLTIwMjUtMDEtMjRcIik7XG4gICAgICAgICAgICBhbnRocm9waWNUb29sczIucHVzaCh7XG4gICAgICAgICAgICAgIG5hbWU6IFwic3RyX3JlcGxhY2VfYmFzZWRfZWRpdF90b29sXCIsXG4gICAgICAgICAgICAgIHR5cGU6IFwidGV4dF9lZGl0b3JfMjAyNTA0MjlcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYW50aHJvcGljLmJhc2hfMjAyNTAxMjRcIjpcbiAgICAgICAgICAgIGJldGFzLmFkZChcImNvbXB1dGVyLXVzZS0yMDI1LTAxLTI0XCIpO1xuICAgICAgICAgICAgYW50aHJvcGljVG9vbHMyLnB1c2goe1xuICAgICAgICAgICAgICBuYW1lOiBcImJhc2hcIixcbiAgICAgICAgICAgICAgdHlwZTogXCJiYXNoXzIwMjUwMTI0XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImFudGhyb3BpYy5iYXNoXzIwMjQxMDIyXCI6XG4gICAgICAgICAgICBiZXRhcy5hZGQoXCJjb21wdXRlci11c2UtMjAyNC0xMC0yMlwiKTtcbiAgICAgICAgICAgIGFudGhyb3BpY1Rvb2xzMi5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogXCJiYXNoXCIsXG4gICAgICAgICAgICAgIHR5cGU6IFwiYmFzaF8yMDI0MTAyMlwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJhbnRocm9waWMud2ViX3NlYXJjaF8yMDI1MDMwNVwiOiB7XG4gICAgICAgICAgICBjb25zdCBhcmdzID0gd2ViU2VhcmNoXzIwMjUwMzA1QXJnc1NjaGVtYS5wYXJzZSh0b29sLmFyZ3MpO1xuICAgICAgICAgICAgYW50aHJvcGljVG9vbHMyLnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiBcIndlYl9zZWFyY2hfMjAyNTAzMDVcIixcbiAgICAgICAgICAgICAgbmFtZTogXCJ3ZWJfc2VhcmNoXCIsXG4gICAgICAgICAgICAgIG1heF91c2VzOiBhcmdzLm1heFVzZXMsXG4gICAgICAgICAgICAgIGFsbG93ZWRfZG9tYWluczogYXJncy5hbGxvd2VkRG9tYWlucyxcbiAgICAgICAgICAgICAgYmxvY2tlZF9kb21haW5zOiBhcmdzLmJsb2NrZWREb21haW5zLFxuICAgICAgICAgICAgICB1c2VyX2xvY2F0aW9uOiBhcmdzLnVzZXJMb2NhdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImFudGhyb3BpYy5jb2RlX2V4ZWN1dGlvbl8yMDI1MDUyMlwiOiB7XG4gICAgICAgICAgICBiZXRhcy5hZGQoXCJjb2RlLWV4ZWN1dGlvbi0yMDI1LTA1LTIyXCIpO1xuICAgICAgICAgICAgYW50aHJvcGljVG9vbHMyLnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiBcImNvZGVfZXhlY3V0aW9uXzIwMjUwNTIyXCIsXG4gICAgICAgICAgICAgIG5hbWU6IFwiY29kZV9leGVjdXRpb25cIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRvb2xXYXJuaW5ncy5wdXNoKHsgdHlwZTogXCJ1bnN1cHBvcnRlZC10b29sXCIsIHRvb2wgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRvb2xXYXJuaW5ncy5wdXNoKHsgdHlwZTogXCJ1bnN1cHBvcnRlZC10b29sXCIsIHRvb2wgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAodG9vbENob2ljZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvb2xzOiBhbnRocm9waWNUb29sczIsXG4gICAgICB0b29sQ2hvaWNlOiBkaXNhYmxlUGFyYWxsZWxUb29sVXNlID8geyB0eXBlOiBcImF1dG9cIiwgZGlzYWJsZV9wYXJhbGxlbF90b29sX3VzZTogZGlzYWJsZVBhcmFsbGVsVG9vbFVzZSB9IDogdm9pZCAwLFxuICAgICAgdG9vbFdhcm5pbmdzLFxuICAgICAgYmV0YXNcbiAgICB9O1xuICB9XG4gIGNvbnN0IHR5cGUgPSB0b29sQ2hvaWNlLnR5cGU7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJhdXRvXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b29sczogYW50aHJvcGljVG9vbHMyLFxuICAgICAgICB0b29sQ2hvaWNlOiB7XG4gICAgICAgICAgdHlwZTogXCJhdXRvXCIsXG4gICAgICAgICAgZGlzYWJsZV9wYXJhbGxlbF90b29sX3VzZTogZGlzYWJsZVBhcmFsbGVsVG9vbFVzZVxuICAgICAgICB9LFxuICAgICAgICB0b29sV2FybmluZ3MsXG4gICAgICAgIGJldGFzXG4gICAgICB9O1xuICAgIGNhc2UgXCJyZXF1aXJlZFwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9vbHM6IGFudGhyb3BpY1Rvb2xzMixcbiAgICAgICAgdG9vbENob2ljZToge1xuICAgICAgICAgIHR5cGU6IFwiYW55XCIsXG4gICAgICAgICAgZGlzYWJsZV9wYXJhbGxlbF90b29sX3VzZTogZGlzYWJsZVBhcmFsbGVsVG9vbFVzZVxuICAgICAgICB9LFxuICAgICAgICB0b29sV2FybmluZ3MsXG4gICAgICAgIGJldGFzXG4gICAgICB9O1xuICAgIGNhc2UgXCJub25lXCI6XG4gICAgICByZXR1cm4geyB0b29sczogdm9pZCAwLCB0b29sQ2hvaWNlOiB2b2lkIDAsIHRvb2xXYXJuaW5ncywgYmV0YXMgfTtcbiAgICBjYXNlIFwidG9vbFwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9vbHM6IGFudGhyb3BpY1Rvb2xzMixcbiAgICAgICAgdG9vbENob2ljZToge1xuICAgICAgICAgIHR5cGU6IFwidG9vbFwiLFxuICAgICAgICAgIG5hbWU6IHRvb2xDaG9pY2UudG9vbE5hbWUsXG4gICAgICAgICAgZGlzYWJsZV9wYXJhbGxlbF90b29sX3VzZTogZGlzYWJsZVBhcmFsbGVsVG9vbFVzZVxuICAgICAgICB9LFxuICAgICAgICB0b29sV2FybmluZ3MsXG4gICAgICAgIGJldGFzXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGNvbnN0IF9leGhhdXN0aXZlQ2hlY2sgPSB0eXBlO1xuICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkRnVuY3Rpb25hbGl0eUVycm9yKHtcbiAgICAgICAgZnVuY3Rpb25hbGl0eTogYHRvb2wgY2hvaWNlIHR5cGU6ICR7X2V4aGF1c3RpdmVDaGVja31gXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gc3JjL2NvbnZlcnQtdG8tYW50aHJvcGljLW1lc3NhZ2VzLXByb21wdC50c1xuaW1wb3J0IHtcbiAgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IgYXMgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IyXG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyXCI7XG5pbXBvcnQgeyBjb252ZXJ0VG9CYXNlNjQsIHBhcnNlUHJvdmlkZXJPcHRpb25zIH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcblxuLy8gc3JjL3Rvb2wvY29kZS1leGVjdXRpb25fMjAyNTA1MjIudHNcbmltcG9ydCB7IGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5V2l0aE91dHB1dFNjaGVtYSBhcyBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWEyIH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogYXMgejQgfSBmcm9tIFwiem9kL3Y0XCI7XG52YXIgY29kZUV4ZWN1dGlvbl8yMDI1MDUyMk91dHB1dFNjaGVtYSA9IHo0Lm9iamVjdCh7XG4gIHR5cGU6IHo0LmxpdGVyYWwoXCJjb2RlX2V4ZWN1dGlvbl9yZXN1bHRcIiksXG4gIHN0ZG91dDogejQuc3RyaW5nKCksXG4gIHN0ZGVycjogejQuc3RyaW5nKCksXG4gIHJldHVybl9jb2RlOiB6NC5udW1iZXIoKVxufSk7XG52YXIgZmFjdG9yeTIgPSBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWEyKHtcbiAgaWQ6IFwiYW50aHJvcGljLmNvZGVfZXhlY3V0aW9uXzIwMjUwNTIyXCIsXG4gIG5hbWU6IFwiY29kZV9leGVjdXRpb25cIixcbiAgaW5wdXRTY2hlbWE6IHo0Lm9iamVjdCh7XG4gICAgY29kZTogejQuc3RyaW5nKClcbiAgfSksXG4gIG91dHB1dFNjaGVtYTogY29kZUV4ZWN1dGlvbl8yMDI1MDUyMk91dHB1dFNjaGVtYVxufSk7XG52YXIgY29kZUV4ZWN1dGlvbl8yMDI1MDUyMiA9IChhcmdzID0ge30pID0+IHtcbiAgcmV0dXJuIGZhY3RvcnkyKGFyZ3MpO1xufTtcblxuLy8gc3JjL2NvbnZlcnQtdG8tYW50aHJvcGljLW1lc3NhZ2VzLXByb21wdC50c1xuZnVuY3Rpb24gY29udmVydFRvU3RyaW5nKGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGRhdGEsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKFwidXRmLThcIik7XG4gIH1cbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShkYXRhKTtcbiAgfVxuICBpZiAoZGF0YSBpbnN0YW5jZW9mIFVSTCkge1xuICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcjIoe1xuICAgICAgZnVuY3Rpb25hbGl0eTogXCJVUkwtYmFzZWQgdGV4dCBkb2N1bWVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgZm9yIGNpdGF0aW9uc1wiXG4gICAgfSk7XG4gIH1cbiAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkRnVuY3Rpb25hbGl0eUVycm9yMih7XG4gICAgZnVuY3Rpb25hbGl0eTogYHVuc3VwcG9ydGVkIGRhdGEgdHlwZSBmb3IgdGV4dCBkb2N1bWVudHM6ICR7dHlwZW9mIGRhdGF9YFxuICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNvbnZlcnRUb0FudGhyb3BpY01lc3NhZ2VzUHJvbXB0KHtcbiAgcHJvbXB0LFxuICBzZW5kUmVhc29uaW5nLFxuICB3YXJuaW5nc1xufSkge1xuICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICBjb25zdCBiZXRhcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGNvbnN0IGJsb2NrcyA9IGdyb3VwSW50b0Jsb2Nrcyhwcm9tcHQpO1xuICBsZXQgc3lzdGVtID0gdm9pZCAwO1xuICBjb25zdCBtZXNzYWdlcyA9IFtdO1xuICBhc3luYyBmdW5jdGlvbiBzaG91bGRFbmFibGVDaXRhdGlvbnMocHJvdmlkZXJNZXRhZGF0YSkge1xuICAgIHZhciBfYTIsIF9iMjtcbiAgICBjb25zdCBhbnRocm9waWNPcHRpb25zID0gYXdhaXQgcGFyc2VQcm92aWRlck9wdGlvbnMoe1xuICAgICAgcHJvdmlkZXI6IFwiYW50aHJvcGljXCIsXG4gICAgICBwcm92aWRlck9wdGlvbnM6IHByb3ZpZGVyTWV0YWRhdGEsXG4gICAgICBzY2hlbWE6IGFudGhyb3BpY0ZpbGVQYXJ0UHJvdmlkZXJPcHRpb25zXG4gICAgfSk7XG4gICAgcmV0dXJuIChfYjIgPSAoX2EyID0gYW50aHJvcGljT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogYW50aHJvcGljT3B0aW9ucy5jaXRhdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuZW5hYmxlZCkgIT0gbnVsbCA/IF9iMiA6IGZhbHNlO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGdldERvY3VtZW50TWV0YWRhdGEocHJvdmlkZXJNZXRhZGF0YSkge1xuICAgIGNvbnN0IGFudGhyb3BpY09wdGlvbnMgPSBhd2FpdCBwYXJzZVByb3ZpZGVyT3B0aW9ucyh7XG4gICAgICBwcm92aWRlcjogXCJhbnRocm9waWNcIixcbiAgICAgIHByb3ZpZGVyT3B0aW9uczogcHJvdmlkZXJNZXRhZGF0YSxcbiAgICAgIHNjaGVtYTogYW50aHJvcGljRmlsZVBhcnRQcm92aWRlck9wdGlvbnNcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdGl0bGU6IGFudGhyb3BpY09wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IGFudGhyb3BpY09wdGlvbnMudGl0bGUsXG4gICAgICBjb250ZXh0OiBhbnRocm9waWNPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBhbnRocm9waWNPcHRpb25zLmNvbnRleHRcbiAgICB9O1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYmxvY2sgPSBibG9ja3NbaV07XG4gICAgY29uc3QgaXNMYXN0QmxvY2sgPSBpID09PSBibG9ja3MubGVuZ3RoIC0gMTtcbiAgICBjb25zdCB0eXBlID0gYmxvY2sudHlwZTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJzeXN0ZW1cIjoge1xuICAgICAgICBpZiAoc3lzdGVtICE9IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IyKHtcbiAgICAgICAgICAgIGZ1bmN0aW9uYWxpdHk6IFwiTXVsdGlwbGUgc3lzdGVtIG1lc3NhZ2VzIHRoYXQgYXJlIHNlcGFyYXRlZCBieSB1c2VyL2Fzc2lzdGFudCBtZXNzYWdlc1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3lzdGVtID0gYmxvY2subWVzc2FnZXMubWFwKCh7IGNvbnRlbnQsIHByb3ZpZGVyT3B0aW9ucyB9KSA9PiAoe1xuICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgIHRleHQ6IGNvbnRlbnQsXG4gICAgICAgICAgY2FjaGVfY29udHJvbDogZ2V0Q2FjaGVDb250cm9sKHByb3ZpZGVyT3B0aW9ucylcbiAgICAgICAgfSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ1c2VyXCI6IHtcbiAgICAgICAgY29uc3QgYW50aHJvcGljQ29udGVudCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgYmxvY2subWVzc2FnZXMpIHtcbiAgICAgICAgICBjb25zdCB7IHJvbGUsIGNvbnRlbnQgfSA9IG1lc3NhZ2U7XG4gICAgICAgICAgc3dpdGNoIChyb2xlKSB7XG4gICAgICAgICAgICBjYXNlIFwidXNlclwiOiB7XG4gICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29udGVudC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnQgPSBjb250ZW50W2pdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzTGFzdFBhcnQgPSBqID09PSBjb250ZW50Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgY2FjaGVDb250cm9sID0gKF9hID0gZ2V0Q2FjaGVDb250cm9sKHBhcnQucHJvdmlkZXJPcHRpb25zKSkgIT0gbnVsbCA/IF9hIDogaXNMYXN0UGFydCA/IGdldENhY2hlQ29udHJvbChtZXNzYWdlLnByb3ZpZGVyT3B0aW9ucykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChwYXJ0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgYW50aHJvcGljQ29udGVudC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBwYXJ0LnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgY2FjaGVfY29udHJvbDogY2FjaGVDb250cm9sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJmaWxlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnQubWVkaWFUeXBlLnN0YXJ0c1dpdGgoXCJpbWFnZS9cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhbnRocm9waWNDb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJpbWFnZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBwYXJ0LmRhdGEgaW5zdGFuY2VvZiBVUkwgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidXJsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcGFydC5kYXRhLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYmFzZTY0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhX3R5cGU6IHBhcnQubWVkaWFUeXBlID09PSBcImltYWdlLypcIiA/IFwiaW1hZ2UvanBlZ1wiIDogcGFydC5tZWRpYVR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGNvbnZlcnRUb0Jhc2U2NChwYXJ0LmRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVfY29udHJvbDogY2FjaGVDb250cm9sXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydC5tZWRpYVR5cGUgPT09IFwiYXBwbGljYXRpb24vcGRmXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBiZXRhcy5hZGQoXCJwZGZzLTIwMjQtMDktMjVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5hYmxlQ2l0YXRpb25zID0gYXdhaXQgc2hvdWxkRW5hYmxlQ2l0YXRpb25zKFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFydC5wcm92aWRlck9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXdhaXQgZ2V0RG9jdW1lbnRNZXRhZGF0YShcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQucHJvdmlkZXJPcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICBhbnRocm9waWNDb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkb2N1bWVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBwYXJ0LmRhdGEgaW5zdGFuY2VvZiBVUkwgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidXJsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcGFydC5kYXRhLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYmFzZTY0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhX3R5cGU6IFwiYXBwbGljYXRpb24vcGRmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGNvbnZlcnRUb0Jhc2U2NChwYXJ0LmRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IChfYiA9IG1ldGFkYXRhLnRpdGxlKSAhPSBudWxsID8gX2IgOiBwYXJ0LmZpbGVuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4ubWV0YWRhdGEuY29udGV4dCAmJiB7IGNvbnRleHQ6IG1ldGFkYXRhLmNvbnRleHQgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmVuYWJsZUNpdGF0aW9ucyAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNpdGF0aW9uczogeyBlbmFibGVkOiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZV9jb250cm9sOiBjYWNoZUNvbnRyb2xcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0Lm1lZGlhVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmFibGVDaXRhdGlvbnMgPSBhd2FpdCBzaG91bGRFbmFibGVDaXRhdGlvbnMoXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0LnByb3ZpZGVyT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhd2FpdCBnZXREb2N1bWVudE1ldGFkYXRhKFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFydC5wcm92aWRlck9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgIGFudGhyb3BpY0NvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRvY3VtZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHBhcnQuZGF0YSBpbnN0YW5jZW9mIFVSTCA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1cmxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBwYXJ0LmRhdGEudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhX3R5cGU6IFwidGV4dC9wbGFpblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBjb252ZXJ0VG9TdHJpbmcocGFydC5kYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAoX2MgPSBtZXRhZGF0YS50aXRsZSkgIT0gbnVsbCA/IF9jIDogcGFydC5maWxlbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm1ldGFkYXRhLmNvbnRleHQgJiYgeyBjb250ZXh0OiBtZXRhZGF0YS5jb250ZXh0IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5lbmFibGVDaXRhdGlvbnMgJiYge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjaXRhdGlvbnM6IHsgZW5hYmxlZDogdHJ1ZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVfY29udHJvbDogY2FjaGVDb250cm9sXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkRnVuY3Rpb25hbGl0eUVycm9yMih7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbmFsaXR5OiBgbWVkaWEgdHlwZTogJHtwYXJ0Lm1lZGlhVHlwZX1gXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcInRvb2xcIjoge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgY29udGVudC5sZW5ndGg7IGkyKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0ID0gY29udGVudFtpMl07XG4gICAgICAgICAgICAgICAgY29uc3QgaXNMYXN0UGFydCA9IGkyID09PSBjb250ZW50Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgY2FjaGVDb250cm9sID0gKF9kID0gZ2V0Q2FjaGVDb250cm9sKHBhcnQucHJvdmlkZXJPcHRpb25zKSkgIT0gbnVsbCA/IF9kIDogaXNMYXN0UGFydCA/IGdldENhY2hlQ29udHJvbChtZXNzYWdlLnByb3ZpZGVyT3B0aW9ucykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gcGFydC5vdXRwdXQ7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG91dHB1dC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiY29udGVudFwiOlxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VmFsdWUgPSBvdXRwdXQudmFsdWUubWFwKChjb250ZW50UGFydCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY29udGVudFBhcnQudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBjb250ZW50UGFydC50ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlX2NvbnRyb2w6IHZvaWQgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1lZGlhXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRQYXJ0Lm1lZGlhVHlwZS5zdGFydHNXaXRoKFwiaW1hZ2UvXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaW1hZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJhc2U2NFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYV90eXBlOiBjb250ZW50UGFydC5tZWRpYVR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGNvbnRlbnRQYXJ0LmRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZV9jb250cm9sOiB2b2lkIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcjIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uYWxpdHk6IGBtZWRpYSB0eXBlOiAke2NvbnRlbnRQYXJ0Lm1lZGlhVHlwZX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJlcnJvci10ZXh0XCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRWYWx1ZSA9IG91dHB1dC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwianNvblwiOlxuICAgICAgICAgICAgICAgICAgY2FzZSBcImVycm9yLWpzb25cIjpcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KG91dHB1dC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhbnRocm9waWNDb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sX3Jlc3VsdFwiLFxuICAgICAgICAgICAgICAgICAgdG9vbF91c2VfaWQ6IHBhcnQudG9vbENhbGxJZCxcbiAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRWYWx1ZSxcbiAgICAgICAgICAgICAgICAgIGlzX2Vycm9yOiBvdXRwdXQudHlwZSA9PT0gXCJlcnJvci10ZXh0XCIgfHwgb3V0cHV0LnR5cGUgPT09IFwiZXJyb3ItanNvblwiID8gdHJ1ZSA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgIGNhY2hlX2NvbnRyb2w6IGNhY2hlQ29udHJvbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICBjb25zdCBfZXhoYXVzdGl2ZUNoZWNrID0gcm9sZTtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCByb2xlOiAke19leGhhdXN0aXZlQ2hlY2t9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2VzLnB1c2goeyByb2xlOiBcInVzZXJcIiwgY29udGVudDogYW50aHJvcGljQ29udGVudCB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiYXNzaXN0YW50XCI6IHtcbiAgICAgICAgY29uc3QgYW50aHJvcGljQ29udGVudCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJsb2NrLm1lc3NhZ2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGJsb2NrLm1lc3NhZ2VzW2pdO1xuICAgICAgICAgIGNvbnN0IGlzTGFzdE1lc3NhZ2UgPSBqID09PSBibG9jay5tZXNzYWdlcy5sZW5ndGggLSAxO1xuICAgICAgICAgIGNvbnN0IHsgY29udGVudCB9ID0gbWVzc2FnZTtcbiAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGNvbnRlbnQubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnQgPSBjb250ZW50W2tdO1xuICAgICAgICAgICAgY29uc3QgaXNMYXN0Q29udGVudFBhcnQgPSBrID09PSBjb250ZW50Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBjb25zdCBjYWNoZUNvbnRyb2wgPSAoX2UgPSBnZXRDYWNoZUNvbnRyb2wocGFydC5wcm92aWRlck9wdGlvbnMpKSAhPSBudWxsID8gX2UgOiBpc0xhc3RDb250ZW50UGFydCA/IGdldENhY2hlQ29udHJvbChtZXNzYWdlLnByb3ZpZGVyT3B0aW9ucykgOiB2b2lkIDA7XG4gICAgICAgICAgICBzd2l0Y2ggKHBhcnQudHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIFwidGV4dFwiOiB7XG4gICAgICAgICAgICAgICAgYW50aHJvcGljQ29udGVudC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgICAgdGV4dDogKFxuICAgICAgICAgICAgICAgICAgICAvLyB0cmltIHRoZSBsYXN0IHRleHQgcGFydCBpZiBpdCdzIHRoZSBsYXN0IG1lc3NhZ2UgaW4gdGhlIGJsb2NrXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgQW50aHJvcGljIGRvZXMgbm90IGFsbG93IHRyYWlsaW5nIHdoaXRlc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gcHJlLWZpbGxlZCBhc3Npc3RhbnQgcmVzcG9uc2VzXG4gICAgICAgICAgICAgICAgICAgIGlzTGFzdEJsb2NrICYmIGlzTGFzdE1lc3NhZ2UgJiYgaXNMYXN0Q29udGVudFBhcnQgPyBwYXJ0LnRleHQudHJpbSgpIDogcGFydC50ZXh0XG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgY2FjaGVfY29udHJvbDogY2FjaGVDb250cm9sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSBcInJlYXNvbmluZ1wiOiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbmRSZWFzb25pbmcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHJlYXNvbmluZ01ldGFkYXRhID0gYXdhaXQgcGFyc2VQcm92aWRlck9wdGlvbnMoe1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcjogXCJhbnRocm9waWNcIixcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJPcHRpb25zOiBwYXJ0LnByb3ZpZGVyT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgc2NoZW1hOiBhbnRocm9waWNSZWFzb25pbmdNZXRhZGF0YVNjaGVtYVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBpZiAocmVhc29uaW5nTWV0YWRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVhc29uaW5nTWV0YWRhdGEuc2lnbmF0dXJlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhbnRocm9waWNDb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0aGlua2luZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpbmtpbmc6IHBhcnQudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogcmVhc29uaW5nTWV0YWRhdGEuc2lnbmF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVfY29udHJvbDogY2FjaGVDb250cm9sXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVhc29uaW5nTWV0YWRhdGEucmVkYWN0ZWREYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhbnRocm9waWNDb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWRhY3RlZF90aGlua2luZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVhc29uaW5nTWV0YWRhdGEucmVkYWN0ZWREYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVfY29udHJvbDogY2FjaGVDb250cm9sXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm90aGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcInVuc3VwcG9ydGVkIHJlYXNvbmluZyBtZXRhZGF0YVwiXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwib3RoZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcInVuc3VwcG9ydGVkIHJlYXNvbmluZyBtZXRhZGF0YVwiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJvdGhlclwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcInNlbmRpbmcgcmVhc29uaW5nIGNvbnRlbnQgaXMgZGlzYWJsZWQgZm9yIHRoaXMgbW9kZWxcIlxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgXCJ0b29sLWNhbGxcIjoge1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0LnByb3ZpZGVyRXhlY3V0ZWQpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LnRvb2xOYW1lID09PSBcIndlYl9zZWFyY2hcIikge1xuICAgICAgICAgICAgICAgICAgICBhbnRocm9waWNDb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2VydmVyX3Rvb2xfdXNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaWQ6IHBhcnQudG9vbENhbGxJZCxcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIndlYl9zZWFyY2hcIixcbiAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogcGFydC5pbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICBjYWNoZV9jb250cm9sOiBjYWNoZUNvbnRyb2xcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHBhcnQudG9vbE5hbWUgPT09IFwiY29kZV9leGVjdXRpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBhbnRocm9waWNDb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2VydmVyX3Rvb2xfdXNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaWQ6IHBhcnQudG9vbENhbGxJZCxcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImNvZGVfZXhlY3V0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHBhcnQuaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICAgY2FjaGVfY29udHJvbDogY2FjaGVDb250cm9sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm90aGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBwcm92aWRlciBleGVjdXRlZCB0b29sIGNhbGwgZm9yIHRvb2wgJHtwYXJ0LnRvb2xOYW1lfSBpcyBub3Qgc3VwcG9ydGVkYFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYW50aHJvcGljQ29udGVudC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbF91c2VcIixcbiAgICAgICAgICAgICAgICAgIGlkOiBwYXJ0LnRvb2xDYWxsSWQsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBwYXJ0LnRvb2xOYW1lLFxuICAgICAgICAgICAgICAgICAgaW5wdXQ6IHBhcnQuaW5wdXQsXG4gICAgICAgICAgICAgICAgICBjYWNoZV9jb250cm9sOiBjYWNoZUNvbnRyb2xcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIFwidG9vbC1yZXN1bHRcIjoge1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0LnRvb2xOYW1lID09PSBcIndlYl9zZWFyY2hcIikge1xuICAgICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gcGFydC5vdXRwdXQ7XG4gICAgICAgICAgICAgICAgICBpZiAob3V0cHV0LnR5cGUgIT09IFwianNvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwib3RoZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgcHJvdmlkZXIgZXhlY3V0ZWQgdG9vbCByZXN1bHQgb3V0cHV0IHR5cGUgJHtvdXRwdXQudHlwZX0gZm9yIHRvb2wgJHtwYXJ0LnRvb2xOYW1lfSBpcyBub3Qgc3VwcG9ydGVkYFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjb25zdCB3ZWJTZWFyY2hPdXRwdXQgPSB3ZWJTZWFyY2hfMjAyNTAzMDVPdXRwdXRTY2hlbWEucGFyc2UoXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC52YWx1ZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGFudGhyb3BpY0NvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwid2ViX3NlYXJjaF90b29sX3Jlc3VsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0b29sX3VzZV9pZDogcGFydC50b29sQ2FsbElkLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB3ZWJTZWFyY2hPdXRwdXQubWFwKChyZXN1bHQpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgdXJsOiByZXN1bHQudXJsLFxuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiByZXN1bHQudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgcGFnZV9hZ2U6IHJlc3VsdC5wYWdlQWdlLFxuICAgICAgICAgICAgICAgICAgICAgIGVuY3J5cHRlZF9jb250ZW50OiByZXN1bHQuZW5jcnlwdGVkQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiByZXN1bHQudHlwZVxuICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlX2NvbnRyb2w6IGNhY2hlQ29udHJvbFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnQudG9vbE5hbWUgPT09IFwiY29kZV9leGVjdXRpb25cIikge1xuICAgICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gcGFydC5vdXRwdXQ7XG4gICAgICAgICAgICAgICAgICBpZiAob3V0cHV0LnR5cGUgIT09IFwianNvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwib3RoZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgcHJvdmlkZXIgZXhlY3V0ZWQgdG9vbCByZXN1bHQgb3V0cHV0IHR5cGUgJHtvdXRwdXQudHlwZX0gZm9yIHRvb2wgJHtwYXJ0LnRvb2xOYW1lfSBpcyBub3Qgc3VwcG9ydGVkYFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjb25zdCBjb2RlRXhlY3V0aW9uT3V0cHV0ID0gY29kZUV4ZWN1dGlvbl8yMDI1MDUyMk91dHB1dFNjaGVtYS5wYXJzZShvdXRwdXQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgYW50aHJvcGljQ29udGVudC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjb2RlX2V4ZWN1dGlvbl90b29sX3Jlc3VsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0b29sX3VzZV9pZDogcGFydC50b29sQ2FsbElkLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogY29kZUV4ZWN1dGlvbk91dHB1dC50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgIHN0ZG91dDogY29kZUV4ZWN1dGlvbk91dHB1dC5zdGRvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgc3RkZXJyOiBjb2RlRXhlY3V0aW9uT3V0cHV0LnN0ZGVycixcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm5fY29kZTogY29kZUV4ZWN1dGlvbk91dHB1dC5yZXR1cm5fY29kZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjYWNoZV9jb250cm9sOiBjYWNoZUNvbnRyb2xcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJvdGhlclwiLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYHByb3ZpZGVyIGV4ZWN1dGVkIHRvb2wgcmVzdWx0IGZvciB0b29sICR7cGFydC50b29sTmFtZX0gaXMgbm90IHN1cHBvcnRlZGBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlcy5wdXNoKHsgcm9sZTogXCJhc3Npc3RhbnRcIiwgY29udGVudDogYW50aHJvcGljQ29udGVudCB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGNvbnN0IF9leGhhdXN0aXZlQ2hlY2sgPSB0eXBlO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbnRlbnQgdHlwZTogJHtfZXhoYXVzdGl2ZUNoZWNrfWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHByb21wdDogeyBzeXN0ZW0sIG1lc3NhZ2VzIH0sXG4gICAgYmV0YXNcbiAgfTtcbn1cbmZ1bmN0aW9uIGdyb3VwSW50b0Jsb2Nrcyhwcm9tcHQpIHtcbiAgY29uc3QgYmxvY2tzID0gW107XG4gIGxldCBjdXJyZW50QmxvY2sgPSB2b2lkIDA7XG4gIGZvciAoY29uc3QgbWVzc2FnZSBvZiBwcm9tcHQpIHtcbiAgICBjb25zdCB7IHJvbGUgfSA9IG1lc3NhZ2U7XG4gICAgc3dpdGNoIChyb2xlKSB7XG4gICAgICBjYXNlIFwic3lzdGVtXCI6IHtcbiAgICAgICAgaWYgKChjdXJyZW50QmxvY2sgPT0gbnVsbCA/IHZvaWQgMCA6IGN1cnJlbnRCbG9jay50eXBlKSAhPT0gXCJzeXN0ZW1cIikge1xuICAgICAgICAgIGN1cnJlbnRCbG9jayA9IHsgdHlwZTogXCJzeXN0ZW1cIiwgbWVzc2FnZXM6IFtdIH07XG4gICAgICAgICAgYmxvY2tzLnB1c2goY3VycmVudEJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50QmxvY2subWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiYXNzaXN0YW50XCI6IHtcbiAgICAgICAgaWYgKChjdXJyZW50QmxvY2sgPT0gbnVsbCA/IHZvaWQgMCA6IGN1cnJlbnRCbG9jay50eXBlKSAhPT0gXCJhc3Npc3RhbnRcIikge1xuICAgICAgICAgIGN1cnJlbnRCbG9jayA9IHsgdHlwZTogXCJhc3Npc3RhbnRcIiwgbWVzc2FnZXM6IFtdIH07XG4gICAgICAgICAgYmxvY2tzLnB1c2goY3VycmVudEJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50QmxvY2subWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwidXNlclwiOiB7XG4gICAgICAgIGlmICgoY3VycmVudEJsb2NrID09IG51bGwgPyB2b2lkIDAgOiBjdXJyZW50QmxvY2sudHlwZSkgIT09IFwidXNlclwiKSB7XG4gICAgICAgICAgY3VycmVudEJsb2NrID0geyB0eXBlOiBcInVzZXJcIiwgbWVzc2FnZXM6IFtdIH07XG4gICAgICAgICAgYmxvY2tzLnB1c2goY3VycmVudEJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50QmxvY2subWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwidG9vbFwiOiB7XG4gICAgICAgIGlmICgoY3VycmVudEJsb2NrID09IG51bGwgPyB2b2lkIDAgOiBjdXJyZW50QmxvY2sudHlwZSkgIT09IFwidXNlclwiKSB7XG4gICAgICAgICAgY3VycmVudEJsb2NrID0geyB0eXBlOiBcInVzZXJcIiwgbWVzc2FnZXM6IFtdIH07XG4gICAgICAgICAgYmxvY2tzLnB1c2goY3VycmVudEJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50QmxvY2subWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGNvbnN0IF9leGhhdXN0aXZlQ2hlY2sgPSByb2xlO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHJvbGU6ICR7X2V4aGF1c3RpdmVDaGVja31gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJsb2Nrcztcbn1cblxuLy8gc3JjL21hcC1hbnRocm9waWMtc3RvcC1yZWFzb24udHNcbmZ1bmN0aW9uIG1hcEFudGhyb3BpY1N0b3BSZWFzb24oe1xuICBmaW5pc2hSZWFzb24sXG4gIGlzSnNvblJlc3BvbnNlRnJvbVRvb2xcbn0pIHtcbiAgc3dpdGNoIChmaW5pc2hSZWFzb24pIHtcbiAgICBjYXNlIFwicGF1c2VfdHVyblwiOlxuICAgIGNhc2UgXCJlbmRfdHVyblwiOlxuICAgIGNhc2UgXCJzdG9wX3NlcXVlbmNlXCI6XG4gICAgICByZXR1cm4gXCJzdG9wXCI7XG4gICAgY2FzZSBcInJlZnVzYWxcIjpcbiAgICAgIHJldHVybiBcImNvbnRlbnQtZmlsdGVyXCI7XG4gICAgY2FzZSBcInRvb2xfdXNlXCI6XG4gICAgICByZXR1cm4gaXNKc29uUmVzcG9uc2VGcm9tVG9vbCA/IFwic3RvcFwiIDogXCJ0b29sLWNhbGxzXCI7XG4gICAgY2FzZSBcIm1heF90b2tlbnNcIjpcbiAgICAgIHJldHVybiBcImxlbmd0aFwiO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJ1bmtub3duXCI7XG4gIH1cbn1cblxuLy8gc3JjL2FudGhyb3BpYy1tZXNzYWdlcy1sYW5ndWFnZS1tb2RlbC50c1xudmFyIGNpdGF0aW9uU2NoZW1hcyA9IHtcbiAgd2ViU2VhcmNoUmVzdWx0OiB6NS5vYmplY3Qoe1xuICAgIHR5cGU6IHo1LmxpdGVyYWwoXCJ3ZWJfc2VhcmNoX3Jlc3VsdF9sb2NhdGlvblwiKSxcbiAgICBjaXRlZF90ZXh0OiB6NS5zdHJpbmcoKSxcbiAgICB1cmw6IHo1LnN0cmluZygpLFxuICAgIHRpdGxlOiB6NS5zdHJpbmcoKSxcbiAgICBlbmNyeXB0ZWRfaW5kZXg6IHo1LnN0cmluZygpXG4gIH0pLFxuICBwYWdlTG9jYXRpb246IHo1Lm9iamVjdCh7XG4gICAgdHlwZTogejUubGl0ZXJhbChcInBhZ2VfbG9jYXRpb25cIiksXG4gICAgY2l0ZWRfdGV4dDogejUuc3RyaW5nKCksXG4gICAgZG9jdW1lbnRfaW5kZXg6IHo1Lm51bWJlcigpLFxuICAgIGRvY3VtZW50X3RpdGxlOiB6NS5zdHJpbmcoKS5udWxsYWJsZSgpLFxuICAgIHN0YXJ0X3BhZ2VfbnVtYmVyOiB6NS5udW1iZXIoKSxcbiAgICBlbmRfcGFnZV9udW1iZXI6IHo1Lm51bWJlcigpXG4gIH0pLFxuICBjaGFyTG9jYXRpb246IHo1Lm9iamVjdCh7XG4gICAgdHlwZTogejUubGl0ZXJhbChcImNoYXJfbG9jYXRpb25cIiksXG4gICAgY2l0ZWRfdGV4dDogejUuc3RyaW5nKCksXG4gICAgZG9jdW1lbnRfaW5kZXg6IHo1Lm51bWJlcigpLFxuICAgIGRvY3VtZW50X3RpdGxlOiB6NS5zdHJpbmcoKS5udWxsYWJsZSgpLFxuICAgIHN0YXJ0X2NoYXJfaW5kZXg6IHo1Lm51bWJlcigpLFxuICAgIGVuZF9jaGFyX2luZGV4OiB6NS5udW1iZXIoKVxuICB9KVxufTtcbnZhciBjaXRhdGlvblNjaGVtYSA9IHo1LmRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICBjaXRhdGlvblNjaGVtYXMud2ViU2VhcmNoUmVzdWx0LFxuICBjaXRhdGlvblNjaGVtYXMucGFnZUxvY2F0aW9uLFxuICBjaXRhdGlvblNjaGVtYXMuY2hhckxvY2F0aW9uXG5dKTtcbnZhciBkb2N1bWVudENpdGF0aW9uU2NoZW1hID0gejUuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gIGNpdGF0aW9uU2NoZW1hcy5wYWdlTG9jYXRpb24sXG4gIGNpdGF0aW9uU2NoZW1hcy5jaGFyTG9jYXRpb25cbl0pO1xuZnVuY3Rpb24gcHJvY2Vzc0NpdGF0aW9uKGNpdGF0aW9uLCBjaXRhdGlvbkRvY3VtZW50cywgZ2VuZXJhdGVJZDIsIG9uU291cmNlKSB7XG4gIGlmIChjaXRhdGlvbi50eXBlID09PSBcInBhZ2VfbG9jYXRpb25cIiB8fCBjaXRhdGlvbi50eXBlID09PSBcImNoYXJfbG9jYXRpb25cIikge1xuICAgIGNvbnN0IHNvdXJjZSA9IGNyZWF0ZUNpdGF0aW9uU291cmNlKFxuICAgICAgY2l0YXRpb24sXG4gICAgICBjaXRhdGlvbkRvY3VtZW50cyxcbiAgICAgIGdlbmVyYXRlSWQyXG4gICAgKTtcbiAgICBpZiAoc291cmNlKSB7XG4gICAgICBvblNvdXJjZShzb3VyY2UpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlQ2l0YXRpb25Tb3VyY2UoY2l0YXRpb24sIGNpdGF0aW9uRG9jdW1lbnRzLCBnZW5lcmF0ZUlkMikge1xuICB2YXIgX2E7XG4gIGNvbnN0IGRvY3VtZW50SW5mbyA9IGNpdGF0aW9uRG9jdW1lbnRzW2NpdGF0aW9uLmRvY3VtZW50X2luZGV4XTtcbiAgaWYgKCFkb2N1bWVudEluZm8pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBwcm92aWRlck1ldGFkYXRhID0gY2l0YXRpb24udHlwZSA9PT0gXCJwYWdlX2xvY2F0aW9uXCIgPyB7XG4gICAgY2l0ZWRUZXh0OiBjaXRhdGlvbi5jaXRlZF90ZXh0LFxuICAgIHN0YXJ0UGFnZU51bWJlcjogY2l0YXRpb24uc3RhcnRfcGFnZV9udW1iZXIsXG4gICAgZW5kUGFnZU51bWJlcjogY2l0YXRpb24uZW5kX3BhZ2VfbnVtYmVyXG4gIH0gOiB7XG4gICAgY2l0ZWRUZXh0OiBjaXRhdGlvbi5jaXRlZF90ZXh0LFxuICAgIHN0YXJ0Q2hhckluZGV4OiBjaXRhdGlvbi5zdGFydF9jaGFyX2luZGV4LFxuICAgIGVuZENoYXJJbmRleDogY2l0YXRpb24uZW5kX2NoYXJfaW5kZXhcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcInNvdXJjZVwiLFxuICAgIHNvdXJjZVR5cGU6IFwiZG9jdW1lbnRcIixcbiAgICBpZDogZ2VuZXJhdGVJZDIoKSxcbiAgICBtZWRpYVR5cGU6IGRvY3VtZW50SW5mby5tZWRpYVR5cGUsXG4gICAgdGl0bGU6IChfYSA9IGNpdGF0aW9uLmRvY3VtZW50X3RpdGxlKSAhPSBudWxsID8gX2EgOiBkb2N1bWVudEluZm8udGl0bGUsXG4gICAgZmlsZW5hbWU6IGRvY3VtZW50SW5mby5maWxlbmFtZSxcbiAgICBwcm92aWRlck1ldGFkYXRhOiB7XG4gICAgICBhbnRocm9waWM6IHByb3ZpZGVyTWV0YWRhdGFcbiAgICB9XG4gIH07XG59XG52YXIgQW50aHJvcGljTWVzc2FnZXNMYW5ndWFnZU1vZGVsID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihtb2RlbElkLCBjb25maWcpIHtcbiAgICB0aGlzLnNwZWNpZmljYXRpb25WZXJzaW9uID0gXCJ2MlwiO1xuICAgIHZhciBfYTtcbiAgICB0aGlzLm1vZGVsSWQgPSBtb2RlbElkO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuZ2VuZXJhdGVJZCA9IChfYSA9IGNvbmZpZy5nZW5lcmF0ZUlkKSAhPSBudWxsID8gX2EgOiBnZW5lcmF0ZUlkO1xuICB9XG4gIHN1cHBvcnRzVXJsKHVybCkge1xuICAgIHJldHVybiB1cmwucHJvdG9jb2wgPT09IFwiaHR0cHM6XCI7XG4gIH1cbiAgZ2V0IHByb3ZpZGVyKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5wcm92aWRlcjtcbiAgfVxuICBnZXQgc3VwcG9ydGVkVXJscygpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICByZXR1cm4gKF9jID0gKF9iID0gKF9hID0gdGhpcy5jb25maWcpLnN1cHBvcnRlZFVybHMpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKSkgIT0gbnVsbCA/IF9jIDoge307XG4gIH1cbiAgYXN5bmMgZ2V0QXJncyh7XG4gICAgcHJvbXB0LFxuICAgIG1heE91dHB1dFRva2VucyA9IDQwOTYsXG4gICAgLy8gNDA5NjogbWF4IG1vZGVsIG91dHB1dCB0b2tlbnMgVE9ETyB1cGRhdGUgZGVmYXVsdCBpbiB2NVxuICAgIHRlbXBlcmF0dXJlLFxuICAgIHRvcFAsXG4gICAgdG9wSyxcbiAgICBmcmVxdWVuY3lQZW5hbHR5LFxuICAgIHByZXNlbmNlUGVuYWx0eSxcbiAgICBzdG9wU2VxdWVuY2VzLFxuICAgIHJlc3BvbnNlRm9ybWF0LFxuICAgIHNlZWQsXG4gICAgdG9vbHMsXG4gICAgdG9vbENob2ljZSxcbiAgICBwcm92aWRlck9wdGlvbnNcbiAgfSkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGNvbnN0IHdhcm5pbmdzID0gW107XG4gICAgaWYgKGZyZXF1ZW5jeVBlbmFsdHkgIT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcImZyZXF1ZW5jeVBlbmFsdHlcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChwcmVzZW5jZVBlbmFsdHkgIT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcInByZXNlbmNlUGVuYWx0eVwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHNlZWQgIT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcInNlZWRcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICgocmVzcG9uc2VGb3JtYXQgPT0gbnVsbCA/IHZvaWQgMCA6IHJlc3BvbnNlRm9ybWF0LnR5cGUpID09PSBcImpzb25cIikge1xuICAgICAgaWYgKHJlc3BvbnNlRm9ybWF0LnNjaGVtYSA9PSBudWxsKSB7XG4gICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICAgIHNldHRpbmc6IFwicmVzcG9uc2VGb3JtYXRcIixcbiAgICAgICAgICBkZXRhaWxzOiBcIkpTT04gcmVzcG9uc2UgZm9ybWF0IHJlcXVpcmVzIGEgc2NoZW1hLiBUaGUgcmVzcG9uc2UgZm9ybWF0IGlzIGlnbm9yZWQuXCJcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRvb2xzICE9IG51bGwpIHtcbiAgICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsXG4gICAgICAgICAgc2V0dGluZzogXCJ0b29sc1wiLFxuICAgICAgICAgIGRldGFpbHM6IFwiSlNPTiByZXNwb25zZSBmb3JtYXQgZG9lcyBub3Qgc3VwcG9ydCB0b29scy4gVGhlIHByb3ZpZGVkIHRvb2xzIGFyZSBpZ25vcmVkLlwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBqc29uUmVzcG9uc2VUb29sID0gKHJlc3BvbnNlRm9ybWF0ID09IG51bGwgPyB2b2lkIDAgOiByZXNwb25zZUZvcm1hdC50eXBlKSA9PT0gXCJqc29uXCIgJiYgcmVzcG9uc2VGb3JtYXQuc2NoZW1hICE9IG51bGwgPyB7XG4gICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgICBuYW1lOiBcImpzb25cIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlJlc3BvbmQgd2l0aCBhIEpTT04gb2JqZWN0LlwiLFxuICAgICAgaW5wdXRTY2hlbWE6IHJlc3BvbnNlRm9ybWF0LnNjaGVtYVxuICAgIH0gOiB2b2lkIDA7XG4gICAgY29uc3QgYW50aHJvcGljT3B0aW9ucyA9IGF3YWl0IHBhcnNlUHJvdmlkZXJPcHRpb25zMih7XG4gICAgICBwcm92aWRlcjogXCJhbnRocm9waWNcIixcbiAgICAgIHByb3ZpZGVyT3B0aW9ucyxcbiAgICAgIHNjaGVtYTogYW50aHJvcGljUHJvdmlkZXJPcHRpb25zXG4gICAgfSk7XG4gICAgY29uc3QgeyBwcm9tcHQ6IG1lc3NhZ2VzUHJvbXB0LCBiZXRhczogbWVzc2FnZXNCZXRhcyB9ID0gYXdhaXQgY29udmVydFRvQW50aHJvcGljTWVzc2FnZXNQcm9tcHQoe1xuICAgICAgcHJvbXB0LFxuICAgICAgc2VuZFJlYXNvbmluZzogKF9hID0gYW50aHJvcGljT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogYW50aHJvcGljT3B0aW9ucy5zZW5kUmVhc29uaW5nKSAhPSBudWxsID8gX2EgOiB0cnVlLFxuICAgICAgd2FybmluZ3NcbiAgICB9KTtcbiAgICBjb25zdCBpc1RoaW5raW5nID0gKChfYiA9IGFudGhyb3BpY09wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IGFudGhyb3BpY09wdGlvbnMudGhpbmtpbmcpID09IG51bGwgPyB2b2lkIDAgOiBfYi50eXBlKSA9PT0gXCJlbmFibGVkXCI7XG4gICAgY29uc3QgdGhpbmtpbmdCdWRnZXQgPSAoX2MgPSBhbnRocm9waWNPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBhbnRocm9waWNPcHRpb25zLnRoaW5raW5nKSA9PSBudWxsID8gdm9pZCAwIDogX2MuYnVkZ2V0VG9rZW5zO1xuICAgIGNvbnN0IGJhc2VBcmdzID0ge1xuICAgICAgLy8gbW9kZWwgaWQ6XG4gICAgICBtb2RlbDogdGhpcy5tb2RlbElkLFxuICAgICAgLy8gc3RhbmRhcmRpemVkIHNldHRpbmdzOlxuICAgICAgbWF4X3Rva2VuczogbWF4T3V0cHV0VG9rZW5zLFxuICAgICAgdGVtcGVyYXR1cmUsXG4gICAgICB0b3BfazogdG9wSyxcbiAgICAgIHRvcF9wOiB0b3BQLFxuICAgICAgc3RvcF9zZXF1ZW5jZXM6IHN0b3BTZXF1ZW5jZXMsXG4gICAgICAvLyBwcm92aWRlciBzcGVjaWZpYyBzZXR0aW5nczpcbiAgICAgIC4uLmlzVGhpbmtpbmcgJiYge1xuICAgICAgICB0aGlua2luZzogeyB0eXBlOiBcImVuYWJsZWRcIiwgYnVkZ2V0X3Rva2VuczogdGhpbmtpbmdCdWRnZXQgfVxuICAgICAgfSxcbiAgICAgIC8vIHByb21wdDpcbiAgICAgIHN5c3RlbTogbWVzc2FnZXNQcm9tcHQuc3lzdGVtLFxuICAgICAgbWVzc2FnZXM6IG1lc3NhZ2VzUHJvbXB0Lm1lc3NhZ2VzXG4gICAgfTtcbiAgICBpZiAoaXNUaGlua2luZykge1xuICAgICAgaWYgKHRoaW5raW5nQnVkZ2V0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkRnVuY3Rpb25hbGl0eUVycm9yMyh7XG4gICAgICAgICAgZnVuY3Rpb25hbGl0eTogXCJ0aGlua2luZyByZXF1aXJlcyBhIGJ1ZGdldFwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGJhc2VBcmdzLnRlbXBlcmF0dXJlICE9IG51bGwpIHtcbiAgICAgICAgYmFzZUFyZ3MudGVtcGVyYXR1cmUgPSB2b2lkIDA7XG4gICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICAgIHNldHRpbmc6IFwidGVtcGVyYXR1cmVcIixcbiAgICAgICAgICBkZXRhaWxzOiBcInRlbXBlcmF0dXJlIGlzIG5vdCBzdXBwb3J0ZWQgd2hlbiB0aGlua2luZyBpcyBlbmFibGVkXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAodG9wSyAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VBcmdzLnRvcF9rID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcInRvcEtcIixcbiAgICAgICAgICBkZXRhaWxzOiBcInRvcEsgaXMgbm90IHN1cHBvcnRlZCB3aGVuIHRoaW5raW5nIGlzIGVuYWJsZWRcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh0b3BQICE9IG51bGwpIHtcbiAgICAgICAgYmFzZUFyZ3MudG9wX3AgPSB2b2lkIDA7XG4gICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICAgIHNldHRpbmc6IFwidG9wUFwiLFxuICAgICAgICAgIGRldGFpbHM6IFwidG9wUCBpcyBub3Qgc3VwcG9ydGVkIHdoZW4gdGhpbmtpbmcgaXMgZW5hYmxlZFwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYmFzZUFyZ3MubWF4X3Rva2VucyA9IG1heE91dHB1dFRva2VucyArIHRoaW5raW5nQnVkZ2V0O1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICB0b29sczogYW50aHJvcGljVG9vbHMyLFxuICAgICAgdG9vbENob2ljZTogYW50aHJvcGljVG9vbENob2ljZSxcbiAgICAgIHRvb2xXYXJuaW5ncyxcbiAgICAgIGJldGFzOiB0b29sc0JldGFzXG4gICAgfSA9IHByZXBhcmVUb29scyhcbiAgICAgIGpzb25SZXNwb25zZVRvb2wgIT0gbnVsbCA/IHtcbiAgICAgICAgdG9vbHM6IFtqc29uUmVzcG9uc2VUb29sXSxcbiAgICAgICAgdG9vbENob2ljZTogeyB0eXBlOiBcInRvb2xcIiwgdG9vbE5hbWU6IGpzb25SZXNwb25zZVRvb2wubmFtZSB9LFxuICAgICAgICBkaXNhYmxlUGFyYWxsZWxUb29sVXNlOiB0cnVlXG4gICAgICB9IDoge1xuICAgICAgICB0b29sczogdG9vbHMgIT0gbnVsbCA/IHRvb2xzIDogW10sXG4gICAgICAgIHRvb2xDaG9pY2UsXG4gICAgICAgIGRpc2FibGVQYXJhbGxlbFRvb2xVc2U6IGFudGhyb3BpY09wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IGFudGhyb3BpY09wdGlvbnMuZGlzYWJsZVBhcmFsbGVsVG9vbFVzZVxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgLi4uYmFzZUFyZ3MsXG4gICAgICAgIHRvb2xzOiBhbnRocm9waWNUb29sczIsXG4gICAgICAgIHRvb2xfY2hvaWNlOiBhbnRocm9waWNUb29sQ2hvaWNlXG4gICAgICB9LFxuICAgICAgd2FybmluZ3M6IFsuLi53YXJuaW5ncywgLi4udG9vbFdhcm5pbmdzXSxcbiAgICAgIGJldGFzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbLi4ubWVzc2FnZXNCZXRhcywgLi4udG9vbHNCZXRhc10pLFxuICAgICAgdXNlc0pzb25SZXNwb25zZVRvb2w6IGpzb25SZXNwb25zZVRvb2wgIT0gbnVsbFxuICAgIH07XG4gIH1cbiAgYXN5bmMgZ2V0SGVhZGVycyh7XG4gICAgYmV0YXMsXG4gICAgaGVhZGVyc1xuICB9KSB7XG4gICAgcmV0dXJuIGNvbWJpbmVIZWFkZXJzKFxuICAgICAgYXdhaXQgcmVzb2x2ZSh0aGlzLmNvbmZpZy5oZWFkZXJzKSxcbiAgICAgIGJldGFzLnNpemUgPiAwID8geyBcImFudGhyb3BpYy1iZXRhXCI6IEFycmF5LmZyb20oYmV0YXMpLmpvaW4oXCIsXCIpIH0gOiB7fSxcbiAgICAgIGhlYWRlcnNcbiAgICApO1xuICB9XG4gIGJ1aWxkUmVxdWVzdFVybChpc1N0cmVhbWluZykge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHJldHVybiAoX2MgPSAoX2IgPSAoX2EgPSB0aGlzLmNvbmZpZykuYnVpbGRSZXF1ZXN0VXJsKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdGhpcy5jb25maWcuYmFzZVVSTCwgaXNTdHJlYW1pbmcpKSAhPSBudWxsID8gX2MgOiBgJHt0aGlzLmNvbmZpZy5iYXNlVVJMfS9tZXNzYWdlc2A7XG4gIH1cbiAgdHJhbnNmb3JtUmVxdWVzdEJvZHkoYXJncykge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHJldHVybiAoX2MgPSAoX2IgPSAoX2EgPSB0aGlzLmNvbmZpZykudHJhbnNmb3JtUmVxdWVzdEJvZHkpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBhcmdzKSkgIT0gbnVsbCA/IF9jIDogYXJncztcbiAgfVxuICBleHRyYWN0Q2l0YXRpb25Eb2N1bWVudHMocHJvbXB0KSB7XG4gICAgY29uc3QgaXNDaXRhdGlvblBhcnQgPSAocGFydCkgPT4ge1xuICAgICAgdmFyIF9hLCBfYjtcbiAgICAgIGlmIChwYXJ0LnR5cGUgIT09IFwiZmlsZVwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJ0Lm1lZGlhVHlwZSAhPT0gXCJhcHBsaWNhdGlvbi9wZGZcIiAmJiBwYXJ0Lm1lZGlhVHlwZSAhPT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgYW50aHJvcGljID0gKF9hID0gcGFydC5wcm92aWRlck9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5hbnRocm9waWM7XG4gICAgICBjb25zdCBjaXRhdGlvbnNDb25maWcgPSBhbnRocm9waWMgPT0gbnVsbCA/IHZvaWQgMCA6IGFudGhyb3BpYy5jaXRhdGlvbnM7XG4gICAgICByZXR1cm4gKF9iID0gY2l0YXRpb25zQ29uZmlnID09IG51bGwgPyB2b2lkIDAgOiBjaXRhdGlvbnNDb25maWcuZW5hYmxlZCkgIT0gbnVsbCA/IF9iIDogZmFsc2U7XG4gICAgfTtcbiAgICByZXR1cm4gcHJvbXB0LmZpbHRlcigobWVzc2FnZSkgPT4gbWVzc2FnZS5yb2xlID09PSBcInVzZXJcIikuZmxhdE1hcCgobWVzc2FnZSkgPT4gbWVzc2FnZS5jb250ZW50KS5maWx0ZXIoaXNDaXRhdGlvblBhcnQpLm1hcCgocGFydCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgY29uc3QgZmlsZVBhcnQgPSBwYXJ0O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IChfYSA9IGZpbGVQYXJ0LmZpbGVuYW1lKSAhPSBudWxsID8gX2EgOiBcIlVudGl0bGVkIERvY3VtZW50XCIsXG4gICAgICAgIGZpbGVuYW1lOiBmaWxlUGFydC5maWxlbmFtZSxcbiAgICAgICAgbWVkaWFUeXBlOiBmaWxlUGFydC5tZWRpYVR5cGVcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZG9HZW5lcmF0ZShvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICBjb25zdCB7IGFyZ3MsIHdhcm5pbmdzLCBiZXRhcywgdXNlc0pzb25SZXNwb25zZVRvb2wgfSA9IGF3YWl0IHRoaXMuZ2V0QXJncyhvcHRpb25zKTtcbiAgICBjb25zdCBjaXRhdGlvbkRvY3VtZW50cyA9IHRoaXMuZXh0cmFjdENpdGF0aW9uRG9jdW1lbnRzKG9wdGlvbnMucHJvbXB0KTtcbiAgICBjb25zdCB7XG4gICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICB2YWx1ZTogcmVzcG9uc2UsXG4gICAgICByYXdWYWx1ZTogcmF3UmVzcG9uc2VcbiAgICB9ID0gYXdhaXQgcG9zdEpzb25Ub0FwaSh7XG4gICAgICB1cmw6IHRoaXMuYnVpbGRSZXF1ZXN0VXJsKGZhbHNlKSxcbiAgICAgIGhlYWRlcnM6IGF3YWl0IHRoaXMuZ2V0SGVhZGVycyh7IGJldGFzLCBoZWFkZXJzOiBvcHRpb25zLmhlYWRlcnMgfSksXG4gICAgICBib2R5OiB0aGlzLnRyYW5zZm9ybVJlcXVlc3RCb2R5KGFyZ3MpLFxuICAgICAgZmFpbGVkUmVzcG9uc2VIYW5kbGVyOiBhbnRocm9waWNGYWlsZWRSZXNwb25zZUhhbmRsZXIsXG4gICAgICBzdWNjZXNzZnVsUmVzcG9uc2VIYW5kbGVyOiBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyKFxuICAgICAgICBhbnRocm9waWNNZXNzYWdlc1Jlc3BvbnNlU2NoZW1hXG4gICAgICApLFxuICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICBmZXRjaDogdGhpcy5jb25maWcuZmV0Y2hcbiAgICB9KTtcbiAgICBjb25zdCBjb250ZW50ID0gW107XG4gICAgZm9yIChjb25zdCBwYXJ0IG9mIHJlc3BvbnNlLmNvbnRlbnQpIHtcbiAgICAgIHN3aXRjaCAocGFydC50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJ0ZXh0XCI6IHtcbiAgICAgICAgICBpZiAoIXVzZXNKc29uUmVzcG9uc2VUb29sKSB7XG4gICAgICAgICAgICBjb250ZW50LnB1c2goeyB0eXBlOiBcInRleHRcIiwgdGV4dDogcGFydC50ZXh0IH0pO1xuICAgICAgICAgICAgaWYgKHBhcnQuY2l0YXRpb25zKSB7XG4gICAgICAgICAgICAgIGZvciAoY29uc3QgY2l0YXRpb24gb2YgcGFydC5jaXRhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzQ2l0YXRpb24oXG4gICAgICAgICAgICAgICAgICBjaXRhdGlvbixcbiAgICAgICAgICAgICAgICAgIGNpdGF0aW9uRG9jdW1lbnRzLFxuICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUlkLFxuICAgICAgICAgICAgICAgICAgKHNvdXJjZSkgPT4gY29udGVudC5wdXNoKHNvdXJjZSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ0aGlua2luZ1wiOiB7XG4gICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwicmVhc29uaW5nXCIsXG4gICAgICAgICAgICB0ZXh0OiBwYXJ0LnRoaW5raW5nLFxuICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YToge1xuICAgICAgICAgICAgICBhbnRocm9waWM6IHtcbiAgICAgICAgICAgICAgICBzaWduYXR1cmU6IHBhcnQuc2lnbmF0dXJlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwicmVkYWN0ZWRfdGhpbmtpbmdcIjoge1xuICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBcInJlYXNvbmluZ1wiLFxuICAgICAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgYW50aHJvcGljOiB7XG4gICAgICAgICAgICAgICAgcmVkYWN0ZWREYXRhOiBwYXJ0LmRhdGFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ0b29sX3VzZVwiOiB7XG4gICAgICAgICAgY29udGVudC5wdXNoKFxuICAgICAgICAgICAgLy8gd2hlbiBhIGpzb24gcmVzcG9uc2UgdG9vbCBpcyB1c2VkLCB0aGUgdG9vbCBjYWxsIGJlY29tZXMgdGhlIHRleHQ6XG4gICAgICAgICAgICB1c2VzSnNvblJlc3BvbnNlVG9vbCA/IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgIHRleHQ6IEpTT04uc3RyaW5naWZ5KHBhcnQuaW5wdXQpXG4gICAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtY2FsbFwiLFxuICAgICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LmlkLFxuICAgICAgICAgICAgICB0b29sTmFtZTogcGFydC5uYW1lLFxuICAgICAgICAgICAgICBpbnB1dDogSlNPTi5zdHJpbmdpZnkocGFydC5pbnB1dClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJzZXJ2ZXJfdG9vbF91c2VcIjoge1xuICAgICAgICAgIGlmIChwYXJ0Lm5hbWUgPT09IFwid2ViX3NlYXJjaFwiIHx8IHBhcnQubmFtZSA9PT0gXCJjb2RlX2V4ZWN1dGlvblwiKSB7XG4gICAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtY2FsbFwiLFxuICAgICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LmlkLFxuICAgICAgICAgICAgICB0b29sTmFtZTogcGFydC5uYW1lLFxuICAgICAgICAgICAgICBpbnB1dDogSlNPTi5zdHJpbmdpZnkocGFydC5pbnB1dCksXG4gICAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwid2ViX3NlYXJjaF90b29sX3Jlc3VsdFwiOiB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFydC5jb250ZW50KSkge1xuICAgICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLXJlc3VsdFwiLFxuICAgICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LnRvb2xfdXNlX2lkLFxuICAgICAgICAgICAgICB0b29sTmFtZTogXCJ3ZWJfc2VhcmNoXCIsXG4gICAgICAgICAgICAgIHJlc3VsdDogcGFydC5jb250ZW50Lm1hcCgocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hMjtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgdXJsOiByZXN1bHQudXJsLFxuICAgICAgICAgICAgICAgICAgdGl0bGU6IHJlc3VsdC50aXRsZSxcbiAgICAgICAgICAgICAgICAgIHBhZ2VBZ2U6IChfYTIgPSByZXN1bHQucGFnZV9hZ2UpICE9IG51bGwgPyBfYTIgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkQ29udGVudDogcmVzdWx0LmVuY3J5cHRlZF9jb250ZW50LFxuICAgICAgICAgICAgICAgICAgdHlwZTogcmVzdWx0LnR5cGVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiBwYXJ0LmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNvdXJjZVwiLFxuICAgICAgICAgICAgICAgIHNvdXJjZVR5cGU6IFwidXJsXCIsXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuZ2VuZXJhdGVJZCgpLFxuICAgICAgICAgICAgICAgIHVybDogcmVzdWx0LnVybCxcbiAgICAgICAgICAgICAgICB0aXRsZTogcmVzdWx0LnRpdGxlLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgIGFudGhyb3BpYzoge1xuICAgICAgICAgICAgICAgICAgICBwYWdlQWdlOiAoX2EgPSByZXN1bHQucGFnZV9hZ2UpICE9IG51bGwgPyBfYSA6IG51bGxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtcmVzdWx0XCIsXG4gICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHBhcnQudG9vbF91c2VfaWQsXG4gICAgICAgICAgICAgIHRvb2xOYW1lOiBcIndlYl9zZWFyY2hcIixcbiAgICAgICAgICAgICAgaXNFcnJvcjogdHJ1ZSxcbiAgICAgICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJ3ZWJfc2VhcmNoX3Rvb2xfcmVzdWx0X2Vycm9yXCIsXG4gICAgICAgICAgICAgICAgZXJyb3JDb2RlOiBwYXJ0LmNvbnRlbnQuZXJyb3JfY29kZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImNvZGVfZXhlY3V0aW9uX3Rvb2xfcmVzdWx0XCI6IHtcbiAgICAgICAgICBpZiAocGFydC5jb250ZW50LnR5cGUgPT09IFwiY29kZV9leGVjdXRpb25fcmVzdWx0XCIpIHtcbiAgICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1yZXN1bHRcIixcbiAgICAgICAgICAgICAgdG9vbENhbGxJZDogcGFydC50b29sX3VzZV9pZCxcbiAgICAgICAgICAgICAgdG9vbE5hbWU6IFwiY29kZV9leGVjdXRpb25cIixcbiAgICAgICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogcGFydC5jb250ZW50LnR5cGUsXG4gICAgICAgICAgICAgICAgc3Rkb3V0OiBwYXJ0LmNvbnRlbnQuc3Rkb3V0LFxuICAgICAgICAgICAgICAgIHN0ZGVycjogcGFydC5jb250ZW50LnN0ZGVycixcbiAgICAgICAgICAgICAgICByZXR1cm5fY29kZTogcGFydC5jb250ZW50LnJldHVybl9jb2RlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGFydC5jb250ZW50LnR5cGUgPT09IFwiY29kZV9leGVjdXRpb25fdG9vbF9yZXN1bHRfZXJyb3JcIikge1xuICAgICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLXJlc3VsdFwiLFxuICAgICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LnRvb2xfdXNlX2lkLFxuICAgICAgICAgICAgICB0b29sTmFtZTogXCJjb2RlX2V4ZWN1dGlvblwiLFxuICAgICAgICAgICAgICBpc0Vycm9yOiB0cnVlLFxuICAgICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNvZGVfZXhlY3V0aW9uX3Rvb2xfcmVzdWx0X2Vycm9yXCIsXG4gICAgICAgICAgICAgICAgZXJyb3JDb2RlOiBwYXJ0LmNvbnRlbnQuZXJyb3JfY29kZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQsXG4gICAgICBmaW5pc2hSZWFzb246IG1hcEFudGhyb3BpY1N0b3BSZWFzb24oe1xuICAgICAgICBmaW5pc2hSZWFzb246IHJlc3BvbnNlLnN0b3BfcmVhc29uLFxuICAgICAgICBpc0pzb25SZXNwb25zZUZyb21Ub29sOiB1c2VzSnNvblJlc3BvbnNlVG9vbFxuICAgICAgfSksXG4gICAgICB1c2FnZToge1xuICAgICAgICBpbnB1dFRva2VuczogcmVzcG9uc2UudXNhZ2UuaW5wdXRfdG9rZW5zLFxuICAgICAgICBvdXRwdXRUb2tlbnM6IHJlc3BvbnNlLnVzYWdlLm91dHB1dF90b2tlbnMsXG4gICAgICAgIHRvdGFsVG9rZW5zOiByZXNwb25zZS51c2FnZS5pbnB1dF90b2tlbnMgKyByZXNwb25zZS51c2FnZS5vdXRwdXRfdG9rZW5zLFxuICAgICAgICBjYWNoZWRJbnB1dFRva2VuczogKF9iID0gcmVzcG9uc2UudXNhZ2UuY2FjaGVfcmVhZF9pbnB1dF90b2tlbnMpICE9IG51bGwgPyBfYiA6IHZvaWQgMFxuICAgICAgfSxcbiAgICAgIHJlcXVlc3Q6IHsgYm9keTogYXJncyB9LFxuICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgaWQ6IChfYyA9IHJlc3BvbnNlLmlkKSAhPSBudWxsID8gX2MgOiB2b2lkIDAsXG4gICAgICAgIG1vZGVsSWQ6IChfZCA9IHJlc3BvbnNlLm1vZGVsKSAhPSBudWxsID8gX2QgOiB2b2lkIDAsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgYm9keTogcmF3UmVzcG9uc2VcbiAgICAgIH0sXG4gICAgICB3YXJuaW5ncyxcbiAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgYW50aHJvcGljOiB7XG4gICAgICAgICAgdXNhZ2U6IHJlc3BvbnNlLnVzYWdlLFxuICAgICAgICAgIGNhY2hlQ3JlYXRpb25JbnB1dFRva2VuczogKF9lID0gcmVzcG9uc2UudXNhZ2UuY2FjaGVfY3JlYXRpb25faW5wdXRfdG9rZW5zKSAhPSBudWxsID8gX2UgOiBudWxsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGFzeW5jIGRvU3RyZWFtKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGFyZ3MsIHdhcm5pbmdzLCBiZXRhcywgdXNlc0pzb25SZXNwb25zZVRvb2wgfSA9IGF3YWl0IHRoaXMuZ2V0QXJncyhvcHRpb25zKTtcbiAgICBjb25zdCBjaXRhdGlvbkRvY3VtZW50cyA9IHRoaXMuZXh0cmFjdENpdGF0aW9uRG9jdW1lbnRzKG9wdGlvbnMucHJvbXB0KTtcbiAgICBjb25zdCBib2R5ID0geyAuLi5hcmdzLCBzdHJlYW06IHRydWUgfTtcbiAgICBjb25zdCB7IHJlc3BvbnNlSGVhZGVycywgdmFsdWU6IHJlc3BvbnNlIH0gPSBhd2FpdCBwb3N0SnNvblRvQXBpKHtcbiAgICAgIHVybDogdGhpcy5idWlsZFJlcXVlc3RVcmwodHJ1ZSksXG4gICAgICBoZWFkZXJzOiBhd2FpdCB0aGlzLmdldEhlYWRlcnMoeyBiZXRhcywgaGVhZGVyczogb3B0aW9ucy5oZWFkZXJzIH0pLFxuICAgICAgYm9keTogdGhpcy50cmFuc2Zvcm1SZXF1ZXN0Qm9keShib2R5KSxcbiAgICAgIGZhaWxlZFJlc3BvbnNlSGFuZGxlcjogYW50aHJvcGljRmFpbGVkUmVzcG9uc2VIYW5kbGVyLFxuICAgICAgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcjogY3JlYXRlRXZlbnRTb3VyY2VSZXNwb25zZUhhbmRsZXIoXG4gICAgICAgIGFudGhyb3BpY01lc3NhZ2VzQ2h1bmtTY2hlbWFcbiAgICAgICksXG4gICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgIGZldGNoOiB0aGlzLmNvbmZpZy5mZXRjaFxuICAgIH0pO1xuICAgIGxldCBmaW5pc2hSZWFzb24gPSBcInVua25vd25cIjtcbiAgICBjb25zdCB1c2FnZSA9IHtcbiAgICAgIGlucHV0VG9rZW5zOiB2b2lkIDAsXG4gICAgICBvdXRwdXRUb2tlbnM6IHZvaWQgMCxcbiAgICAgIHRvdGFsVG9rZW5zOiB2b2lkIDBcbiAgICB9O1xuICAgIGNvbnN0IGNvbnRlbnRCbG9ja3MgPSB7fTtcbiAgICBsZXQgcHJvdmlkZXJNZXRhZGF0YSA9IHZvaWQgMDtcbiAgICBsZXQgYmxvY2tUeXBlID0gdm9pZCAwO1xuICAgIGNvbnN0IGdlbmVyYXRlSWQyID0gdGhpcy5nZW5lcmF0ZUlkO1xuICAgIHJldHVybiB7XG4gICAgICBzdHJlYW06IHJlc3BvbnNlLnBpcGVUaHJvdWdoKFxuICAgICAgICBuZXcgVHJhbnNmb3JtU3RyZWFtKHtcbiAgICAgICAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoeyB0eXBlOiBcInN0cmVhbS1zdGFydFwiLCB3YXJuaW5ncyB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcikge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZVJhd0NodW5rcykge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoeyB0eXBlOiBcInJhd1wiLCByYXdWYWx1ZTogY2h1bmsucmF3VmFsdWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWNodW5rLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJlcnJvclwiLCBlcnJvcjogY2h1bmsuZXJyb3IgfSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2h1bmsudmFsdWU7XG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlLnR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBcInBpbmdcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIFwiY29udGVudF9ibG9ja19zdGFydFwiOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudEJsb2NrVHlwZSA9IHZhbHVlLmNvbnRlbnRfYmxvY2sudHlwZTtcbiAgICAgICAgICAgICAgICBibG9ja1R5cGUgPSBjb250ZW50QmxvY2tUeXBlO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoY29udGVudEJsb2NrVHlwZSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcInRleHRcIjoge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50QmxvY2tzW3ZhbHVlLmluZGV4XSA9IHsgdHlwZTogXCJ0ZXh0XCIgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRleHQtc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgICBpZDogU3RyaW5nKHZhbHVlLmluZGV4KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY2FzZSBcInRoaW5raW5nXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudEJsb2Nrc1t2YWx1ZS5pbmRleF0gPSB7IHR5cGU6IFwicmVhc29uaW5nXCIgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInJlYXNvbmluZy1zdGFydFwiLFxuICAgICAgICAgICAgICAgICAgICAgIGlkOiBTdHJpbmcodmFsdWUuaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjYXNlIFwicmVkYWN0ZWRfdGhpbmtpbmdcIjoge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50QmxvY2tzW3ZhbHVlLmluZGV4XSA9IHsgdHlwZTogXCJyZWFzb25pbmdcIiB9O1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVhc29uaW5nLXN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgaWQ6IFN0cmluZyh2YWx1ZS5pbmRleCksXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW50aHJvcGljOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGFjdGVkRGF0YTogdmFsdWUuY29udGVudF9ibG9jay5kYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY2FzZSBcInRvb2xfdXNlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudEJsb2Nrc1t2YWx1ZS5pbmRleF0gPSB1c2VzSnNvblJlc3BvbnNlVG9vbCA/IHsgdHlwZTogXCJ0ZXh0XCIgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtY2FsbFwiLFxuICAgICAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHZhbHVlLmNvbnRlbnRfYmxvY2suaWQsXG4gICAgICAgICAgICAgICAgICAgICAgdG9vbE5hbWU6IHZhbHVlLmNvbnRlbnRfYmxvY2submFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogXCJcIlxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoXG4gICAgICAgICAgICAgICAgICAgICAgdXNlc0pzb25SZXNwb25zZVRvb2wgPyB7IHR5cGU6IFwidGV4dC1zdGFydFwiLCBpZDogU3RyaW5nKHZhbHVlLmluZGV4KSB9IDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LXN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogdmFsdWUuY29udGVudF9ibG9jay5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiB2YWx1ZS5jb250ZW50X2Jsb2NrLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZXJ2ZXJfdG9vbF91c2VcIjoge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuY29udGVudF9ibG9jay5uYW1lID09PSBcIndlYl9zZWFyY2hcIiB8fCB2YWx1ZS5jb250ZW50X2Jsb2NrLm5hbWUgPT09IFwiY29kZV9leGVjdXRpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRCbG9ja3NbdmFsdWUuaW5kZXhdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHZhbHVlLmNvbnRlbnRfYmxvY2suaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sTmFtZTogdmFsdWUuY29udGVudF9ibG9jay5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LXN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogdmFsdWUuY29udGVudF9ibG9jay5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiB2YWx1ZS5jb250ZW50X2Jsb2NrLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY2FzZSBcIndlYl9zZWFyY2hfdG9vbF9yZXN1bHRcIjoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0ID0gdmFsdWUuY29udGVudF9ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFydC5jb250ZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtcmVzdWx0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LnRvb2xfdXNlX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbE5hbWU6IFwid2ViX3NlYXJjaFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBwYXJ0LmNvbnRlbnQubWFwKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHJlc3VsdC51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHJlc3VsdC50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlQWdlOiAoX2EyID0gcmVzdWx0LnBhZ2VfYWdlKSAhPSBudWxsID8gX2EyIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNyeXB0ZWRDb250ZW50OiByZXN1bHQuZW5jcnlwdGVkX2NvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcmVzdWx0LnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHBhcnQuY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzb3VyY2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlVHlwZTogXCJ1cmxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGdlbmVyYXRlSWQyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcmVzdWx0LnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHJlc3VsdC50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFudGhyb3BpYzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUFnZTogKF9hID0gcmVzdWx0LnBhZ2VfYWdlKSAhPSBudWxsID8gX2EgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1yZXN1bHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHBhcnQudG9vbF91c2VfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJ3ZWJfc2VhcmNoXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0Vycm9yOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwid2ViX3NlYXJjaF90b29sX3Jlc3VsdF9lcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNvZGU6IHBhcnQuY29udGVudC5lcnJvcl9jb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb2RlX2V4ZWN1dGlvbl90b29sX3Jlc3VsdFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnQgPSB2YWx1ZS5jb250ZW50X2Jsb2NrO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFydC5jb250ZW50LnR5cGUgPT09IFwiY29kZV9leGVjdXRpb25fcmVzdWx0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLXJlc3VsdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogcGFydC50b29sX3VzZV9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcImNvZGVfZXhlY3V0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcGFydC5jb250ZW50LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZG91dDogcGFydC5jb250ZW50LnN0ZG91dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RkZXJyOiBwYXJ0LmNvbnRlbnQuc3RkZXJyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5fY29kZTogcGFydC5jb250ZW50LnJldHVybl9jb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnQuY29udGVudC50eXBlID09PSBcImNvZGVfZXhlY3V0aW9uX3Rvb2xfcmVzdWx0X2Vycm9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLXJlc3VsdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogcGFydC50b29sX3VzZV9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcImNvZGVfZXhlY3V0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0Vycm9yOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY29kZV9leGVjdXRpb25fdG9vbF9yZXN1bHRfZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JDb2RlOiBwYXJ0LmNvbnRlbnQuZXJyb3JfY29kZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IF9leGhhdXN0aXZlQ2hlY2sgPSBjb250ZW50QmxvY2tUeXBlO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgYFVuc3VwcG9ydGVkIGNvbnRlbnQgYmxvY2sgdHlwZTogJHtfZXhoYXVzdGl2ZUNoZWNrfWBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSBcImNvbnRlbnRfYmxvY2tfc3RvcFwiOiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRCbG9ja3NbdmFsdWUuaW5kZXhdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRCbG9jayA9IGNvbnRlbnRCbG9ja3NbdmFsdWUuaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgc3dpdGNoIChjb250ZW50QmxvY2sudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidGV4dFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dC1lbmRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBTdHJpbmcodmFsdWUuaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJlYXNvbmluZ1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVhc29uaW5nLWVuZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFN0cmluZyh2YWx1ZS5pbmRleClcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidG9vbC1jYWxsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VzSnNvblJlc3BvbnNlVG9vbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LWVuZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogY29udGVudEJsb2NrLnRvb2xDYWxsSWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGNvbnRlbnRCbG9jayk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZGVsZXRlIGNvbnRlbnRCbG9ja3NbdmFsdWUuaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBibG9ja1R5cGUgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgXCJjb250ZW50X2Jsb2NrX2RlbHRhXCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWx0YVR5cGUgPSB2YWx1ZS5kZWx0YS50eXBlO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZGVsdGFUeXBlKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwidGV4dF9kZWx0YVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VzSnNvblJlc3BvbnNlVG9vbCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dC1kZWx0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGlkOiBTdHJpbmcodmFsdWUuaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAgIGRlbHRhOiB2YWx1ZS5kZWx0YS50ZXh0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjYXNlIFwidGhpbmtpbmdfZGVsdGFcIjoge1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVhc29uaW5nLWRlbHRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaWQ6IFN0cmluZyh2YWx1ZS5pbmRleCksXG4gICAgICAgICAgICAgICAgICAgICAgZGVsdGE6IHZhbHVlLmRlbHRhLnRoaW5raW5nXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjYXNlIFwic2lnbmF0dXJlX2RlbHRhXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrVHlwZSA9PT0gXCJ0aGlua2luZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVhc29uaW5nLWRlbHRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogU3RyaW5nKHZhbHVlLmluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhbnRocm9waWM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmU6IHZhbHVlLmRlbHRhLnNpZ25hdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY2FzZSBcImlucHV0X2pzb25fZGVsdGFcIjoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50QmxvY2sgPSBjb250ZW50QmxvY2tzW3ZhbHVlLmluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsdGEgPSB2YWx1ZS5kZWx0YS5wYXJ0aWFsX2pzb247XG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VzSnNvblJlc3BvbnNlVG9vbCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICgoY29udGVudEJsb2NrID09IG51bGwgPyB2b2lkIDAgOiBjb250ZW50QmxvY2sudHlwZSkgIT09IFwidGV4dFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRleHQtZGVsdGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBTdHJpbmcodmFsdWUuaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoKGNvbnRlbnRCbG9jayA9PSBudWxsID8gdm9pZCAwIDogY29udGVudEJsb2NrLnR5cGUpICE9PSBcInRvb2wtY2FsbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtZGVsdGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBjb250ZW50QmxvY2sudG9vbENhbGxJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgY29udGVudEJsb2NrLmlucHV0ICs9IGRlbHRhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJjaXRhdGlvbnNfZGVsdGFcIjoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaXRhdGlvbiA9IHZhbHVlLmRlbHRhLmNpdGF0aW9uO1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQ2l0YXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgY2l0YXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgY2l0YXRpb25Eb2N1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVJZDIsXG4gICAgICAgICAgICAgICAgICAgICAgKHNvdXJjZSkgPT4gY29udHJvbGxlci5lbnF1ZXVlKHNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBfZXhoYXVzdGl2ZUNoZWNrID0gZGVsdGFUeXBlO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgYFVuc3VwcG9ydGVkIGRlbHRhIHR5cGU6ICR7X2V4aGF1c3RpdmVDaGVja31gXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlX3N0YXJ0XCI6IHtcbiAgICAgICAgICAgICAgICB1c2FnZS5pbnB1dFRva2VucyA9IHZhbHVlLm1lc3NhZ2UudXNhZ2UuaW5wdXRfdG9rZW5zO1xuICAgICAgICAgICAgICAgIHVzYWdlLmNhY2hlZElucHV0VG9rZW5zID0gKF9iID0gdmFsdWUubWVzc2FnZS51c2FnZS5jYWNoZV9yZWFkX2lucHV0X3Rva2VucykgIT0gbnVsbCA/IF9iIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICBhbnRocm9waWM6IHtcbiAgICAgICAgICAgICAgICAgICAgdXNhZ2U6IHZhbHVlLm1lc3NhZ2UudXNhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlQ3JlYXRpb25JbnB1dFRva2VuczogKF9jID0gdmFsdWUubWVzc2FnZS51c2FnZS5jYWNoZV9jcmVhdGlvbl9pbnB1dF90b2tlbnMpICE9IG51bGwgPyBfYyA6IG51bGxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInJlc3BvbnNlLW1ldGFkYXRhXCIsXG4gICAgICAgICAgICAgICAgICBpZDogKF9kID0gdmFsdWUubWVzc2FnZS5pZCkgIT0gbnVsbCA/IF9kIDogdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgbW9kZWxJZDogKF9lID0gdmFsdWUubWVzc2FnZS5tb2RlbCkgIT0gbnVsbCA/IF9lIDogdm9pZCAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlX2RlbHRhXCI6IHtcbiAgICAgICAgICAgICAgICB1c2FnZS5vdXRwdXRUb2tlbnMgPSB2YWx1ZS51c2FnZS5vdXRwdXRfdG9rZW5zO1xuICAgICAgICAgICAgICAgIHVzYWdlLnRvdGFsVG9rZW5zID0gKChfZiA9IHVzYWdlLmlucHV0VG9rZW5zKSAhPSBudWxsID8gX2YgOiAwKSArICgoX2cgPSB2YWx1ZS51c2FnZS5vdXRwdXRfdG9rZW5zKSAhPSBudWxsID8gX2cgOiAwKTtcbiAgICAgICAgICAgICAgICBmaW5pc2hSZWFzb24gPSBtYXBBbnRocm9waWNTdG9wUmVhc29uKHtcbiAgICAgICAgICAgICAgICAgIGZpbmlzaFJlYXNvbjogdmFsdWUuZGVsdGEuc3RvcF9yZWFzb24sXG4gICAgICAgICAgICAgICAgICBpc0pzb25SZXNwb25zZUZyb21Ub29sOiB1c2VzSnNvblJlc3BvbnNlVG9vbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZV9zdG9wXCI6IHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJmaW5pc2hcIixcbiAgICAgICAgICAgICAgICAgIGZpbmlzaFJlYXNvbixcbiAgICAgICAgICAgICAgICAgIHVzYWdlLFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjoge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwiZXJyb3JcIiwgZXJyb3I6IHZhbHVlLmVycm9yIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgY29uc3QgX2V4aGF1c3RpdmVDaGVjayA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgY2h1bmsgdHlwZTogJHtfZXhoYXVzdGl2ZUNoZWNrfWApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIHJlcXVlc3Q6IHsgYm9keSB9LFxuICAgICAgcmVzcG9uc2U6IHsgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzIH1cbiAgICB9O1xuICB9XG59O1xudmFyIGFudGhyb3BpY01lc3NhZ2VzUmVzcG9uc2VTY2hlbWEgPSB6NS5vYmplY3Qoe1xuICB0eXBlOiB6NS5saXRlcmFsKFwibWVzc2FnZVwiKSxcbiAgaWQ6IHo1LnN0cmluZygpLm51bGxpc2goKSxcbiAgbW9kZWw6IHo1LnN0cmluZygpLm51bGxpc2goKSxcbiAgY29udGVudDogejUuYXJyYXkoXG4gICAgejUuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgICB6NS5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6NS5saXRlcmFsKFwidGV4dFwiKSxcbiAgICAgICAgdGV4dDogejUuc3RyaW5nKCksXG4gICAgICAgIGNpdGF0aW9uczogejUuYXJyYXkoY2l0YXRpb25TY2hlbWEpLm9wdGlvbmFsKClcbiAgICAgIH0pLFxuICAgICAgejUub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejUubGl0ZXJhbChcInRoaW5raW5nXCIpLFxuICAgICAgICB0aGlua2luZzogejUuc3RyaW5nKCksXG4gICAgICAgIHNpZ25hdHVyZTogejUuc3RyaW5nKClcbiAgICAgIH0pLFxuICAgICAgejUub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejUubGl0ZXJhbChcInJlZGFjdGVkX3RoaW5raW5nXCIpLFxuICAgICAgICBkYXRhOiB6NS5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgICB6NS5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6NS5saXRlcmFsKFwidG9vbF91c2VcIiksXG4gICAgICAgIGlkOiB6NS5zdHJpbmcoKSxcbiAgICAgICAgbmFtZTogejUuc3RyaW5nKCksXG4gICAgICAgIGlucHV0OiB6NS51bmtub3duKClcbiAgICAgIH0pLFxuICAgICAgejUub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejUubGl0ZXJhbChcInNlcnZlcl90b29sX3VzZVwiKSxcbiAgICAgICAgaWQ6IHo1LnN0cmluZygpLFxuICAgICAgICBuYW1lOiB6NS5zdHJpbmcoKSxcbiAgICAgICAgaW5wdXQ6IHo1LnJlY29yZCh6NS5zdHJpbmcoKSwgejUudW5rbm93bigpKS5udWxsaXNoKClcbiAgICAgIH0pLFxuICAgICAgejUub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejUubGl0ZXJhbChcIndlYl9zZWFyY2hfdG9vbF9yZXN1bHRcIiksXG4gICAgICAgIHRvb2xfdXNlX2lkOiB6NS5zdHJpbmcoKSxcbiAgICAgICAgY29udGVudDogejUudW5pb24oW1xuICAgICAgICAgIHo1LmFycmF5KFxuICAgICAgICAgICAgejUub2JqZWN0KHtcbiAgICAgICAgICAgICAgdHlwZTogejUubGl0ZXJhbChcIndlYl9zZWFyY2hfcmVzdWx0XCIpLFxuICAgICAgICAgICAgICB1cmw6IHo1LnN0cmluZygpLFxuICAgICAgICAgICAgICB0aXRsZTogejUuc3RyaW5nKCksXG4gICAgICAgICAgICAgIGVuY3J5cHRlZF9jb250ZW50OiB6NS5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgcGFnZV9hZ2U6IHo1LnN0cmluZygpLm51bGxpc2goKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIHo1Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6NS5saXRlcmFsKFwid2ViX3NlYXJjaF90b29sX3Jlc3VsdF9lcnJvclwiKSxcbiAgICAgICAgICAgIGVycm9yX2NvZGU6IHo1LnN0cmluZygpXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgIH0pLFxuICAgICAgejUub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejUubGl0ZXJhbChcImNvZGVfZXhlY3V0aW9uX3Rvb2xfcmVzdWx0XCIpLFxuICAgICAgICB0b29sX3VzZV9pZDogejUuc3RyaW5nKCksXG4gICAgICAgIGNvbnRlbnQ6IHo1LnVuaW9uKFtcbiAgICAgICAgICB6NS5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejUubGl0ZXJhbChcImNvZGVfZXhlY3V0aW9uX3Jlc3VsdFwiKSxcbiAgICAgICAgICAgIHN0ZG91dDogejUuc3RyaW5nKCksXG4gICAgICAgICAgICBzdGRlcnI6IHo1LnN0cmluZygpLFxuICAgICAgICAgICAgcmV0dXJuX2NvZGU6IHo1Lm51bWJlcigpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgejUub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHo1LmxpdGVyYWwoXCJjb2RlX2V4ZWN1dGlvbl90b29sX3Jlc3VsdF9lcnJvclwiKSxcbiAgICAgICAgICAgIGVycm9yX2NvZGU6IHo1LnN0cmluZygpXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgIH0pXG4gICAgXSlcbiAgKSxcbiAgc3RvcF9yZWFzb246IHo1LnN0cmluZygpLm51bGxpc2goKSxcbiAgdXNhZ2U6IHo1Lmxvb3NlT2JqZWN0KHtcbiAgICBpbnB1dF90b2tlbnM6IHo1Lm51bWJlcigpLFxuICAgIG91dHB1dF90b2tlbnM6IHo1Lm51bWJlcigpLFxuICAgIGNhY2hlX2NyZWF0aW9uX2lucHV0X3Rva2VuczogejUubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgIGNhY2hlX3JlYWRfaW5wdXRfdG9rZW5zOiB6NS5udW1iZXIoKS5udWxsaXNoKClcbiAgfSlcbn0pO1xudmFyIGFudGhyb3BpY01lc3NhZ2VzQ2h1bmtTY2hlbWEgPSB6NS5kaXNjcmltaW5hdGVkVW5pb24oXCJ0eXBlXCIsIFtcbiAgejUub2JqZWN0KHtcbiAgICB0eXBlOiB6NS5saXRlcmFsKFwibWVzc2FnZV9zdGFydFwiKSxcbiAgICBtZXNzYWdlOiB6NS5vYmplY3Qoe1xuICAgICAgaWQ6IHo1LnN0cmluZygpLm51bGxpc2goKSxcbiAgICAgIG1vZGVsOiB6NS5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICB1c2FnZTogejUubG9vc2VPYmplY3Qoe1xuICAgICAgICBpbnB1dF90b2tlbnM6IHo1Lm51bWJlcigpLFxuICAgICAgICBvdXRwdXRfdG9rZW5zOiB6NS5udW1iZXIoKSxcbiAgICAgICAgY2FjaGVfY3JlYXRpb25faW5wdXRfdG9rZW5zOiB6NS5udW1iZXIoKS5udWxsaXNoKCksXG4gICAgICAgIGNhY2hlX3JlYWRfaW5wdXRfdG9rZW5zOiB6NS5udW1iZXIoKS5udWxsaXNoKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfSksXG4gIHo1Lm9iamVjdCh7XG4gICAgdHlwZTogejUubGl0ZXJhbChcImNvbnRlbnRfYmxvY2tfc3RhcnRcIiksXG4gICAgaW5kZXg6IHo1Lm51bWJlcigpLFxuICAgIGNvbnRlbnRfYmxvY2s6IHo1LmRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICAgICAgejUub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejUubGl0ZXJhbChcInRleHRcIiksXG4gICAgICAgIHRleHQ6IHo1LnN0cmluZygpXG4gICAgICB9KSxcbiAgICAgIHo1Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHo1LmxpdGVyYWwoXCJ0aGlua2luZ1wiKSxcbiAgICAgICAgdGhpbmtpbmc6IHo1LnN0cmluZygpXG4gICAgICB9KSxcbiAgICAgIHo1Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHo1LmxpdGVyYWwoXCJ0b29sX3VzZVwiKSxcbiAgICAgICAgaWQ6IHo1LnN0cmluZygpLFxuICAgICAgICBuYW1lOiB6NS5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgICB6NS5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6NS5saXRlcmFsKFwicmVkYWN0ZWRfdGhpbmtpbmdcIiksXG4gICAgICAgIGRhdGE6IHo1LnN0cmluZygpXG4gICAgICB9KSxcbiAgICAgIHo1Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHo1LmxpdGVyYWwoXCJzZXJ2ZXJfdG9vbF91c2VcIiksXG4gICAgICAgIGlkOiB6NS5zdHJpbmcoKSxcbiAgICAgICAgbmFtZTogejUuc3RyaW5nKCksXG4gICAgICAgIGlucHV0OiB6NS5yZWNvcmQoejUuc3RyaW5nKCksIHo1LnVua25vd24oKSkubnVsbGlzaCgpXG4gICAgICB9KSxcbiAgICAgIHo1Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHo1LmxpdGVyYWwoXCJ3ZWJfc2VhcmNoX3Rvb2xfcmVzdWx0XCIpLFxuICAgICAgICB0b29sX3VzZV9pZDogejUuc3RyaW5nKCksXG4gICAgICAgIGNvbnRlbnQ6IHo1LnVuaW9uKFtcbiAgICAgICAgICB6NS5hcnJheShcbiAgICAgICAgICAgIHo1Lm9iamVjdCh7XG4gICAgICAgICAgICAgIHR5cGU6IHo1LmxpdGVyYWwoXCJ3ZWJfc2VhcmNoX3Jlc3VsdFwiKSxcbiAgICAgICAgICAgICAgdXJsOiB6NS5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgdGl0bGU6IHo1LnN0cmluZygpLFxuICAgICAgICAgICAgICBlbmNyeXB0ZWRfY29udGVudDogejUuc3RyaW5nKCksXG4gICAgICAgICAgICAgIHBhZ2VfYWdlOiB6NS5zdHJpbmcoKS5udWxsaXNoKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICB6NS5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejUubGl0ZXJhbChcIndlYl9zZWFyY2hfdG9vbF9yZXN1bHRfZXJyb3JcIiksXG4gICAgICAgICAgICBlcnJvcl9jb2RlOiB6NS5zdHJpbmcoKVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICB9KSxcbiAgICAgIHo1Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHo1LmxpdGVyYWwoXCJjb2RlX2V4ZWN1dGlvbl90b29sX3Jlc3VsdFwiKSxcbiAgICAgICAgdG9vbF91c2VfaWQ6IHo1LnN0cmluZygpLFxuICAgICAgICBjb250ZW50OiB6NS51bmlvbihbXG4gICAgICAgICAgejUub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHo1LmxpdGVyYWwoXCJjb2RlX2V4ZWN1dGlvbl9yZXN1bHRcIiksXG4gICAgICAgICAgICBzdGRvdXQ6IHo1LnN0cmluZygpLFxuICAgICAgICAgICAgc3RkZXJyOiB6NS5zdHJpbmcoKSxcbiAgICAgICAgICAgIHJldHVybl9jb2RlOiB6NS5udW1iZXIoKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHo1Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6NS5saXRlcmFsKFwiY29kZV9leGVjdXRpb25fdG9vbF9yZXN1bHRfZXJyb3JcIiksXG4gICAgICAgICAgICBlcnJvcl9jb2RlOiB6NS5zdHJpbmcoKVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICB9KVxuICAgIF0pXG4gIH0pLFxuICB6NS5vYmplY3Qoe1xuICAgIHR5cGU6IHo1LmxpdGVyYWwoXCJjb250ZW50X2Jsb2NrX2RlbHRhXCIpLFxuICAgIGluZGV4OiB6NS5udW1iZXIoKSxcbiAgICBkZWx0YTogejUuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgICB6NS5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6NS5saXRlcmFsKFwiaW5wdXRfanNvbl9kZWx0YVwiKSxcbiAgICAgICAgcGFydGlhbF9qc29uOiB6NS5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgICB6NS5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6NS5saXRlcmFsKFwidGV4dF9kZWx0YVwiKSxcbiAgICAgICAgdGV4dDogejUuc3RyaW5nKClcbiAgICAgIH0pLFxuICAgICAgejUub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejUubGl0ZXJhbChcInRoaW5raW5nX2RlbHRhXCIpLFxuICAgICAgICB0aGlua2luZzogejUuc3RyaW5nKClcbiAgICAgIH0pLFxuICAgICAgejUub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejUubGl0ZXJhbChcInNpZ25hdHVyZV9kZWx0YVwiKSxcbiAgICAgICAgc2lnbmF0dXJlOiB6NS5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgICB6NS5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6NS5saXRlcmFsKFwiY2l0YXRpb25zX2RlbHRhXCIpLFxuICAgICAgICBjaXRhdGlvbjogY2l0YXRpb25TY2hlbWFcbiAgICAgIH0pXG4gICAgXSlcbiAgfSksXG4gIHo1Lm9iamVjdCh7XG4gICAgdHlwZTogejUubGl0ZXJhbChcImNvbnRlbnRfYmxvY2tfc3RvcFwiKSxcbiAgICBpbmRleDogejUubnVtYmVyKClcbiAgfSksXG4gIHo1Lm9iamVjdCh7XG4gICAgdHlwZTogejUubGl0ZXJhbChcImVycm9yXCIpLFxuICAgIGVycm9yOiB6NS5vYmplY3Qoe1xuICAgICAgdHlwZTogejUuc3RyaW5nKCksXG4gICAgICBtZXNzYWdlOiB6NS5zdHJpbmcoKVxuICAgIH0pXG4gIH0pLFxuICB6NS5vYmplY3Qoe1xuICAgIHR5cGU6IHo1LmxpdGVyYWwoXCJtZXNzYWdlX2RlbHRhXCIpLFxuICAgIGRlbHRhOiB6NS5vYmplY3QoeyBzdG9wX3JlYXNvbjogejUuc3RyaW5nKCkubnVsbGlzaCgpIH0pLFxuICAgIHVzYWdlOiB6NS5vYmplY3QoeyBvdXRwdXRfdG9rZW5zOiB6NS5udW1iZXIoKSB9KVxuICB9KSxcbiAgejUub2JqZWN0KHtcbiAgICB0eXBlOiB6NS5saXRlcmFsKFwibWVzc2FnZV9zdG9wXCIpXG4gIH0pLFxuICB6NS5vYmplY3Qoe1xuICAgIHR5cGU6IHo1LmxpdGVyYWwoXCJwaW5nXCIpXG4gIH0pXG5dKTtcbnZhciBhbnRocm9waWNSZWFzb25pbmdNZXRhZGF0YVNjaGVtYSA9IHo1Lm9iamVjdCh7XG4gIHNpZ25hdHVyZTogejUuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgcmVkYWN0ZWREYXRhOiB6NS5zdHJpbmcoKS5vcHRpb25hbCgpXG59KTtcblxuLy8gc3JjL3Rvb2wvYmFzaF8yMDI0MTAyMi50c1xuaW1wb3J0IHsgY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnkgfSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuaW1wb3J0IHo2IGZyb20gXCJ6b2QvdjRcIjtcbnZhciBiYXNoXzIwMjQxMDIyID0gY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3Rvcnkoe1xuICBpZDogXCJhbnRocm9waWMuYmFzaF8yMDI0MTAyMlwiLFxuICBuYW1lOiBcImJhc2hcIixcbiAgaW5wdXRTY2hlbWE6IHo2Lm9iamVjdCh7XG4gICAgY29tbWFuZDogejYuc3RyaW5nKCksXG4gICAgcmVzdGFydDogejYuYm9vbGVhbigpLm9wdGlvbmFsKClcbiAgfSlcbn0pO1xuXG4vLyBzcmMvdG9vbC9iYXNoXzIwMjUwMTI0LnRzXG5pbXBvcnQgeyBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeSBhcyBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeTIgfSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuaW1wb3J0IHo3IGZyb20gXCJ6b2QvdjRcIjtcbnZhciBiYXNoXzIwMjUwMTI0ID0gY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnkyKHtcbiAgaWQ6IFwiYW50aHJvcGljLmJhc2hfMjAyNTAxMjRcIixcbiAgbmFtZTogXCJiYXNoXCIsXG4gIGlucHV0U2NoZW1hOiB6Ny5vYmplY3Qoe1xuICAgIGNvbW1hbmQ6IHo3LnN0cmluZygpLFxuICAgIHJlc3RhcnQ6IHo3LmJvb2xlYW4oKS5vcHRpb25hbCgpXG4gIH0pXG59KTtcblxuLy8gc3JjL3Rvb2wvY29tcHV0ZXJfMjAyNDEwMjIudHNcbmltcG9ydCB7IGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5IGFzIGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5MyB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHo4IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIGNvbXB1dGVyXzIwMjQxMDIyID0gY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnkzKHtcbiAgaWQ6IFwiYW50aHJvcGljLmNvbXB1dGVyXzIwMjQxMDIyXCIsXG4gIG5hbWU6IFwiY29tcHV0ZXJcIixcbiAgaW5wdXRTY2hlbWE6IHo4Lm9iamVjdCh7XG4gICAgYWN0aW9uOiB6OC5lbnVtKFtcbiAgICAgIFwia2V5XCIsXG4gICAgICBcInR5cGVcIixcbiAgICAgIFwibW91c2VfbW92ZVwiLFxuICAgICAgXCJsZWZ0X2NsaWNrXCIsXG4gICAgICBcImxlZnRfY2xpY2tfZHJhZ1wiLFxuICAgICAgXCJyaWdodF9jbGlja1wiLFxuICAgICAgXCJtaWRkbGVfY2xpY2tcIixcbiAgICAgIFwiZG91YmxlX2NsaWNrXCIsXG4gICAgICBcInNjcmVlbnNob3RcIixcbiAgICAgIFwiY3Vyc29yX3Bvc2l0aW9uXCJcbiAgICBdKSxcbiAgICBjb29yZGluYXRlOiB6OC5hcnJheSh6OC5udW1iZXIoKS5pbnQoKSkub3B0aW9uYWwoKSxcbiAgICB0ZXh0OiB6OC5zdHJpbmcoKS5vcHRpb25hbCgpXG4gIH0pXG59KTtcblxuLy8gc3JjL3Rvb2wvY29tcHV0ZXJfMjAyNTAxMjQudHNcbmltcG9ydCB7IGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5IGFzIGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5NCB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHo5IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIGNvbXB1dGVyXzIwMjUwMTI0ID0gY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3Rvcnk0KHtcbiAgaWQ6IFwiYW50aHJvcGljLmNvbXB1dGVyXzIwMjUwMTI0XCIsXG4gIG5hbWU6IFwiY29tcHV0ZXJcIixcbiAgaW5wdXRTY2hlbWE6IHo5Lm9iamVjdCh7XG4gICAgYWN0aW9uOiB6OS5lbnVtKFtcbiAgICAgIFwia2V5XCIsXG4gICAgICBcImhvbGRfa2V5XCIsXG4gICAgICBcInR5cGVcIixcbiAgICAgIFwiY3Vyc29yX3Bvc2l0aW9uXCIsXG4gICAgICBcIm1vdXNlX21vdmVcIixcbiAgICAgIFwibGVmdF9tb3VzZV9kb3duXCIsXG4gICAgICBcImxlZnRfbW91c2VfdXBcIixcbiAgICAgIFwibGVmdF9jbGlja1wiLFxuICAgICAgXCJsZWZ0X2NsaWNrX2RyYWdcIixcbiAgICAgIFwicmlnaHRfY2xpY2tcIixcbiAgICAgIFwibWlkZGxlX2NsaWNrXCIsXG4gICAgICBcImRvdWJsZV9jbGlja1wiLFxuICAgICAgXCJ0cmlwbGVfY2xpY2tcIixcbiAgICAgIFwic2Nyb2xsXCIsXG4gICAgICBcIndhaXRcIixcbiAgICAgIFwic2NyZWVuc2hvdFwiXG4gICAgXSksXG4gICAgY29vcmRpbmF0ZTogejkudHVwbGUoW3o5Lm51bWJlcigpLmludCgpLCB6OS5udW1iZXIoKS5pbnQoKV0pLm9wdGlvbmFsKCksXG4gICAgZHVyYXRpb246IHo5Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gICAgc2Nyb2xsX2Ftb3VudDogejkubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICBzY3JvbGxfZGlyZWN0aW9uOiB6OS5lbnVtKFtcInVwXCIsIFwiZG93blwiLCBcImxlZnRcIiwgXCJyaWdodFwiXSkub3B0aW9uYWwoKSxcbiAgICBzdGFydF9jb29yZGluYXRlOiB6OS50dXBsZShbejkubnVtYmVyKCkuaW50KCksIHo5Lm51bWJlcigpLmludCgpXSkub3B0aW9uYWwoKSxcbiAgICB0ZXh0OiB6OS5zdHJpbmcoKS5vcHRpb25hbCgpXG4gIH0pXG59KTtcblxuLy8gc3JjL3Rvb2wvdGV4dC1lZGl0b3JfMjAyNDEwMjIudHNcbmltcG9ydCB7IGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5IGFzIGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5NSB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHoxMCB9IGZyb20gXCJ6b2QvdjRcIjtcbnZhciB0ZXh0RWRpdG9yXzIwMjQxMDIyID0gY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3Rvcnk1KHtcbiAgaWQ6IFwiYW50aHJvcGljLnRleHRfZWRpdG9yXzIwMjQxMDIyXCIsXG4gIG5hbWU6IFwic3RyX3JlcGxhY2VfZWRpdG9yXCIsXG4gIGlucHV0U2NoZW1hOiB6MTAub2JqZWN0KHtcbiAgICBjb21tYW5kOiB6MTAuZW51bShbXCJ2aWV3XCIsIFwiY3JlYXRlXCIsIFwic3RyX3JlcGxhY2VcIiwgXCJpbnNlcnRcIiwgXCJ1bmRvX2VkaXRcIl0pLFxuICAgIHBhdGg6IHoxMC5zdHJpbmcoKSxcbiAgICBmaWxlX3RleHQ6IHoxMC5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGluc2VydF9saW5lOiB6MTAubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKSxcbiAgICBuZXdfc3RyOiB6MTAuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBvbGRfc3RyOiB6MTAuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICB2aWV3X3JhbmdlOiB6MTAuYXJyYXkoejEwLm51bWJlcigpLmludCgpKS5vcHRpb25hbCgpXG4gIH0pXG59KTtcblxuLy8gc3JjL3Rvb2wvdGV4dC1lZGl0b3JfMjAyNTAxMjQudHNcbmltcG9ydCB7IGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5IGFzIGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5NiB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHoxMSB9IGZyb20gXCJ6b2QvdjRcIjtcbnZhciB0ZXh0RWRpdG9yXzIwMjUwMTI0ID0gY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3Rvcnk2KHtcbiAgaWQ6IFwiYW50aHJvcGljLnRleHRfZWRpdG9yXzIwMjUwMTI0XCIsXG4gIG5hbWU6IFwic3RyX3JlcGxhY2VfZWRpdG9yXCIsXG4gIGlucHV0U2NoZW1hOiB6MTEub2JqZWN0KHtcbiAgICBjb21tYW5kOiB6MTEuZW51bShbXCJ2aWV3XCIsIFwiY3JlYXRlXCIsIFwic3RyX3JlcGxhY2VcIiwgXCJpbnNlcnRcIiwgXCJ1bmRvX2VkaXRcIl0pLFxuICAgIHBhdGg6IHoxMS5zdHJpbmcoKSxcbiAgICBmaWxlX3RleHQ6IHoxMS5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGluc2VydF9saW5lOiB6MTEubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKSxcbiAgICBuZXdfc3RyOiB6MTEuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBvbGRfc3RyOiB6MTEuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICB2aWV3X3JhbmdlOiB6MTEuYXJyYXkoejExLm51bWJlcigpLmludCgpKS5vcHRpb25hbCgpXG4gIH0pXG59KTtcblxuLy8gc3JjL3Rvb2wvdGV4dC1lZGl0b3JfMjAyNTA0MjkudHNcbmltcG9ydCB7IGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5IGFzIGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5NyB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHoxMiB9IGZyb20gXCJ6b2QvdjRcIjtcbnZhciB0ZXh0RWRpdG9yXzIwMjUwNDI5ID0gY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3Rvcnk3KHtcbiAgaWQ6IFwiYW50aHJvcGljLnRleHRfZWRpdG9yXzIwMjUwNDI5XCIsXG4gIG5hbWU6IFwic3RyX3JlcGxhY2VfYmFzZWRfZWRpdF90b29sXCIsXG4gIGlucHV0U2NoZW1hOiB6MTIub2JqZWN0KHtcbiAgICBjb21tYW5kOiB6MTIuZW51bShbXCJ2aWV3XCIsIFwiY3JlYXRlXCIsIFwic3RyX3JlcGxhY2VcIiwgXCJpbnNlcnRcIl0pLFxuICAgIHBhdGg6IHoxMi5zdHJpbmcoKSxcbiAgICBmaWxlX3RleHQ6IHoxMi5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGluc2VydF9saW5lOiB6MTIubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKSxcbiAgICBuZXdfc3RyOiB6MTIuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBvbGRfc3RyOiB6MTIuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICB2aWV3X3JhbmdlOiB6MTIuYXJyYXkoejEyLm51bWJlcigpLmludCgpKS5vcHRpb25hbCgpXG4gIH0pXG59KTtcblxuLy8gc3JjL2FudGhyb3BpYy10b29scy50c1xudmFyIGFudGhyb3BpY1Rvb2xzID0ge1xuICAvKipcbiAgICogVGhlIGJhc2ggdG9vbCBlbmFibGVzIENsYXVkZSB0byBleGVjdXRlIHNoZWxsIGNvbW1hbmRzIGluIGEgcGVyc2lzdGVudCBiYXNoIHNlc3Npb24sXG4gICAqIGFsbG93aW5nIHN5c3RlbSBvcGVyYXRpb25zLCBzY3JpcHQgZXhlY3V0aW9uLCBhbmQgY29tbWFuZC1saW5lIGF1dG9tYXRpb24uXG4gICAqXG4gICAqIEltYWdlIHJlc3VsdHMgYXJlIHN1cHBvcnRlZC5cbiAgICpcbiAgICogVG9vbCBuYW1lIG11c3QgYmUgYGJhc2hgLlxuICAgKi9cbiAgYmFzaF8yMDI0MTAyMixcbiAgLyoqXG4gICAqIFRoZSBiYXNoIHRvb2wgZW5hYmxlcyBDbGF1ZGUgdG8gZXhlY3V0ZSBzaGVsbCBjb21tYW5kcyBpbiBhIHBlcnNpc3RlbnQgYmFzaCBzZXNzaW9uLFxuICAgKiBhbGxvd2luZyBzeXN0ZW0gb3BlcmF0aW9ucywgc2NyaXB0IGV4ZWN1dGlvbiwgYW5kIGNvbW1hbmQtbGluZSBhdXRvbWF0aW9uLlxuICAgKlxuICAgKiBJbWFnZSByZXN1bHRzIGFyZSBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIFRvb2wgbmFtZSBtdXN0IGJlIGBiYXNoYC5cbiAgICovXG4gIGJhc2hfMjAyNTAxMjQsXG4gIC8qKlxuICAgKiBDbGF1ZGUgY2FuIGFuYWx5emUgZGF0YSwgY3JlYXRlIHZpc3VhbGl6YXRpb25zLCBwZXJmb3JtIGNvbXBsZXggY2FsY3VsYXRpb25zLFxuICAgKiBydW4gc3lzdGVtIGNvbW1hbmRzLCBjcmVhdGUgYW5kIGVkaXQgZmlsZXMsIGFuZCBwcm9jZXNzIHVwbG9hZGVkIGZpbGVzIGRpcmVjdGx5IHdpdGhpblxuICAgKiB0aGUgQVBJIGNvbnZlcnNhdGlvbi5cbiAgICpcbiAgICogVGhlIGNvZGUgZXhlY3V0aW9uIHRvb2wgYWxsb3dzIENsYXVkZSB0byBydW4gQmFzaCBjb21tYW5kcyBhbmQgbWFuaXB1bGF0ZSBmaWxlcyxcbiAgICogaW5jbHVkaW5nIHdyaXRpbmcgY29kZSwgaW4gYSBzZWN1cmUsIHNhbmRib3hlZCBlbnZpcm9ubWVudC5cbiAgICpcbiAgICogVG9vbCBuYW1lIG11c3QgYmUgYGNvZGVfZXhlY3V0aW9uYC5cbiAgICovXG4gIGNvZGVFeGVjdXRpb25fMjAyNTA1MjIsXG4gIC8qKlxuICAgKiBDbGF1ZGUgY2FuIGludGVyYWN0IHdpdGggY29tcHV0ZXIgZW52aXJvbm1lbnRzIHRocm91Z2ggdGhlIGNvbXB1dGVyIHVzZSB0b29sLCB3aGljaFxuICAgKiBwcm92aWRlcyBzY3JlZW5zaG90IGNhcGFiaWxpdGllcyBhbmQgbW91c2Uva2V5Ym9hcmQgY29udHJvbCBmb3IgYXV0b25vbW91cyBkZXNrdG9wIGludGVyYWN0aW9uLlxuICAgKlxuICAgKiBJbWFnZSByZXN1bHRzIGFyZSBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIFRvb2wgbmFtZSBtdXN0IGJlIGBjb21wdXRlcmAuXG4gICAqXG4gICAqIEBwYXJhbSBkaXNwbGF5V2lkdGhQeCAtIFRoZSB3aWR0aCBvZiB0aGUgZGlzcGxheSBiZWluZyBjb250cm9sbGVkIGJ5IHRoZSBtb2RlbCBpbiBwaXhlbHMuXG4gICAqIEBwYXJhbSBkaXNwbGF5SGVpZ2h0UHggLSBUaGUgaGVpZ2h0IG9mIHRoZSBkaXNwbGF5IGJlaW5nIGNvbnRyb2xsZWQgYnkgdGhlIG1vZGVsIGluIHBpeGVscy5cbiAgICogQHBhcmFtIGRpc3BsYXlOdW1iZXIgLSBUaGUgZGlzcGxheSBudW1iZXIgdG8gY29udHJvbCAob25seSByZWxldmFudCBmb3IgWDExIGVudmlyb25tZW50cykuIElmIHNwZWNpZmllZCwgdGhlIHRvb2wgd2lsbCBiZSBwcm92aWRlZCBhIGRpc3BsYXkgbnVtYmVyIGluIHRoZSB0b29sIGRlZmluaXRpb24uXG4gICAqL1xuICBjb21wdXRlcl8yMDI0MTAyMixcbiAgLyoqXG4gICAqIENsYXVkZSBjYW4gaW50ZXJhY3Qgd2l0aCBjb21wdXRlciBlbnZpcm9ubWVudHMgdGhyb3VnaCB0aGUgY29tcHV0ZXIgdXNlIHRvb2wsIHdoaWNoXG4gICAqIHByb3ZpZGVzIHNjcmVlbnNob3QgY2FwYWJpbGl0aWVzIGFuZCBtb3VzZS9rZXlib2FyZCBjb250cm9sIGZvciBhdXRvbm9tb3VzIGRlc2t0b3AgaW50ZXJhY3Rpb24uXG4gICAqXG4gICAqIEltYWdlIHJlc3VsdHMgYXJlIHN1cHBvcnRlZC5cbiAgICpcbiAgICogVG9vbCBuYW1lIG11c3QgYmUgYGNvbXB1dGVyYC5cbiAgICpcbiAgICogQHBhcmFtIGRpc3BsYXlXaWR0aFB4IC0gVGhlIHdpZHRoIG9mIHRoZSBkaXNwbGF5IGJlaW5nIGNvbnRyb2xsZWQgYnkgdGhlIG1vZGVsIGluIHBpeGVscy5cbiAgICogQHBhcmFtIGRpc3BsYXlIZWlnaHRQeCAtIFRoZSBoZWlnaHQgb2YgdGhlIGRpc3BsYXkgYmVpbmcgY29udHJvbGxlZCBieSB0aGUgbW9kZWwgaW4gcGl4ZWxzLlxuICAgKiBAcGFyYW0gZGlzcGxheU51bWJlciAtIFRoZSBkaXNwbGF5IG51bWJlciB0byBjb250cm9sIChvbmx5IHJlbGV2YW50IGZvciBYMTEgZW52aXJvbm1lbnRzKS4gSWYgc3BlY2lmaWVkLCB0aGUgdG9vbCB3aWxsIGJlIHByb3ZpZGVkIGEgZGlzcGxheSBudW1iZXIgaW4gdGhlIHRvb2wgZGVmaW5pdGlvbi5cbiAgICovXG4gIGNvbXB1dGVyXzIwMjUwMTI0LFxuICAvKipcbiAgICogQ2xhdWRlIGNhbiB1c2UgYW4gQW50aHJvcGljLWRlZmluZWQgdGV4dCBlZGl0b3IgdG9vbCB0byB2aWV3IGFuZCBtb2RpZnkgdGV4dCBmaWxlcyxcbiAgICogaGVscGluZyB5b3UgZGVidWcsIGZpeCwgYW5kIGltcHJvdmUgeW91ciBjb2RlIG9yIG90aGVyIHRleHQgZG9jdW1lbnRzLiBUaGlzIGFsbG93cyBDbGF1ZGVcbiAgICogdG8gZGlyZWN0bHkgaW50ZXJhY3Qgd2l0aCB5b3VyIGZpbGVzLCBwcm92aWRpbmcgaGFuZHMtb24gYXNzaXN0YW5jZSByYXRoZXIgdGhhbiBqdXN0IHN1Z2dlc3RpbmcgY2hhbmdlcy5cbiAgICpcbiAgICogVG9vbCBuYW1lIG11c3QgYmUgYHN0cl9yZXBsYWNlX2VkaXRvcmAuXG4gICAqL1xuICB0ZXh0RWRpdG9yXzIwMjQxMDIyLFxuICAvKipcbiAgICogQ2xhdWRlIGNhbiB1c2UgYW4gQW50aHJvcGljLWRlZmluZWQgdGV4dCBlZGl0b3IgdG9vbCB0byB2aWV3IGFuZCBtb2RpZnkgdGV4dCBmaWxlcyxcbiAgICogaGVscGluZyB5b3UgZGVidWcsIGZpeCwgYW5kIGltcHJvdmUgeW91ciBjb2RlIG9yIG90aGVyIHRleHQgZG9jdW1lbnRzLiBUaGlzIGFsbG93cyBDbGF1ZGVcbiAgICogdG8gZGlyZWN0bHkgaW50ZXJhY3Qgd2l0aCB5b3VyIGZpbGVzLCBwcm92aWRpbmcgaGFuZHMtb24gYXNzaXN0YW5jZSByYXRoZXIgdGhhbiBqdXN0IHN1Z2dlc3RpbmcgY2hhbmdlcy5cbiAgICpcbiAgICogVG9vbCBuYW1lIG11c3QgYmUgYHN0cl9yZXBsYWNlX2VkaXRvcmAuXG4gICAqL1xuICB0ZXh0RWRpdG9yXzIwMjUwMTI0LFxuICAvKipcbiAgICogQ2xhdWRlIGNhbiB1c2UgYW4gQW50aHJvcGljLWRlZmluZWQgdGV4dCBlZGl0b3IgdG9vbCB0byB2aWV3IGFuZCBtb2RpZnkgdGV4dCBmaWxlcyxcbiAgICogaGVscGluZyB5b3UgZGVidWcsIGZpeCwgYW5kIGltcHJvdmUgeW91ciBjb2RlIG9yIG90aGVyIHRleHQgZG9jdW1lbnRzLiBUaGlzIGFsbG93cyBDbGF1ZGVcbiAgICogdG8gZGlyZWN0bHkgaW50ZXJhY3Qgd2l0aCB5b3VyIGZpbGVzLCBwcm92aWRpbmcgaGFuZHMtb24gYXNzaXN0YW5jZSByYXRoZXIgdGhhbiBqdXN0IHN1Z2dlc3RpbmcgY2hhbmdlcy5cbiAgICpcbiAgICogTm90ZTogVGhpcyB2ZXJzaW9uIGRvZXMgbm90IHN1cHBvcnQgdGhlIFwidW5kb19lZGl0XCIgY29tbWFuZC5cbiAgICpcbiAgICogVG9vbCBuYW1lIG11c3QgYmUgYHN0cl9yZXBsYWNlX2Jhc2VkX2VkaXRfdG9vbGAuXG4gICAqL1xuICB0ZXh0RWRpdG9yXzIwMjUwNDI5LFxuICAvKipcbiAgICogQ3JlYXRlcyBhIHdlYiBzZWFyY2ggdG9vbCB0aGF0IGdpdmVzIENsYXVkZSBkaXJlY3QgYWNjZXNzIHRvIHJlYWwtdGltZSB3ZWIgY29udGVudC5cbiAgICpcbiAgICogVG9vbCBuYW1lIG11c3QgYmUgYHdlYl9zZWFyY2hgLlxuICAgKlxuICAgKiBAcGFyYW0gbWF4VXNlcyAtIE1heGltdW0gbnVtYmVyIG9mIHdlYiBzZWFyY2hlcyBDbGF1ZGUgY2FuIHBlcmZvcm0gZHVyaW5nIHRoZSBjb252ZXJzYXRpb24uXG4gICAqIEBwYXJhbSBhbGxvd2VkRG9tYWlucyAtIE9wdGlvbmFsIGxpc3Qgb2YgZG9tYWlucyB0aGF0IENsYXVkZSBpcyBhbGxvd2VkIHRvIHNlYXJjaC5cbiAgICogQHBhcmFtIGJsb2NrZWREb21haW5zIC0gT3B0aW9uYWwgbGlzdCBvZiBkb21haW5zIHRoYXQgQ2xhdWRlIHNob3VsZCBhdm9pZCB3aGVuIHNlYXJjaGluZy5cbiAgICogQHBhcmFtIHVzZXJMb2NhdGlvbiAtIE9wdGlvbmFsIHVzZXIgbG9jYXRpb24gaW5mb3JtYXRpb24gdG8gcHJvdmlkZSBnZW9ncmFwaGljYWxseSByZWxldmFudCBzZWFyY2ggcmVzdWx0cy5cbiAgICovXG4gIHdlYlNlYXJjaF8yMDI1MDMwNVxufTtcbmV4cG9ydCB7XG4gIEFudGhyb3BpY01lc3NhZ2VzTGFuZ3VhZ2VNb2RlbCxcbiAgYW50aHJvcGljVG9vbHMsXG4gIHByZXBhcmVUb29sc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/anthropic/dist/internal/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/gateway/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@ai-sdk/gateway/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GatewayAuthenticationError: () => (/* binding */ GatewayAuthenticationError),\n/* harmony export */   GatewayError: () => (/* binding */ GatewayError),\n/* harmony export */   GatewayInternalServerError: () => (/* binding */ GatewayInternalServerError),\n/* harmony export */   GatewayInvalidRequestError: () => (/* binding */ GatewayInvalidRequestError),\n/* harmony export */   GatewayModelNotFoundError: () => (/* binding */ GatewayModelNotFoundError),\n/* harmony export */   GatewayRateLimitError: () => (/* binding */ GatewayRateLimitError),\n/* harmony export */   GatewayResponseError: () => (/* binding */ GatewayResponseError),\n/* harmony export */   createGateway: () => (/* binding */ createGatewayProvider),\n/* harmony export */   createGatewayProvider: () => (/* binding */ createGatewayProvider),\n/* harmony export */   gateway: () => (/* binding */ gateway)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/index.js\");\n// src/gateway-provider.ts\n\n\n\n// src/errors/as-gateway-error.ts\n\n\n// src/errors/create-gateway-error.ts\n\n\n// src/errors/gateway-error.ts\nvar marker = \"vercel.ai.gateway.error\";\nvar symbol = Symbol.for(marker);\nvar _a, _b;\nvar GatewayError = class _GatewayError extends (_b = Error, _a = symbol, _b) {\n  constructor({\n    message,\n    statusCode = 500,\n    cause\n  }) {\n    super(message);\n    this[_a] = true;\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n  /**\n   * Checks if the given error is a Gateway Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is a Gateway Error, false otherwise.\n   */\n  static isInstance(error) {\n    return _GatewayError.hasMarker(error);\n  }\n  static hasMarker(error) {\n    return typeof error === \"object\" && error !== null && symbol in error && error[symbol] === true;\n  }\n};\n\n// src/errors/gateway-authentication-error.ts\nvar name = \"GatewayAuthenticationError\";\nvar marker2 = `vercel.ai.gateway.error.${name}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2, _b2;\nvar GatewayAuthenticationError = class _GatewayAuthenticationError extends (_b2 = GatewayError, _a2 = symbol2, _b2) {\n  constructor({\n    message = \"Authentication failed\",\n    statusCode = 401,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a2] = true;\n    // used in isInstance\n    this.name = name;\n    this.type = \"authentication_error\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol2 in error;\n  }\n  /**\n   * Creates a contextual error message when authentication fails\n   */\n  static createContextualError({\n    apiKeyProvided,\n    oidcTokenProvided,\n    message = \"Authentication failed\",\n    statusCode = 401,\n    cause\n  }) {\n    let contextualMessage;\n    if (apiKeyProvided) {\n      contextualMessage = `AI Gateway authentication failed: Invalid API key provided.\n\nThe token is expected to be provided via the 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.`;\n    } else if (oidcTokenProvided) {\n      contextualMessage = `AI Gateway authentication failed: Invalid OIDC token provided.\n\nThe token is expected to be provided via the 'VERCEL_OIDC_TOKEN' environment variable. It expires every 12 hours.\n- make sure your Vercel project settings have OIDC enabled\n- if running locally with 'vercel dev', the token is automatically obtained and refreshed\n- if running locally with your own dev server, run 'vercel env pull' to fetch the token\n- in production/preview, the token is automatically obtained and refreshed\n\nAlternative: Provide an API key via 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.`;\n    } else {\n      contextualMessage = `AI Gateway authentication failed: No authentication provided.\n\nProvide either an API key or OIDC token.\n\nAPI key instructions:\n\nThe token is expected to be provided via the 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.\n\nOIDC token instructions:\n\nThe token is expected to be provided via the 'VERCEL_OIDC_TOKEN' environment variable. It expires every 12 hours.\n- make sure your Vercel project settings have OIDC enabled\n- if running locally with 'vercel dev', the token is automatically obtained and refreshed\n- if running locally with your own dev server, run 'vercel env pull' to fetch the token\n- in production/preview, the token is automatically obtained and refreshed`;\n    }\n    return new _GatewayAuthenticationError({\n      message: contextualMessage,\n      statusCode,\n      cause\n    });\n  }\n};\n\n// src/errors/gateway-invalid-request-error.ts\nvar name2 = \"GatewayInvalidRequestError\";\nvar marker3 = `vercel.ai.gateway.error.${name2}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3, _b3;\nvar GatewayInvalidRequestError = class extends (_b3 = GatewayError, _a3 = symbol3, _b3) {\n  constructor({\n    message = \"Invalid request\",\n    statusCode = 400,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a3] = true;\n    // used in isInstance\n    this.name = name2;\n    this.type = \"invalid_request_error\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol3 in error;\n  }\n};\n\n// src/errors/gateway-rate-limit-error.ts\nvar name3 = \"GatewayRateLimitError\";\nvar marker4 = `vercel.ai.gateway.error.${name3}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4, _b4;\nvar GatewayRateLimitError = class extends (_b4 = GatewayError, _a4 = symbol4, _b4) {\n  constructor({\n    message = \"Rate limit exceeded\",\n    statusCode = 429,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a4] = true;\n    // used in isInstance\n    this.name = name3;\n    this.type = \"rate_limit_exceeded\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol4 in error;\n  }\n};\n\n// src/errors/gateway-model-not-found-error.ts\n\nvar name4 = \"GatewayModelNotFoundError\";\nvar marker5 = `vercel.ai.gateway.error.${name4}`;\nvar symbol5 = Symbol.for(marker5);\nvar modelNotFoundParamSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  modelId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nvar _a5, _b5;\nvar GatewayModelNotFoundError = class extends (_b5 = GatewayError, _a5 = symbol5, _b5) {\n  constructor({\n    message = \"Model not found\",\n    statusCode = 404,\n    modelId,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a5] = true;\n    // used in isInstance\n    this.name = name4;\n    this.type = \"model_not_found\";\n    this.modelId = modelId;\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol5 in error;\n  }\n};\n\n// src/errors/gateway-internal-server-error.ts\nvar name5 = \"GatewayInternalServerError\";\nvar marker6 = `vercel.ai.gateway.error.${name5}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6, _b6;\nvar GatewayInternalServerError = class extends (_b6 = GatewayError, _a6 = symbol6, _b6) {\n  constructor({\n    message = \"Internal server error\",\n    statusCode = 500,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a6] = true;\n    // used in isInstance\n    this.name = name5;\n    this.type = \"internal_server_error\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol6 in error;\n  }\n};\n\n// src/errors/gateway-response-error.ts\nvar name6 = \"GatewayResponseError\";\nvar marker7 = `vercel.ai.gateway.error.${name6}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7, _b7;\nvar GatewayResponseError = class extends (_b7 = GatewayError, _a7 = symbol7, _b7) {\n  constructor({\n    message = \"Invalid response from Gateway\",\n    statusCode = 502,\n    response,\n    validationError,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a7] = true;\n    // used in isInstance\n    this.name = name6;\n    this.type = \"response_error\";\n    this.response = response;\n    this.validationError = validationError;\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol7 in error;\n  }\n};\n\n// src/errors/create-gateway-error.ts\nfunction createGatewayErrorFromResponse({\n  response,\n  statusCode,\n  defaultMessage = \"Gateway request failed\",\n  cause,\n  authMethod\n}) {\n  const parseResult = gatewayErrorResponseSchema.safeParse(response);\n  if (!parseResult.success) {\n    return new GatewayResponseError({\n      message: `Invalid error response format: ${defaultMessage}`,\n      statusCode,\n      response,\n      validationError: parseResult.error,\n      cause\n    });\n  }\n  const validatedResponse = parseResult.data;\n  const errorType = validatedResponse.error.type;\n  const message = validatedResponse.error.message;\n  switch (errorType) {\n    case \"authentication_error\":\n      return GatewayAuthenticationError.createContextualError({\n        apiKeyProvided: authMethod === \"api-key\",\n        oidcTokenProvided: authMethod === \"oidc\",\n        statusCode,\n        cause\n      });\n    case \"invalid_request_error\":\n      return new GatewayInvalidRequestError({ message, statusCode, cause });\n    case \"rate_limit_exceeded\":\n      return new GatewayRateLimitError({ message, statusCode, cause });\n    case \"model_not_found\": {\n      const modelResult = modelNotFoundParamSchema.safeParse(\n        validatedResponse.error.param\n      );\n      return new GatewayModelNotFoundError({\n        message,\n        statusCode,\n        modelId: modelResult.success ? modelResult.data.modelId : void 0,\n        cause\n      });\n    }\n    case \"internal_server_error\":\n      return new GatewayInternalServerError({ message, statusCode, cause });\n    default:\n      return new GatewayInternalServerError({ message, statusCode, cause });\n  }\n}\nvar gatewayErrorResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n    param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown().nullish(),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()]).nullish()\n  })\n});\n\n// src/errors/as-gateway-error.ts\nfunction asGatewayError(error, authMethod) {\n  var _a8;\n  if (GatewayError.isInstance(error)) {\n    return error;\n  }\n  if (_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isInstance(error)) {\n    return createGatewayErrorFromResponse({\n      response: extractApiCallResponse(error),\n      statusCode: (_a8 = error.statusCode) != null ? _a8 : 500,\n      defaultMessage: \"Gateway request failed\",\n      cause: error,\n      authMethod\n    });\n  }\n  return createGatewayErrorFromResponse({\n    response: {},\n    statusCode: 500,\n    defaultMessage: error instanceof Error ? `Gateway request failed: ${error.message}` : \"Unknown Gateway error\",\n    cause: error,\n    authMethod\n  });\n}\n\n// src/errors/extract-api-call-response.ts\nfunction extractApiCallResponse(error) {\n  if (error.data !== void 0) {\n    return error.data;\n  }\n  if (error.responseBody != null) {\n    try {\n      return JSON.parse(error.responseBody);\n    } catch (e) {\n      return error.responseBody;\n    }\n  }\n  return {};\n}\n\n// src/errors/parse-auth-method.ts\n\nvar GATEWAY_AUTH_METHOD_HEADER = \"ai-gateway-auth-method\";\nfunction parseAuthMethod(headers) {\n  const result = gatewayAuthMethodSchema.safeParse(\n    headers[GATEWAY_AUTH_METHOD_HEADER]\n  );\n  return result.success ? result.data : void 0;\n}\nvar gatewayAuthMethodSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"api-key\"),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"oidc\")\n]);\n\n// src/gateway-fetch-metadata.ts\n\n\nvar GatewayFetchMetadata = class {\n  constructor(config) {\n    this.config = config;\n  }\n  async getAvailableModels() {\n    try {\n      const { value } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.getFromApi)({\n        url: `${this.config.baseURL}/config`,\n        headers: await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers()),\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(\n          gatewayFetchMetadataSchema\n        ),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n          errorToMessage: (data) => data\n        }),\n        fetch: this.config.fetch\n      });\n      return value;\n    } catch (error) {\n      throw asGatewayError(error);\n    }\n  }\n  async getCredits() {\n    try {\n      const baseUrl = new URL(this.config.baseURL);\n      const { value } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.getFromApi)({\n        url: `${baseUrl.origin}/v1/credits`,\n        headers: await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers()),\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(gatewayCreditsSchema),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n          errorToMessage: (data) => data\n        }),\n        fetch: this.config.fetch\n      });\n      return value;\n    } catch (error) {\n      throw asGatewayError(error);\n    }\n  }\n};\nvar gatewayLanguageModelSpecificationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  specificationVersion: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"v2\"),\n  provider: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  modelId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nvar gatewayLanguageModelPricingSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  input_cache_read: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  input_cache_write: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n}).transform(({ input, output, input_cache_read, input_cache_write }) => ({\n  input,\n  output,\n  ...input_cache_read ? { cachedInputTokens: input_cache_read } : {},\n  ...input_cache_write ? { cacheCreationInputTokens: input_cache_write } : {}\n}));\nvar gatewayLanguageModelEntrySchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  description: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  pricing: gatewayLanguageModelPricingSchema.nullish(),\n  specification: gatewayLanguageModelSpecificationSchema,\n  modelType: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"language\", \"embedding\", \"image\"]).nullish()\n});\nvar gatewayFetchMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  models: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(gatewayLanguageModelEntrySchema)\n});\nvar gatewayCreditsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  balance: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  total_used: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n}).transform(({ balance, total_used }) => ({\n  balance,\n  totalUsed: total_used\n}));\n\n// src/gateway-language-model.ts\n\n\nvar GatewayLanguageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = { \"*/*\": [/.*/] };\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs(options) {\n    const { abortSignal: _abortSignal, ...optionsWithoutSignal } = options;\n    return {\n      args: this.maybeEncodeFileParts(optionsWithoutSignal),\n      warnings: []\n    };\n  }\n  async doGenerate(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const { abortSignal } = options;\n    const resolvedHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers());\n    try {\n      const {\n        responseHeaders,\n        value: responseBody,\n        rawValue: rawResponse\n      } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n        url: this.getUrl(),\n        headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n          resolvedHeaders,\n          options.headers,\n          this.getModelConfigHeaders(this.modelId, false),\n          await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.o11yHeaders)\n        ),\n        body: args,\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any()),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n          errorToMessage: (data) => data\n        }),\n        ...abortSignal && { abortSignal },\n        fetch: this.config.fetch\n      });\n      return {\n        ...responseBody,\n        request: { body: args },\n        response: { headers: responseHeaders, body: rawResponse },\n        warnings\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const { abortSignal } = options;\n    const resolvedHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers());\n    try {\n      const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n        url: this.getUrl(),\n        headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n          resolvedHeaders,\n          options.headers,\n          this.getModelConfigHeaders(this.modelId, true),\n          await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.o11yHeaders)\n        ),\n        body: args,\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createEventSourceResponseHandler)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any()),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n          errorToMessage: (data) => data\n        }),\n        ...abortSignal && { abortSignal },\n        fetch: this.config.fetch\n      });\n      return {\n        stream: response.pipeThrough(\n          new TransformStream({\n            start(controller) {\n              if (warnings.length > 0) {\n                controller.enqueue({ type: \"stream-start\", warnings });\n              }\n            },\n            transform(chunk, controller) {\n              if (chunk.success) {\n                const streamPart = chunk.value;\n                if (streamPart.type === \"raw\" && !options.includeRawChunks) {\n                  return;\n                }\n                if (streamPart.type === \"response-metadata\" && streamPart.timestamp && typeof streamPart.timestamp === \"string\") {\n                  streamPart.timestamp = new Date(streamPart.timestamp);\n                }\n                controller.enqueue(streamPart);\n              } else {\n                controller.error(\n                  chunk.error\n                );\n              }\n            }\n          })\n        ),\n        request: { body: args },\n        response: { headers: responseHeaders }\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n  isFilePart(part) {\n    return part && typeof part === \"object\" && \"type\" in part && part.type === \"file\";\n  }\n  /**\n   * Encodes file parts in the prompt to base64. Mutates the passed options\n   * instance directly to avoid copying the file data.\n   * @param options - The options to encode.\n   * @returns The options with the file parts encoded.\n   */\n  maybeEncodeFileParts(options) {\n    for (const message of options.prompt) {\n      for (const part of message.content) {\n        if (this.isFilePart(part)) {\n          const filePart = part;\n          if (filePart.data instanceof Uint8Array) {\n            const buffer = Uint8Array.from(filePart.data);\n            const base64Data = Buffer.from(buffer).toString(\"base64\");\n            filePart.data = new URL(\n              `data:${filePart.mediaType || \"application/octet-stream\"};base64,${base64Data}`\n            );\n          }\n        }\n      }\n    }\n    return options;\n  }\n  getUrl() {\n    return `${this.config.baseURL}/language-model`;\n  }\n  getModelConfigHeaders(modelId, streaming) {\n    return {\n      \"ai-language-model-specification-version\": \"2\",\n      \"ai-language-model-id\": modelId,\n      \"ai-language-model-streaming\": String(streaming)\n    };\n  }\n};\n\n// src/gateway-embedding-model.ts\n\n\nvar GatewayEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    var _a8;\n    const resolvedHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers());\n    try {\n      const {\n        responseHeaders,\n        value: responseBody,\n        rawValue\n      } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n        url: this.getUrl(),\n        headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n          resolvedHeaders,\n          headers != null ? headers : {},\n          this.getModelConfigHeaders(),\n          await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.o11yHeaders)\n        ),\n        body: {\n          input: values.length === 1 ? values[0] : values,\n          ...providerOptions ? { providerOptions } : {}\n        },\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(\n          gatewayEmbeddingResponseSchema\n        ),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n          errorToMessage: (data) => data\n        }),\n        ...abortSignal && { abortSignal },\n        fetch: this.config.fetch\n      });\n      return {\n        embeddings: responseBody.embeddings,\n        usage: (_a8 = responseBody.usage) != null ? _a8 : void 0,\n        providerMetadata: responseBody.providerMetadata,\n        response: { headers: responseHeaders, body: rawValue }\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n  getUrl() {\n    return `${this.config.baseURL}/embedding-model`;\n  }\n  getModelConfigHeaders() {\n    return {\n      \"ai-embedding-model-specification-version\": \"2\",\n      \"ai-model-id\": this.modelId\n    };\n  }\n};\nvar gatewayEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  embeddings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number())),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number() }).nullish(),\n  providerMetadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown())).optional()\n});\n\n// src/vercel-environment.ts\nasync function getVercelOidcToken() {\n  var _a8, _b8;\n  const token = (_b8 = (_a8 = getContext().headers) == null ? void 0 : _a8[\"x-vercel-oidc-token\"]) != null ? _b8 : process.env.VERCEL_OIDC_TOKEN;\n  if (!token) {\n    throw new GatewayAuthenticationError({\n      message: \"OIDC token not available\",\n      statusCode: 401\n    });\n  }\n  return token;\n}\nasync function getVercelRequestId() {\n  var _a8;\n  return (_a8 = getContext().headers) == null ? void 0 : _a8[\"x-vercel-id\"];\n}\nvar SYMBOL_FOR_REQ_CONTEXT = Symbol.for(\"@vercel/request-context\");\nfunction getContext() {\n  var _a8, _b8, _c;\n  const fromSymbol = globalThis;\n  return (_c = (_b8 = (_a8 = fromSymbol[SYMBOL_FOR_REQ_CONTEXT]) == null ? void 0 : _a8.get) == null ? void 0 : _b8.call(_a8)) != null ? _c : {};\n}\n\n// src/gateway-provider.ts\n\n\n// src/version.ts\nvar VERSION =  true ? \"1.0.29\" : 0;\n\n// src/gateway-provider.ts\nvar AI_GATEWAY_PROTOCOL_VERSION = \"0.0.1\";\nfunction createGatewayProvider(options = {}) {\n  var _a8, _b8;\n  let pendingMetadata = null;\n  let metadataCache = null;\n  const cacheRefreshMillis = (_a8 = options.metadataCacheRefreshMillis) != null ? _a8 : 1e3 * 60 * 5;\n  let lastFetchTime = 0;\n  const baseURL = (_b8 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.withoutTrailingSlash)(options.baseURL)) != null ? _b8 : \"https://ai-gateway.vercel.sh/v1/ai\";\n  const getHeaders = async () => {\n    const auth = await getGatewayAuthToken(options);\n    if (auth) {\n      return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.withUserAgentSuffix)(\n        {\n          Authorization: `Bearer ${auth.token}`,\n          \"ai-gateway-protocol-version\": AI_GATEWAY_PROTOCOL_VERSION,\n          [GATEWAY_AUTH_METHOD_HEADER]: auth.authMethod,\n          ...options.headers\n        },\n        `ai-sdk/gateway/${VERSION}`\n      );\n    }\n    throw GatewayAuthenticationError.createContextualError({\n      apiKeyProvided: false,\n      oidcTokenProvided: false,\n      statusCode: 401\n    });\n  };\n  const createO11yHeaders = () => {\n    const deploymentId = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n      settingValue: void 0,\n      environmentVariableName: \"VERCEL_DEPLOYMENT_ID\"\n    });\n    const environment = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n      settingValue: void 0,\n      environmentVariableName: \"VERCEL_ENV\"\n    });\n    const region = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n      settingValue: void 0,\n      environmentVariableName: \"VERCEL_REGION\"\n    });\n    return async () => {\n      const requestId = await getVercelRequestId();\n      return {\n        ...deploymentId && { \"ai-o11y-deployment-id\": deploymentId },\n        ...environment && { \"ai-o11y-environment\": environment },\n        ...region && { \"ai-o11y-region\": region },\n        ...requestId && { \"ai-o11y-request-id\": requestId }\n      };\n    };\n  };\n  const createLanguageModel = (modelId) => {\n    return new GatewayLanguageModel(modelId, {\n      provider: \"gateway\",\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      o11yHeaders: createO11yHeaders()\n    });\n  };\n  const getAvailableModels = async () => {\n    var _a9, _b9, _c;\n    const now = (_c = (_b9 = (_a9 = options._internal) == null ? void 0 : _a9.currentDate) == null ? void 0 : _b9.call(_a9).getTime()) != null ? _c : Date.now();\n    if (!pendingMetadata || now - lastFetchTime > cacheRefreshMillis) {\n      lastFetchTime = now;\n      pendingMetadata = new GatewayFetchMetadata({\n        baseURL,\n        headers: getHeaders,\n        fetch: options.fetch\n      }).getAvailableModels().then((metadata) => {\n        metadataCache = metadata;\n        return metadata;\n      }).catch(async (error) => {\n        throw asGatewayError(error, parseAuthMethod(await getHeaders()));\n      });\n    }\n    return metadataCache ? Promise.resolve(metadataCache) : pendingMetadata;\n  };\n  const getCredits = async () => {\n    return new GatewayFetchMetadata({\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch\n    }).getCredits().catch(async (error) => {\n      throw asGatewayError(error, parseAuthMethod(await getHeaders()));\n    });\n  };\n  const provider = function(modelId) {\n    if (new.target) {\n      throw new Error(\n        \"The Gateway Provider model function cannot be called with the new keyword.\"\n      );\n    }\n    return createLanguageModel(modelId);\n  };\n  provider.getAvailableModels = getAvailableModels;\n  provider.getCredits = getCredits;\n  provider.imageModel = (modelId) => {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({ modelId, modelType: \"imageModel\" });\n  };\n  provider.languageModel = createLanguageModel;\n  provider.textEmbeddingModel = (modelId) => {\n    return new GatewayEmbeddingModel(modelId, {\n      provider: \"gateway\",\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      o11yHeaders: createO11yHeaders()\n    });\n  };\n  return provider;\n}\nvar gateway = createGatewayProvider();\nasync function getGatewayAuthToken(options) {\n  const apiKey = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n    settingValue: options.apiKey,\n    environmentVariableName: \"AI_GATEWAY_API_KEY\"\n  });\n  if (apiKey) {\n    return {\n      token: apiKey,\n      authMethod: \"api-key\"\n    };\n  }\n  try {\n    const oidcToken = await getVercelOidcToken();\n    return {\n      token: oidcToken,\n      authMethod: \"oidc\"\n    };\n  } catch (e) {\n    return null;\n  }\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/gateway/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/google-vertex/dist/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@ai-sdk/google-vertex/dist/index.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   createVertex: () => (/* binding */ createVertex2),\n/* harmony export */   vertex: () => (/* binding */ vertex)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\n/* harmony import */ var _ai_sdk_google_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ai-sdk/google/internal */ \"(rsc)/./node_modules/@ai-sdk/google/dist/internal/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/index.js\");\n// src/google-vertex-provider-node.ts\n\n\n// src/google-vertex-auth-google-auth-library.ts\n\nvar authInstance = null;\nvar authOptions = null;\nfunction getAuth(options) {\n  if (!authInstance || options !== authOptions) {\n    authInstance = new google_auth_library__WEBPACK_IMPORTED_MODULE_0__.GoogleAuth({\n      scopes: [\"https://www.googleapis.com/auth/cloud-platform\"],\n      ...options\n    });\n    authOptions = options;\n  }\n  return authInstance;\n}\nasync function generateAuthToken(options) {\n  const auth = getAuth(options || {});\n  const client = await auth.getClient();\n  const token = await client.getAccessToken();\n  return (token == null ? void 0 : token.token) || null;\n}\n\n// src/google-vertex-provider.ts\n\n\n\n// src/version.ts\nvar VERSION =  true ? \"3.0.29\" : 0;\n\n// src/google-vertex-embedding-model.ts\n\n\n\n\n// src/google-vertex-error.ts\n\n\nvar googleVertexErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.number().nullable(),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n    status: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.string()\n  })\n});\nvar googleVertexFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)(\n  {\n    errorSchema: googleVertexErrorDataSchema,\n    errorToMessage: (data) => data.error.message\n  }\n);\n\n// src/google-vertex-embedding-options.ts\n\nvar googleVertexEmbeddingProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.object({\n  /**\n   * Optional. Optional reduced dimension for the output embedding.\n   * If set, excessive values in the output embedding are truncated from the end.\n   */\n  outputDimensionality: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.number().optional(),\n  /**\n   * Optional. Specifies the task type for generating embeddings.\n   * Supported task types:\n   * - SEMANTIC_SIMILARITY: Optimized for text similarity.\n   * - CLASSIFICATION: Optimized for text classification.\n   * - CLUSTERING: Optimized for clustering texts based on similarity.\n   * - RETRIEVAL_DOCUMENT: Optimized for document retrieval.\n   * - RETRIEVAL_QUERY: Optimized for query-based retrieval.\n   * - QUESTION_ANSWERING: Optimized for answering questions.\n   * - FACT_VERIFICATION: Optimized for verifying factual information.\n   * - CODE_RETRIEVAL_QUERY: Optimized for retrieving code blocks based on natural language queries.\n   */\n  taskType: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z[\"enum\"]([\n    \"SEMANTIC_SIMILARITY\",\n    \"CLASSIFICATION\",\n    \"CLUSTERING\",\n    \"RETRIEVAL_DOCUMENT\",\n    \"RETRIEVAL_QUERY\",\n    \"QUESTION_ANSWERING\",\n    \"FACT_VERIFICATION\",\n    \"CODE_RETRIEVAL_QUERY\"\n  ]).optional(),\n  /**\n   * Optional. The title of the document being embedded.\n   * Only valid when task_type is set to 'RETRIEVAL_DOCUMENT'.\n   * Helps the model produce better embeddings by providing additional context.\n   */\n  title: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n  /**\n   * Optional. When set to true, input text will be truncated. When set to false,\n   * an error is returned if the input text is longer than the maximum length supported by the model. Defaults to true.\n   */\n  autoTruncate: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.boolean().optional()\n});\n\n// src/google-vertex-embedding-model.ts\nvar GoogleVertexEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    var _a;\n    const googleOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.parseProviderOptions)({\n      provider: \"google\",\n      providerOptions,\n      schema: googleVertexEmbeddingProviderOptions\n    })) != null ? _a : {};\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_3__.TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values\n      });\n    }\n    const mergedHeaders = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers),\n      headers\n    );\n    const url = `${this.config.baseURL}/models/${this.modelId}:predict`;\n    const {\n      responseHeaders,\n      value: response,\n      rawValue\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n      url,\n      headers: mergedHeaders,\n      body: {\n        instances: values.map((value) => ({\n          content: value,\n          task_type: googleOptions.taskType,\n          title: googleOptions.title\n        })),\n        parameters: {\n          outputDimensionality: googleOptions.outputDimensionality,\n          autoTruncate: googleOptions.autoTruncate\n        }\n      },\n      failedResponseHandler: googleVertexFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(\n        googleVertexTextEmbeddingResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      embeddings: response.predictions.map(\n        (prediction) => prediction.embeddings.values\n      ),\n      usage: {\n        tokens: response.predictions.reduce(\n          (tokenCount, prediction) => tokenCount + prediction.embeddings.statistics.token_count,\n          0\n        )\n      },\n      response: { headers: responseHeaders, body: rawValue }\n    };\n  }\n};\nvar googleVertexTextEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.object({\n  predictions: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.object({\n      embeddings: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        values: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.number()),\n        statistics: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.object({\n          token_count: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.number()\n        })\n      })\n    })\n  )\n});\n\n// src/google-vertex-image-model.ts\n\n\nvar GoogleVertexImageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n    // https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#parameter_list\n    this.maxImagesPerCall = 4;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doGenerate({\n    prompt,\n    n,\n    size,\n    aspectRatio,\n    seed,\n    providerOptions,\n    headers,\n    abortSignal\n  }) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const warnings = [];\n    if (size != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"size\",\n        details: \"This model does not support the `size` option. Use `aspectRatio` instead.\"\n      });\n    }\n    const vertexImageOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.parseProviderOptions)({\n      provider: \"vertex\",\n      providerOptions,\n      schema: vertexImageProviderOptionsSchema\n    });\n    const body = {\n      instances: [{ prompt }],\n      parameters: {\n        sampleCount: n,\n        ...aspectRatio != null ? { aspectRatio } : {},\n        ...seed != null ? { seed } : {},\n        ...vertexImageOptions != null ? vertexImageOptions : {}\n      }\n    };\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n      url: `${this.config.baseURL}/models/${this.modelId}:predict`,\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers), headers),\n      body,\n      failedResponseHandler: googleVertexFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(\n        vertexImageResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      images: (_e = (_d = response.predictions) == null ? void 0 : _d.map(\n        ({ bytesBase64Encoded }) => bytesBase64Encoded\n      )) != null ? _e : [],\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders\n      },\n      providerMetadata: {\n        vertex: {\n          images: (_g = (_f = response.predictions) == null ? void 0 : _f.map((prediction) => {\n            const {\n              // normalize revised prompt property\n              prompt: revisedPrompt\n            } = prediction;\n            return { ...revisedPrompt != null && { revisedPrompt } };\n          })) != null ? _g : []\n        }\n      }\n    };\n  }\n};\nvar vertexImageResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.object({\n  predictions: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.object({\n      bytesBase64Encoded: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n      mimeType: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n      prompt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.string().nullish()\n    })\n  ).nullish()\n});\nvar vertexImageProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.object({\n  negativePrompt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.string().nullish(),\n  personGeneration: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z[\"enum\"]([\"dont_allow\", \"allow_adult\", \"allow_all\"]).nullish(),\n  safetySetting: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z[\"enum\"]([\n    \"block_low_and_above\",\n    \"block_medium_and_above\",\n    \"block_only_high\",\n    \"block_none\"\n  ]).nullish(),\n  addWatermark: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.boolean().nullish(),\n  storageUri: zod_v4__WEBPACK_IMPORTED_MODULE_1__.z.string().nullish()\n});\n\n// src/google-vertex-tools.ts\n\nvar googleVertexTools = {\n  googleSearch: _ai_sdk_google_internal__WEBPACK_IMPORTED_MODULE_4__.googleTools.googleSearch,\n  urlContext: _ai_sdk_google_internal__WEBPACK_IMPORTED_MODULE_4__.googleTools.urlContext,\n  codeExecution: _ai_sdk_google_internal__WEBPACK_IMPORTED_MODULE_4__.googleTools.codeExecution\n};\n\n// src/google-vertex-provider.ts\nfunction createVertex(options = {}) {\n  const loadVertexProject = () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadSetting)({\n    settingValue: options.project,\n    settingName: \"project\",\n    environmentVariableName: \"GOOGLE_VERTEX_PROJECT\",\n    description: \"Google Vertex project\"\n  });\n  const loadVertexLocation = () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadSetting)({\n    settingValue: options.location,\n    settingName: \"location\",\n    environmentVariableName: \"GOOGLE_VERTEX_LOCATION\",\n    description: \"Google Vertex location\"\n  });\n  const loadBaseURL = () => {\n    var _a;\n    const region = loadVertexLocation();\n    const project = loadVertexProject();\n    const baseHost = `${region === \"global\" ? \"\" : region + \"-\"}aiplatform.googleapis.com`;\n    return (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.withoutTrailingSlash)(options.baseURL)) != null ? _a : `https://${baseHost}/v1/projects/${project}/locations/${region}/publishers/google`;\n  };\n  const createConfig = (name) => {\n    const getHeaders = async () => {\n      var _a;\n      const originalHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)((_a = options.headers) != null ? _a : {});\n      return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.withUserAgentSuffix)(\n        originalHeaders,\n        `ai-sdk/google-vertex/${VERSION}`\n      );\n    };\n    return {\n      provider: `google.vertex.${name}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      baseURL: loadBaseURL()\n    };\n  };\n  const createChatModel = (modelId) => {\n    var _a;\n    return new _ai_sdk_google_internal__WEBPACK_IMPORTED_MODULE_4__.GoogleGenerativeAILanguageModel(modelId, {\n      ...createConfig(\"chat\"),\n      generateId: (_a = options.generateId) != null ? _a : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.generateId,\n      supportedUrls: () => ({\n        \"*\": [\n          // HTTP URLs:\n          /^https?:\\/\\/.*$/,\n          // Google Cloud Storage URLs:\n          /^gs:\\/\\/.*$/\n        ]\n      })\n    });\n  };\n  const createEmbeddingModel = (modelId) => new GoogleVertexEmbeddingModel(modelId, createConfig(\"embedding\"));\n  const createImageModel = (modelId) => new GoogleVertexImageModel(modelId, createConfig(\"image\"));\n  const provider = function(modelId) {\n    if (new.target) {\n      throw new Error(\n        \"The Google Vertex AI model function cannot be called with the new keyword.\"\n      );\n    }\n    return createChatModel(modelId);\n  };\n  provider.languageModel = createChatModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n  provider.tools = googleVertexTools;\n  return provider;\n}\n\n// src/google-vertex-provider-node.ts\nfunction createVertex2(options = {}) {\n  return createVertex({\n    ...options,\n    headers: async () => ({\n      Authorization: `Bearer ${await generateAuthToken(\n        options.googleAuthOptions\n      )}`,\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(options.headers)\n    })\n  });\n}\nvar vertex = createVertex2();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/google-vertex/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/google/dist/internal/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@ai-sdk/google/dist/internal/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleGenerativeAILanguageModel: () => (/* binding */ GoogleGenerativeAILanguageModel),\n/* harmony export */   googleTools: () => (/* binding */ googleTools),\n/* harmony export */   safetyRatingSchema: () => (/* binding */ safetyRatingSchema)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/index.js\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n// src/google-generative-ai-language-model.ts\n\n\n\n// src/convert-json-schema-to-openapi-schema.ts\nfunction convertJSONSchemaToOpenAPISchema(jsonSchema) {\n  if (jsonSchema == null || isEmptyObjectSchema(jsonSchema)) {\n    return void 0;\n  }\n  if (typeof jsonSchema === \"boolean\") {\n    return { type: \"boolean\", properties: {} };\n  }\n  const {\n    type,\n    description,\n    required,\n    properties,\n    items,\n    allOf,\n    anyOf,\n    oneOf,\n    format,\n    const: constValue,\n    minLength,\n    enum: enumValues\n  } = jsonSchema;\n  const result = {};\n  if (description)\n    result.description = description;\n  if (required)\n    result.required = required;\n  if (format)\n    result.format = format;\n  if (constValue !== void 0) {\n    result.enum = [constValue];\n  }\n  if (type) {\n    if (Array.isArray(type)) {\n      if (type.includes(\"null\")) {\n        result.type = type.filter((t) => t !== \"null\")[0];\n        result.nullable = true;\n      } else {\n        result.type = type;\n      }\n    } else if (type === \"null\") {\n      result.type = \"null\";\n    } else {\n      result.type = type;\n    }\n  }\n  if (enumValues !== void 0) {\n    result.enum = enumValues;\n  }\n  if (properties != null) {\n    result.properties = Object.entries(properties).reduce(\n      (acc, [key, value]) => {\n        acc[key] = convertJSONSchemaToOpenAPISchema(value);\n        return acc;\n      },\n      {}\n    );\n  }\n  if (items) {\n    result.items = Array.isArray(items) ? items.map(convertJSONSchemaToOpenAPISchema) : convertJSONSchemaToOpenAPISchema(items);\n  }\n  if (allOf) {\n    result.allOf = allOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n  if (anyOf) {\n    if (anyOf.some(\n      (schema) => typeof schema === \"object\" && (schema == null ? void 0 : schema.type) === \"null\"\n    )) {\n      const nonNullSchemas = anyOf.filter(\n        (schema) => !(typeof schema === \"object\" && (schema == null ? void 0 : schema.type) === \"null\")\n      );\n      if (nonNullSchemas.length === 1) {\n        const converted = convertJSONSchemaToOpenAPISchema(nonNullSchemas[0]);\n        if (typeof converted === \"object\") {\n          result.nullable = true;\n          Object.assign(result, converted);\n        }\n      } else {\n        result.anyOf = nonNullSchemas.map(convertJSONSchemaToOpenAPISchema);\n        result.nullable = true;\n      }\n    } else {\n      result.anyOf = anyOf.map(convertJSONSchemaToOpenAPISchema);\n    }\n  }\n  if (oneOf) {\n    result.oneOf = oneOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n  if (minLength !== void 0) {\n    result.minLength = minLength;\n  }\n  return result;\n}\nfunction isEmptyObjectSchema(jsonSchema) {\n  return jsonSchema != null && typeof jsonSchema === \"object\" && jsonSchema.type === \"object\" && (jsonSchema.properties == null || Object.keys(jsonSchema.properties).length === 0) && !jsonSchema.additionalProperties;\n}\n\n// src/convert-to-google-generative-ai-messages.ts\n\n\nfunction convertToGoogleGenerativeAIMessages(prompt, options) {\n  var _a;\n  const systemInstructionParts = [];\n  const contents = [];\n  let systemMessagesAllowed = true;\n  const isGemmaModel = (_a = options == null ? void 0 : options.isGemmaModel) != null ? _a : false;\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        if (!systemMessagesAllowed) {\n          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n            functionality: \"system messages are only supported at the beginning of the conversation\"\n          });\n        }\n        systemInstructionParts.push({ text: content });\n        break;\n      }\n      case \"user\": {\n        systemMessagesAllowed = false;\n        const parts = [];\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              parts.push({ text: part.text });\n              break;\n            }\n            case \"file\": {\n              const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n              parts.push(\n                part.data instanceof URL ? {\n                  fileData: {\n                    mimeType: mediaType,\n                    fileUri: part.data.toString()\n                  }\n                } : {\n                  inlineData: {\n                    mimeType: mediaType,\n                    data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertToBase64)(part.data)\n                  }\n                }\n              );\n              break;\n            }\n          }\n        }\n        contents.push({ role: \"user\", parts });\n        break;\n      }\n      case \"assistant\": {\n        systemMessagesAllowed = false;\n        contents.push({\n          role: \"model\",\n          parts: content.map((part) => {\n            var _a2, _b, _c, _d, _e, _f;\n            switch (part.type) {\n              case \"text\": {\n                return part.text.length === 0 ? void 0 : {\n                  text: part.text,\n                  thoughtSignature: (_b = (_a2 = part.providerOptions) == null ? void 0 : _a2.google) == null ? void 0 : _b.thoughtSignature\n                };\n              }\n              case \"reasoning\": {\n                return part.text.length === 0 ? void 0 : {\n                  text: part.text,\n                  thought: true,\n                  thoughtSignature: (_d = (_c = part.providerOptions) == null ? void 0 : _c.google) == null ? void 0 : _d.thoughtSignature\n                };\n              }\n              case \"file\": {\n                if (part.mediaType !== \"image/png\") {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                    functionality: \"Only PNG images are supported in assistant messages\"\n                  });\n                }\n                if (part.data instanceof URL) {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                    functionality: \"File data URLs in assistant messages are not supported\"\n                  });\n                }\n                return {\n                  inlineData: {\n                    mimeType: part.mediaType,\n                    data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertToBase64)(part.data)\n                  }\n                };\n              }\n              case \"tool-call\": {\n                return {\n                  functionCall: {\n                    name: part.toolName,\n                    args: part.input\n                  },\n                  thoughtSignature: (_f = (_e = part.providerOptions) == null ? void 0 : _e.google) == null ? void 0 : _f.thoughtSignature\n                };\n              }\n            }\n          }).filter((part) => part !== void 0)\n        });\n        break;\n      }\n      case \"tool\": {\n        systemMessagesAllowed = false;\n        const parts = [];\n        for (const part of content) {\n          const output = part.output;\n          if (output.type === \"content\") {\n            for (const contentPart of output.value) {\n              switch (contentPart.type) {\n                case \"text\":\n                  parts.push({\n                    functionResponse: {\n                      name: part.toolName,\n                      response: {\n                        name: part.toolName,\n                        content: contentPart.text\n                      }\n                    }\n                  });\n                  break;\n                case \"media\":\n                  parts.push(\n                    {\n                      inlineData: {\n                        mimeType: contentPart.mediaType,\n                        data: contentPart.data\n                      }\n                    },\n                    {\n                      text: \"Tool executed successfully and returned this image as a response\"\n                    }\n                  );\n                  break;\n                default:\n                  parts.push({ text: JSON.stringify(contentPart) });\n                  break;\n              }\n            }\n          } else {\n            parts.push({\n              functionResponse: {\n                name: part.toolName,\n                response: {\n                  name: part.toolName,\n                  content: output.value\n                }\n              }\n            });\n          }\n        }\n        contents.push({\n          role: \"user\",\n          parts\n        });\n        break;\n      }\n    }\n  }\n  if (isGemmaModel && systemInstructionParts.length > 0 && contents.length > 0 && contents[0].role === \"user\") {\n    const systemText = systemInstructionParts.map((part) => part.text).join(\"\\n\\n\");\n    contents[0].parts.unshift({ text: systemText + \"\\n\\n\" });\n  }\n  return {\n    systemInstruction: systemInstructionParts.length > 0 && !isGemmaModel ? { parts: systemInstructionParts } : void 0,\n    contents\n  };\n}\n\n// src/get-model-path.ts\nfunction getModelPath(modelId) {\n  return modelId.includes(\"/\") ? modelId : `models/${modelId}`;\n}\n\n// src/google-error.ts\n\n\nvar googleErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullable(),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n  })\n});\nvar googleFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n  errorSchema: googleErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/google-generative-ai-options.ts\n\nvar googleGenerativeAIProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  responseModalities: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"TEXT\", \"IMAGE\"])).optional(),\n  thinkingConfig: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    thinkingBudget: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n    includeThoughts: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n  }).optional(),\n  /**\n  Optional.\n  The name of the cached content used as context to serve the prediction.\n  Format: cachedContents/{cachedContent}\n     */\n  cachedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  /**\n   * Optional. Enable structured output. Default is true.\n   *\n   * This is useful when the JSON Schema contains elements that are\n   * not supported by the OpenAPI schema version that\n   * Google Generative AI uses. You can use this to disable\n   * structured outputs if you need to.\n   */\n  structuredOutputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  /**\n  Optional. A list of unique safety settings for blocking unsafe content.\n   */\n  safetySettings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      category: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\n        \"HARM_CATEGORY_UNSPECIFIED\",\n        \"HARM_CATEGORY_HATE_SPEECH\",\n        \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        \"HARM_CATEGORY_HARASSMENT\",\n        \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n        \"HARM_CATEGORY_CIVIC_INTEGRITY\"\n      ]),\n      threshold: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\n        \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n        \"BLOCK_LOW_AND_ABOVE\",\n        \"BLOCK_MEDIUM_AND_ABOVE\",\n        \"BLOCK_ONLY_HIGH\",\n        \"BLOCK_NONE\",\n        \"OFF\"\n      ])\n    })\n  ).optional(),\n  threshold: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\n    \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\",\n    \"OFF\"\n  ]).optional(),\n  /**\n   * Optional. Enables timestamp understanding for audio-only files.\n   *\n   * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/audio-understanding\n   */\n  audioTimestamp: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  /**\n   * Optional. Defines labels used in billing reports. Available on Vertex AI only.\n   *\n   * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/add-labels-to-api-calls\n   */\n  labels: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional()\n});\n\n// src/google-prepare-tools.ts\n\nfunction prepareTools({\n  tools,\n  toolChoice,\n  modelId\n}) {\n  var _a;\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  const isGemini2 = modelId.includes(\"gemini-2\");\n  const supportsDynamicRetrieval = modelId.includes(\"gemini-1.5-flash\") && !modelId.includes(\"-8b\");\n  if (tools == null) {\n    return { tools: void 0, toolConfig: void 0, toolWarnings };\n  }\n  const hasFunctionTools = tools.some((tool) => tool.type === \"function\");\n  const hasProviderDefinedTools = tools.some(\n    (tool) => tool.type === \"provider-defined\"\n  );\n  if (hasFunctionTools && hasProviderDefinedTools) {\n    toolWarnings.push({\n      type: \"unsupported-tool\",\n      tool: tools.find((tool) => tool.type === \"function\"),\n      details: \"Cannot mix function tools with provider-defined tools in the same request. Please use either function tools or provider-defined tools, but not both.\"\n    });\n  }\n  if (hasProviderDefinedTools) {\n    const googleTools2 = {};\n    const providerDefinedTools = tools.filter(\n      (tool) => tool.type === \"provider-defined\"\n    );\n    providerDefinedTools.forEach((tool) => {\n      switch (tool.id) {\n        case \"google.google_search\":\n          if (isGemini2) {\n            googleTools2.googleSearch = {};\n          } else if (supportsDynamicRetrieval) {\n            googleTools2.googleSearchRetrieval = {\n              dynamicRetrievalConfig: {\n                mode: tool.args.mode,\n                dynamicThreshold: tool.args.dynamicThreshold\n              }\n            };\n          } else {\n            googleTools2.googleSearchRetrieval = {};\n          }\n          break;\n        case \"google.url_context\":\n          if (isGemini2) {\n            googleTools2.urlContext = {};\n          } else {\n            toolWarnings.push({\n              type: \"unsupported-tool\",\n              tool,\n              details: \"The URL context tool is not supported with other Gemini models than Gemini 2.\"\n            });\n          }\n          break;\n        case \"google.code_execution\":\n          if (isGemini2) {\n            googleTools2.codeExecution = {};\n          } else {\n            toolWarnings.push({\n              type: \"unsupported-tool\",\n              tool,\n              details: \"The code execution tools is not supported with other Gemini models than Gemini 2.\"\n            });\n          }\n          break;\n        default:\n          toolWarnings.push({ type: \"unsupported-tool\", tool });\n          break;\n      }\n    });\n    return {\n      tools: Object.keys(googleTools2).length > 0 ? googleTools2 : void 0,\n      toolConfig: void 0,\n      toolWarnings\n    };\n  }\n  const functionDeclarations = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        functionDeclarations.push({\n          name: tool.name,\n          description: (_a = tool.description) != null ? _a : \"\",\n          parameters: convertJSONSchemaToOpenAPISchema(tool.inputSchema)\n        });\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return {\n      tools: { functionDeclarations },\n      toolConfig: void 0,\n      toolWarnings\n    };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: \"AUTO\" } },\n        toolWarnings\n      };\n    case \"none\":\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: \"NONE\" } },\n        toolWarnings\n      };\n    case \"required\":\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: \"ANY\" } },\n        toolWarnings\n      };\n    case \"tool\":\n      return {\n        tools: { functionDeclarations },\n        toolConfig: {\n          functionCallingConfig: {\n            mode: \"ANY\",\n            allowedFunctionNames: [toolChoice.toolName]\n          }\n        },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/map-google-generative-ai-finish-reason.ts\nfunction mapGoogleGenerativeAIFinishReason({\n  finishReason,\n  hasToolCalls\n}) {\n  switch (finishReason) {\n    case \"STOP\":\n      return hasToolCalls ? \"tool-calls\" : \"stop\";\n    case \"MAX_TOKENS\":\n      return \"length\";\n    case \"IMAGE_SAFETY\":\n    case \"RECITATION\":\n    case \"SAFETY\":\n    case \"BLOCKLIST\":\n    case \"PROHIBITED_CONTENT\":\n    case \"SPII\":\n      return \"content-filter\";\n    case \"FINISH_REASON_UNSPECIFIED\":\n    case \"OTHER\":\n      return \"other\";\n    case \"MALFORMED_FUNCTION_CALL\":\n      return \"error\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/tool/google-search.ts\n\n\nvar groundingChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  web: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ uri: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() }).nullish(),\n  retrievedContext: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ uri: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() }).nullish()\n});\nvar groundingMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  webSearchQueries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()).nullish(),\n  retrievalQueries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()).nullish(),\n  searchEntryPoint: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ renderedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() }).nullish(),\n  groundingChunks: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(groundingChunkSchema).nullish(),\n  groundingSupports: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      segment: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        startIndex: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n        endIndex: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n      }),\n      segment_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n      groundingChunkIndices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()).nullish(),\n      supportChunkIndices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()).nullish(),\n      confidenceScores: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()).nullish(),\n      confidenceScore: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()).nullish()\n    })\n  ).nullish(),\n  retrievalMetadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      webDynamicRetrievalScore: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({})\n  ]).nullish()\n});\nvar googleSearch = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createProviderDefinedToolFactory)({\n  id: \"google.google_search\",\n  name: \"google_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    mode: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"MODE_DYNAMIC\", \"MODE_UNSPECIFIED\"]).default(\"MODE_UNSPECIFIED\"),\n    dynamicThreshold: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().default(1)\n  })\n});\n\n// src/tool/url-context.ts\n\n\nvar urlMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  retrievedUrl: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  urlRetrievalStatus: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nvar urlContextMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  urlMetadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(urlMetadataSchema)\n});\nvar urlContext = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createProviderDefinedToolFactory)({\n  id: \"google.url_context\",\n  name: \"url_context\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({})\n});\n\n// src/google-generative-ai-language-model.ts\nvar GoogleGenerativeAILanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    var _a;\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = (_a = config.generateId) != null ? _a : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.generateId;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  get supportedUrls() {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).supportedUrls) == null ? void 0 : _b.call(_a)) != null ? _c : {};\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b;\n    const warnings = [];\n    const googleOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.parseProviderOptions)({\n      provider: \"google\",\n      providerOptions,\n      schema: googleGenerativeAIProviderOptions\n    });\n    if (((_a = googleOptions == null ? void 0 : googleOptions.thinkingConfig) == null ? void 0 : _a.includeThoughts) === true && !this.config.provider.startsWith(\"google.vertex.\")) {\n      warnings.push({\n        type: \"other\",\n        message: `The 'includeThoughts' option is only supported with the Google Vertex provider and might not be supported or could behave unexpectedly with the current Google provider (${this.config.provider}).`\n      });\n    }\n    const isGemmaModel = this.modelId.toLowerCase().startsWith(\"gemma-\");\n    const { contents, systemInstruction } = convertToGoogleGenerativeAIMessages(\n      prompt,\n      { isGemmaModel }\n    );\n    const {\n      tools: googleTools2,\n      toolConfig: googleToolConfig,\n      toolWarnings\n    } = prepareTools({\n      tools,\n      toolChoice,\n      modelId: this.modelId\n    });\n    return {\n      args: {\n        generationConfig: {\n          // standardized settings:\n          maxOutputTokens,\n          temperature,\n          topK,\n          topP,\n          frequencyPenalty,\n          presencePenalty,\n          stopSequences,\n          seed,\n          // response format:\n          responseMimeType: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" ? \"application/json\" : void 0,\n          responseSchema: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null && // Google GenAI does not support all OpenAPI Schema features,\n          // so this is needed as an escape hatch:\n          // TODO convert into provider option\n          ((_b = googleOptions == null ? void 0 : googleOptions.structuredOutputs) != null ? _b : true) ? convertJSONSchemaToOpenAPISchema(responseFormat.schema) : void 0,\n          ...(googleOptions == null ? void 0 : googleOptions.audioTimestamp) && {\n            audioTimestamp: googleOptions.audioTimestamp\n          },\n          // provider options:\n          responseModalities: googleOptions == null ? void 0 : googleOptions.responseModalities,\n          thinkingConfig: googleOptions == null ? void 0 : googleOptions.thinkingConfig\n        },\n        contents,\n        systemInstruction: isGemmaModel ? void 0 : systemInstruction,\n        safetySettings: googleOptions == null ? void 0 : googleOptions.safetySettings,\n        tools: googleTools2,\n        toolConfig: googleToolConfig,\n        cachedContent: googleOptions == null ? void 0 : googleOptions.cachedContent,\n        labels: googleOptions == null ? void 0 : googleOptions.labels\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;\n    const { args, warnings } = await this.getArgs(options);\n    const body = JSON.stringify(args);\n    const mergedHeaders = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers),\n      options.headers\n    );\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n      url: `${this.config.baseURL}/${getModelPath(\n        this.modelId\n      )}:generateContent`,\n      headers: mergedHeaders,\n      body: args,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(responseSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const candidate = response.candidates[0];\n    const content = [];\n    const parts = (_b = (_a = candidate.content) == null ? void 0 : _a.parts) != null ? _b : [];\n    const usageMetadata = response.usageMetadata;\n    let lastCodeExecutionToolCallId;\n    for (const part of parts) {\n      if (\"executableCode\" in part && ((_c = part.executableCode) == null ? void 0 : _c.code)) {\n        const toolCallId = this.config.generateId();\n        lastCodeExecutionToolCallId = toolCallId;\n        content.push({\n          type: \"tool-call\",\n          toolCallId,\n          toolName: \"code_execution\",\n          input: JSON.stringify(part.executableCode),\n          providerExecuted: true\n        });\n      } else if (\"codeExecutionResult\" in part && part.codeExecutionResult) {\n        content.push({\n          type: \"tool-result\",\n          // Assumes a result directly follows its corresponding call part.\n          toolCallId: lastCodeExecutionToolCallId,\n          toolName: \"code_execution\",\n          result: {\n            outcome: part.codeExecutionResult.outcome,\n            output: part.codeExecutionResult.output\n          },\n          providerExecuted: true\n        });\n        lastCodeExecutionToolCallId = void 0;\n      } else if (\"text\" in part && part.text != null && part.text.length > 0) {\n        content.push({\n          type: part.thought === true ? \"reasoning\" : \"text\",\n          text: part.text,\n          providerMetadata: part.thoughtSignature ? { google: { thoughtSignature: part.thoughtSignature } } : void 0\n        });\n      } else if (\"functionCall\" in part) {\n        content.push({\n          type: \"tool-call\",\n          toolCallId: this.config.generateId(),\n          toolName: part.functionCall.name,\n          input: JSON.stringify(part.functionCall.args),\n          providerMetadata: part.thoughtSignature ? { google: { thoughtSignature: part.thoughtSignature } } : void 0\n        });\n      } else if (\"inlineData\" in part) {\n        content.push({\n          type: \"file\",\n          data: part.inlineData.data,\n          mediaType: part.inlineData.mimeType\n        });\n      }\n    }\n    const sources = (_d = extractSources({\n      groundingMetadata: candidate.groundingMetadata,\n      generateId: this.config.generateId\n    })) != null ? _d : [];\n    for (const source of sources) {\n      content.push(source);\n    }\n    return {\n      content,\n      finishReason: mapGoogleGenerativeAIFinishReason({\n        finishReason: candidate.finishReason,\n        hasToolCalls: content.some((part) => part.type === \"tool-call\")\n      }),\n      usage: {\n        inputTokens: (_e = usageMetadata == null ? void 0 : usageMetadata.promptTokenCount) != null ? _e : void 0,\n        outputTokens: (_f = usageMetadata == null ? void 0 : usageMetadata.candidatesTokenCount) != null ? _f : void 0,\n        totalTokens: (_g = usageMetadata == null ? void 0 : usageMetadata.totalTokenCount) != null ? _g : void 0,\n        reasoningTokens: (_h = usageMetadata == null ? void 0 : usageMetadata.thoughtsTokenCount) != null ? _h : void 0,\n        cachedInputTokens: (_i = usageMetadata == null ? void 0 : usageMetadata.cachedContentTokenCount) != null ? _i : void 0\n      },\n      warnings,\n      providerMetadata: {\n        google: {\n          promptFeedback: (_j = response.promptFeedback) != null ? _j : null,\n          groundingMetadata: (_k = candidate.groundingMetadata) != null ? _k : null,\n          urlContextMetadata: (_l = candidate.urlContextMetadata) != null ? _l : null,\n          safetyRatings: (_m = candidate.safetyRatings) != null ? _m : null,\n          usageMetadata: usageMetadata != null ? usageMetadata : null\n        }\n      },\n      request: { body },\n      response: {\n        // TODO timestamp, model id, id\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = JSON.stringify(args);\n    const headers = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers),\n      options.headers\n    );\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n      url: `${this.config.baseURL}/${getModelPath(\n        this.modelId\n      )}:streamGenerateContent?alt=sse`,\n      headers,\n      body: args,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createEventSourceResponseHandler)(chunkSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let providerMetadata = void 0;\n    const generateId2 = this.config.generateId;\n    let hasToolCalls = false;\n    let currentTextBlockId = null;\n    let currentReasoningBlockId = null;\n    let blockCounter = 0;\n    const emittedSourceUrls = /* @__PURE__ */ new Set();\n    let lastCodeExecutionToolCallId;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            const usageMetadata = value.usageMetadata;\n            if (usageMetadata != null) {\n              usage.inputTokens = (_a = usageMetadata.promptTokenCount) != null ? _a : void 0;\n              usage.outputTokens = (_b = usageMetadata.candidatesTokenCount) != null ? _b : void 0;\n              usage.totalTokens = (_c = usageMetadata.totalTokenCount) != null ? _c : void 0;\n              usage.reasoningTokens = (_d = usageMetadata.thoughtsTokenCount) != null ? _d : void 0;\n              usage.cachedInputTokens = (_e = usageMetadata.cachedContentTokenCount) != null ? _e : void 0;\n            }\n            const candidate = (_f = value.candidates) == null ? void 0 : _f[0];\n            if (candidate == null) {\n              return;\n            }\n            const content = candidate.content;\n            const sources = extractSources({\n              groundingMetadata: candidate.groundingMetadata,\n              generateId: generateId2\n            });\n            if (sources != null) {\n              for (const source of sources) {\n                if (source.sourceType === \"url\" && !emittedSourceUrls.has(source.url)) {\n                  emittedSourceUrls.add(source.url);\n                  controller.enqueue(source);\n                }\n              }\n            }\n            if (content != null) {\n              const parts = (_g = content.parts) != null ? _g : [];\n              for (const part of parts) {\n                if (\"executableCode\" in part && ((_h = part.executableCode) == null ? void 0 : _h.code)) {\n                  const toolCallId = generateId2();\n                  lastCodeExecutionToolCallId = toolCallId;\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId,\n                    toolName: \"code_execution\",\n                    input: JSON.stringify(part.executableCode),\n                    providerExecuted: true\n                  });\n                  hasToolCalls = true;\n                } else if (\"codeExecutionResult\" in part && part.codeExecutionResult) {\n                  const toolCallId = lastCodeExecutionToolCallId;\n                  if (toolCallId) {\n                    controller.enqueue({\n                      type: \"tool-result\",\n                      toolCallId,\n                      toolName: \"code_execution\",\n                      result: {\n                        outcome: part.codeExecutionResult.outcome,\n                        output: part.codeExecutionResult.output\n                      },\n                      providerExecuted: true\n                    });\n                    lastCodeExecutionToolCallId = void 0;\n                  }\n                } else if (\"text\" in part && part.text != null && part.text.length > 0) {\n                  if (part.thought === true) {\n                    if (currentTextBlockId !== null) {\n                      controller.enqueue({\n                        type: \"text-end\",\n                        id: currentTextBlockId\n                      });\n                      currentTextBlockId = null;\n                    }\n                    if (currentReasoningBlockId === null) {\n                      currentReasoningBlockId = String(blockCounter++);\n                      controller.enqueue({\n                        type: \"reasoning-start\",\n                        id: currentReasoningBlockId,\n                        providerMetadata: part.thoughtSignature ? {\n                          google: {\n                            thoughtSignature: part.thoughtSignature\n                          }\n                        } : void 0\n                      });\n                    }\n                    controller.enqueue({\n                      type: \"reasoning-delta\",\n                      id: currentReasoningBlockId,\n                      delta: part.text,\n                      providerMetadata: part.thoughtSignature ? {\n                        google: { thoughtSignature: part.thoughtSignature }\n                      } : void 0\n                    });\n                  } else {\n                    if (currentReasoningBlockId !== null) {\n                      controller.enqueue({\n                        type: \"reasoning-end\",\n                        id: currentReasoningBlockId\n                      });\n                      currentReasoningBlockId = null;\n                    }\n                    if (currentTextBlockId === null) {\n                      currentTextBlockId = String(blockCounter++);\n                      controller.enqueue({\n                        type: \"text-start\",\n                        id: currentTextBlockId,\n                        providerMetadata: part.thoughtSignature ? {\n                          google: {\n                            thoughtSignature: part.thoughtSignature\n                          }\n                        } : void 0\n                      });\n                    }\n                    controller.enqueue({\n                      type: \"text-delta\",\n                      id: currentTextBlockId,\n                      delta: part.text,\n                      providerMetadata: part.thoughtSignature ? {\n                        google: { thoughtSignature: part.thoughtSignature }\n                      } : void 0\n                    });\n                  }\n                }\n              }\n              const inlineDataParts = getInlineDataParts(content.parts);\n              if (inlineDataParts != null) {\n                for (const part of inlineDataParts) {\n                  controller.enqueue({\n                    type: \"file\",\n                    mediaType: part.inlineData.mimeType,\n                    data: part.inlineData.data\n                  });\n                }\n              }\n              const toolCallDeltas = getToolCallsFromParts({\n                parts: content.parts,\n                generateId: generateId2\n              });\n              if (toolCallDeltas != null) {\n                for (const toolCall of toolCallDeltas) {\n                  controller.enqueue({\n                    type: \"tool-input-start\",\n                    id: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    providerMetadata: toolCall.providerMetadata\n                  });\n                  controller.enqueue({\n                    type: \"tool-input-delta\",\n                    id: toolCall.toolCallId,\n                    delta: toolCall.args,\n                    providerMetadata: toolCall.providerMetadata\n                  });\n                  controller.enqueue({\n                    type: \"tool-input-end\",\n                    id: toolCall.toolCallId,\n                    providerMetadata: toolCall.providerMetadata\n                  });\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    input: toolCall.args,\n                    providerMetadata: toolCall.providerMetadata\n                  });\n                  hasToolCalls = true;\n                }\n              }\n            }\n            if (candidate.finishReason != null) {\n              finishReason = mapGoogleGenerativeAIFinishReason({\n                finishReason: candidate.finishReason,\n                hasToolCalls\n              });\n              providerMetadata = {\n                google: {\n                  promptFeedback: (_i = value.promptFeedback) != null ? _i : null,\n                  groundingMetadata: (_j = candidate.groundingMetadata) != null ? _j : null,\n                  urlContextMetadata: (_k = candidate.urlContextMetadata) != null ? _k : null,\n                  safetyRatings: (_l = candidate.safetyRatings) != null ? _l : null\n                }\n              };\n              if (usageMetadata != null) {\n                providerMetadata.google.usageMetadata = usageMetadata;\n              }\n            }\n          },\n          flush(controller) {\n            if (currentTextBlockId !== null) {\n              controller.enqueue({\n                type: \"text-end\",\n                id: currentTextBlockId\n              });\n            }\n            if (currentReasoningBlockId !== null) {\n              controller.enqueue({\n                type: \"reasoning-end\",\n                id: currentReasoningBlockId\n              });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              providerMetadata\n            });\n          }\n        })\n      ),\n      response: { headers: responseHeaders },\n      request: { body }\n    };\n  }\n};\nfunction getToolCallsFromParts({\n  parts,\n  generateId: generateId2\n}) {\n  const functionCallParts = parts == null ? void 0 : parts.filter(\n    (part) => \"functionCall\" in part\n  );\n  return functionCallParts == null || functionCallParts.length === 0 ? void 0 : functionCallParts.map((part) => ({\n    type: \"tool-call\",\n    toolCallId: generateId2(),\n    toolName: part.functionCall.name,\n    args: JSON.stringify(part.functionCall.args),\n    providerMetadata: part.thoughtSignature ? { google: { thoughtSignature: part.thoughtSignature } } : void 0\n  }));\n}\nfunction getInlineDataParts(parts) {\n  return parts == null ? void 0 : parts.filter(\n    (part) => \"inlineData\" in part\n  );\n}\nfunction extractSources({\n  groundingMetadata,\n  generateId: generateId2\n}) {\n  var _a;\n  return (_a = groundingMetadata == null ? void 0 : groundingMetadata.groundingChunks) == null ? void 0 : _a.filter(\n    (chunk) => chunk.web != null\n  ).map((chunk) => ({\n    type: \"source\",\n    sourceType: \"url\",\n    id: generateId2(),\n    url: chunk.web.uri,\n    title: chunk.web.title\n  }));\n}\nvar contentSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  parts: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n      // note: order matters since text can be fully empty\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        functionCall: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n          args: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown()\n        }),\n        thoughtSignature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        inlineData: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          mimeType: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n          data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        })\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        executableCode: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n          code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        }).nullish(),\n        codeExecutionResult: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          outcome: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n          output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        }).nullish(),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n        thought: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().nullish(),\n        thoughtSignature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n      })\n    ])\n  ).nullish()\n});\nvar safetyRatingSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  category: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  probability: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  probabilityScore: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n  severity: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  severityScore: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n  blocked: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().nullish()\n});\nvar usageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  cachedContentTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n  thoughtsTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n  promptTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n  candidatesTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n  totalTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish()\n});\nvar responseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  candidates: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      content: contentSchema.nullish().or(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({}).strict()),\n      finishReason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n      safetyRatings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(safetyRatingSchema).nullish(),\n      groundingMetadata: groundingMetadataSchema.nullish(),\n      urlContextMetadata: urlContextMetadataSchema.nullish()\n    })\n  ),\n  usageMetadata: usageSchema.nullish(),\n  promptFeedback: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    blockReason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n    safetyRatings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(safetyRatingSchema).nullish()\n  }).nullish()\n});\nvar chunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  candidates: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      content: contentSchema.nullish(),\n      finishReason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n      safetyRatings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(safetyRatingSchema).nullish(),\n      groundingMetadata: groundingMetadataSchema.nullish(),\n      urlContextMetadata: urlContextMetadataSchema.nullish()\n    })\n  ).nullish(),\n  usageMetadata: usageSchema.nullish(),\n  promptFeedback: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    blockReason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n    safetyRatings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(safetyRatingSchema).nullish()\n  }).nullish()\n});\n\n// src/tool/code-execution.ts\n\n\nvar codeExecution = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"google.code_execution\",\n  name: \"code_execution\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\"The programming language of the code.\"),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\"The code to be executed.\")\n  }),\n  outputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    outcome: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().describe('The outcome of the execution (e.g., \"OUTCOME_OK\").'),\n    output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\"The output from the code execution.\")\n  })\n});\n\n// src/google-tools.ts\nvar googleTools = {\n  /**\n   * Creates a Google search tool that gives Google direct access to real-time web content.\n   * Must have name \"google_search\".\n   */\n  googleSearch,\n  /**\n   * Creates a URL context tool that gives Google direct access to real-time web content.\n   * Must have name \"url_context\".\n   */\n  urlContext,\n  /**\n   * A tool that enables the model to generate and run Python code.\n   * Must have name \"code_execution\".\n   *\n   * @note Ensure the selected model supports Code Execution.\n   * Multi-tool usage with the code execution tool is typically compatible with Gemini >=2 models.\n   *\n   * @see https://ai.google.dev/gemini-api/docs/code-execution (Google AI)\n   * @see https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/code-execution-api (Vertex AI)\n   */\n  codeExecution\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/google/dist/internal/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@ai-sdk/provider-utils/dist/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventSourceParserStream: () => (/* reexport safe */ eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_1__.EventSourceParserStream),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   asSchema: () => (/* binding */ asSchema),\n/* harmony export */   asValidator: () => (/* binding */ asValidator),\n/* harmony export */   combineHeaders: () => (/* binding */ combineHeaders),\n/* harmony export */   convertAsyncIteratorToReadableStream: () => (/* binding */ convertAsyncIteratorToReadableStream),\n/* harmony export */   convertBase64ToUint8Array: () => (/* binding */ convertBase64ToUint8Array),\n/* harmony export */   convertToBase64: () => (/* binding */ convertToBase64),\n/* harmony export */   convertUint8ArrayToBase64: () => (/* binding */ convertUint8ArrayToBase64),\n/* harmony export */   createBinaryResponseHandler: () => (/* binding */ createBinaryResponseHandler),\n/* harmony export */   createEventSourceResponseHandler: () => (/* binding */ createEventSourceResponseHandler),\n/* harmony export */   createIdGenerator: () => (/* binding */ createIdGenerator),\n/* harmony export */   createJsonErrorResponseHandler: () => (/* binding */ createJsonErrorResponseHandler),\n/* harmony export */   createJsonResponseHandler: () => (/* binding */ createJsonResponseHandler),\n/* harmony export */   createJsonStreamResponseHandler: () => (/* binding */ createJsonStreamResponseHandler),\n/* harmony export */   createProviderDefinedToolFactory: () => (/* binding */ createProviderDefinedToolFactory),\n/* harmony export */   createProviderDefinedToolFactoryWithOutputSchema: () => (/* binding */ createProviderDefinedToolFactoryWithOutputSchema),\n/* harmony export */   createStatusCodeErrorResponseHandler: () => (/* binding */ createStatusCodeErrorResponseHandler),\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   dynamicTool: () => (/* binding */ dynamicTool),\n/* harmony export */   executeTool: () => (/* binding */ executeTool),\n/* harmony export */   extractResponseHeaders: () => (/* binding */ extractResponseHeaders),\n/* harmony export */   generateId: () => (/* binding */ generateId),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   getFromApi: () => (/* binding */ getFromApi),\n/* harmony export */   getRuntimeEnvironmentUserAgent: () => (/* binding */ getRuntimeEnvironmentUserAgent),\n/* harmony export */   injectJsonInstructionIntoMessages: () => (/* binding */ injectJsonInstructionIntoMessages),\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError),\n/* harmony export */   isParsableJson: () => (/* binding */ isParsableJson),\n/* harmony export */   isUrlSupported: () => (/* binding */ isUrlSupported),\n/* harmony export */   isValidator: () => (/* binding */ isValidator),\n/* harmony export */   jsonSchema: () => (/* binding */ jsonSchema),\n/* harmony export */   loadApiKey: () => (/* binding */ loadApiKey),\n/* harmony export */   loadOptionalSetting: () => (/* binding */ loadOptionalSetting),\n/* harmony export */   loadSetting: () => (/* binding */ loadSetting),\n/* harmony export */   mediaTypeToExtension: () => (/* binding */ mediaTypeToExtension),\n/* harmony export */   parseJSON: () => (/* binding */ parseJSON),\n/* harmony export */   parseJsonEventStream: () => (/* binding */ parseJsonEventStream),\n/* harmony export */   parseProviderOptions: () => (/* binding */ parseProviderOptions),\n/* harmony export */   postFormDataToApi: () => (/* binding */ postFormDataToApi),\n/* harmony export */   postJsonToApi: () => (/* binding */ postJsonToApi),\n/* harmony export */   postToApi: () => (/* binding */ postToApi),\n/* harmony export */   removeUndefinedEntries: () => (/* binding */ removeUndefinedEntries),\n/* harmony export */   resolve: () => (/* binding */ resolve),\n/* harmony export */   safeParseJSON: () => (/* binding */ safeParseJSON),\n/* harmony export */   safeValidateTypes: () => (/* binding */ safeValidateTypes),\n/* harmony export */   standardSchemaValidator: () => (/* binding */ standardSchemaValidator),\n/* harmony export */   tool: () => (/* binding */ tool),\n/* harmony export */   validateTypes: () => (/* binding */ validateTypes),\n/* harmony export */   validator: () => (/* binding */ validator),\n/* harmony export */   validatorSymbol: () => (/* binding */ validatorSymbol),\n/* harmony export */   withUserAgentSuffix: () => (/* binding */ withUserAgentSuffix),\n/* harmony export */   withoutTrailingSlash: () => (/* binding */ withoutTrailingSlash),\n/* harmony export */   zodSchema: () => (/* binding */ zodSchema)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eventsource-parser/stream */ \"(rsc)/./node_modules/eventsource-parser/dist/stream.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/index.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/zod/v3/index.js\");\n// src/combine-headers.ts\nfunction combineHeaders(...headers) {\n  return headers.reduce(\n    (combinedHeaders, currentHeaders) => ({\n      ...combinedHeaders,\n      ...currentHeaders != null ? currentHeaders : {}\n    }),\n    {}\n  );\n}\n\n// src/convert-async-iterator-to-readable-stream.ts\nfunction convertAsyncIteratorToReadableStream(iterator) {\n  return new ReadableStream({\n    /**\n     * Called when the consumer wants to pull more data from the stream.\n     *\n     * @param {ReadableStreamDefaultController<T>} controller - The controller to enqueue data into the stream.\n     * @returns {Promise<void>}\n     */\n    async pull(controller) {\n      try {\n        const { value, done } = await iterator.next();\n        if (done) {\n          controller.close();\n        } else {\n          controller.enqueue(value);\n        }\n      } catch (error) {\n        controller.error(error);\n      }\n    },\n    /**\n     * Called when the consumer cancels the stream.\n     */\n    cancel() {\n    }\n  });\n}\n\n// src/delay.ts\nasync function delay(delayInMs, options) {\n  if (delayInMs == null) {\n    return Promise.resolve();\n  }\n  const signal = options == null ? void 0 : options.abortSignal;\n  return new Promise((resolve2, reject) => {\n    if (signal == null ? void 0 : signal.aborted) {\n      reject(createAbortError());\n      return;\n    }\n    const timeoutId = setTimeout(() => {\n      cleanup();\n      resolve2();\n    }, delayInMs);\n    const cleanup = () => {\n      clearTimeout(timeoutId);\n      signal == null ? void 0 : signal.removeEventListener(\"abort\", onAbort);\n    };\n    const onAbort = () => {\n      cleanup();\n      reject(createAbortError());\n    };\n    signal == null ? void 0 : signal.addEventListener(\"abort\", onAbort);\n  });\n}\nfunction createAbortError() {\n  return new DOMException(\"Delay was aborted\", \"AbortError\");\n}\n\n// src/extract-response-headers.ts\nfunction extractResponseHeaders(response) {\n  return Object.fromEntries([...response.headers]);\n}\n\n// src/get-runtime-environment-user-agent.ts\nfunction getRuntimeEnvironmentUserAgent(globalThisAny = globalThis) {\n  var _a, _b, _c;\n  if (globalThisAny.window) {\n    return `runtime/browser`;\n  }\n  if ((_a = globalThisAny.navigator) == null ? void 0 : _a.userAgent) {\n    return `runtime/${globalThisAny.navigator.userAgent.toLowerCase()}`;\n  }\n  if ((_c = (_b = globalThisAny.process) == null ? void 0 : _b.versions) == null ? void 0 : _c.node) {\n    return `runtime/node.js/${globalThisAny.process.version.substring(0)}`;\n  }\n  if (globalThisAny.EdgeRuntime) {\n    return `runtime/vercel-edge`;\n  }\n  return \"runtime/unknown\";\n}\n\n// src/remove-undefined-entries.ts\nfunction removeUndefinedEntries(record) {\n  return Object.fromEntries(\n    Object.entries(record).filter(([_key, value]) => value != null)\n  );\n}\n\n// src/with-user-agent-suffix.ts\nfunction withUserAgentSuffix(headers, ...userAgentSuffixParts) {\n  const cleanedHeaders = removeUndefinedEntries(\n    headers != null ? headers : {}\n  );\n  const normalizedHeaders = new Headers(cleanedHeaders);\n  const currentUserAgentHeader = normalizedHeaders.get(\"user-agent\") || \"\";\n  normalizedHeaders.set(\n    \"user-agent\",\n    [currentUserAgentHeader, ...userAgentSuffixParts].filter(Boolean).join(\" \")\n  );\n  return Object.fromEntries(normalizedHeaders);\n}\n\n// src/generate-id.ts\n\nvar createIdGenerator = ({\n  prefix,\n  size = 16,\n  alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n  separator = \"-\"\n} = {}) => {\n  const generator = () => {\n    const alphabetLength = alphabet.length;\n    const chars = new Array(size);\n    for (let i = 0; i < size; i++) {\n      chars[i] = alphabet[Math.random() * alphabetLength | 0];\n    }\n    return chars.join(\"\");\n  };\n  if (prefix == null) {\n    return generator;\n  }\n  if (alphabet.includes(separator)) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidArgumentError({\n      argument: \"separator\",\n      message: `The separator \"${separator}\" must not be part of the alphabet \"${alphabet}\".`\n    });\n  }\n  return () => `${prefix}${separator}${generator()}`;\n};\nvar generateId = createIdGenerator();\n\n// src/get-error-message.ts\nfunction getErrorMessage(error) {\n  if (error == null) {\n    return \"unknown error\";\n  }\n  if (typeof error === \"string\") {\n    return error;\n  }\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return JSON.stringify(error);\n}\n\n// src/get-from-api.ts\n\n\n// src/handle-fetch-error.ts\n\n\n// src/is-abort-error.ts\nfunction isAbortError(error) {\n  return (error instanceof Error || error instanceof DOMException) && (error.name === \"AbortError\" || error.name === \"ResponseAborted\" || // Next.js\n  error.name === \"TimeoutError\");\n}\n\n// src/handle-fetch-error.ts\nvar FETCH_FAILED_ERROR_MESSAGES = [\"fetch failed\", \"failed to fetch\"];\nfunction handleFetchError({\n  error,\n  url,\n  requestBodyValues\n}) {\n  if (isAbortError(error)) {\n    return error;\n  }\n  if (error instanceof TypeError && FETCH_FAILED_ERROR_MESSAGES.includes(error.message.toLowerCase())) {\n    const cause = error.cause;\n    if (cause != null) {\n      return new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: `Cannot connect to API: ${cause.message}`,\n        cause,\n        url,\n        requestBodyValues,\n        isRetryable: true\n        // retry when network error\n      });\n    }\n  }\n  return error;\n}\n\n// src/version.ts\nvar VERSION =  true ? \"3.0.9\" : 0;\n\n// src/get-from-api.ts\nvar getOriginalFetch = () => globalThis.fetch;\nvar getFromApi = async ({\n  url,\n  headers = {},\n  successfulResponseHandler,\n  failedResponseHandler,\n  abortSignal,\n  fetch = getOriginalFetch()\n}) => {\n  try {\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: withUserAgentSuffix(\n        headers,\n        `ai-sdk/provider-utils/${VERSION}`,\n        getRuntimeEnvironmentUserAgent()\n      ),\n      signal: abortSignal\n    });\n    const responseHeaders = extractResponseHeaders(response);\n    if (!response.ok) {\n      let errorInformation;\n      try {\n        errorInformation = await failedResponseHandler({\n          response,\n          url,\n          requestBodyValues: {}\n        });\n      } catch (error) {\n        if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isInstance(error)) {\n          throw error;\n        }\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n          message: \"Failed to process error response\",\n          cause: error,\n          statusCode: response.status,\n          url,\n          responseHeaders,\n          requestBodyValues: {}\n        });\n      }\n      throw errorInformation.value;\n    }\n    try {\n      return await successfulResponseHandler({\n        response,\n        url,\n        requestBodyValues: {}\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isInstance(error)) {\n          throw error;\n        }\n      }\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: \"Failed to process successful response\",\n        cause: error,\n        statusCode: response.status,\n        url,\n        responseHeaders,\n        requestBodyValues: {}\n      });\n    }\n  } catch (error) {\n    throw handleFetchError({ error, url, requestBodyValues: {} });\n  }\n};\n\n// src/inject-json-instruction.ts\nvar DEFAULT_SCHEMA_PREFIX = \"JSON schema:\";\nvar DEFAULT_SCHEMA_SUFFIX = \"You MUST answer with a JSON object that matches the JSON schema above.\";\nvar DEFAULT_GENERIC_SUFFIX = \"You MUST answer with JSON.\";\nfunction injectJsonInstruction({\n  prompt,\n  schema,\n  schemaPrefix = schema != null ? DEFAULT_SCHEMA_PREFIX : void 0,\n  schemaSuffix = schema != null ? DEFAULT_SCHEMA_SUFFIX : DEFAULT_GENERIC_SUFFIX\n}) {\n  return [\n    prompt != null && prompt.length > 0 ? prompt : void 0,\n    prompt != null && prompt.length > 0 ? \"\" : void 0,\n    // add a newline if prompt is not null\n    schemaPrefix,\n    schema != null ? JSON.stringify(schema) : void 0,\n    schemaSuffix\n  ].filter((line) => line != null).join(\"\\n\");\n}\nfunction injectJsonInstructionIntoMessages({\n  messages,\n  schema,\n  schemaPrefix,\n  schemaSuffix\n}) {\n  var _a, _b;\n  const systemMessage = ((_a = messages[0]) == null ? void 0 : _a.role) === \"system\" ? { ...messages[0] } : { role: \"system\", content: \"\" };\n  systemMessage.content = injectJsonInstruction({\n    prompt: systemMessage.content,\n    schema,\n    schemaPrefix,\n    schemaSuffix\n  });\n  return [\n    systemMessage,\n    ...((_b = messages[0]) == null ? void 0 : _b.role) === \"system\" ? messages.slice(1) : messages\n  ];\n}\n\n// src/is-url-supported.ts\nfunction isUrlSupported({\n  mediaType,\n  url,\n  supportedUrls\n}) {\n  url = url.toLowerCase();\n  mediaType = mediaType.toLowerCase();\n  return Object.entries(supportedUrls).map(([key, value]) => {\n    const mediaType2 = key.toLowerCase();\n    return mediaType2 === \"*\" || mediaType2 === \"*/*\" ? { mediaTypePrefix: \"\", regexes: value } : { mediaTypePrefix: mediaType2.replace(/\\*/, \"\"), regexes: value };\n  }).filter(({ mediaTypePrefix }) => mediaType.startsWith(mediaTypePrefix)).flatMap(({ regexes }) => regexes).some((pattern) => pattern.test(url));\n}\n\n// src/load-api-key.ts\n\nfunction loadApiKey({\n  apiKey,\n  environmentVariableName,\n  apiKeyParameterName = \"apiKey\",\n  description\n}) {\n  if (typeof apiKey === \"string\") {\n    return apiKey;\n  }\n  if (apiKey != null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError({\n      message: `${description} API key must be a string.`\n    });\n  }\n  if (typeof process === \"undefined\") {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError({\n      message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter. Environment variables is not supported in this environment.`\n    });\n  }\n  apiKey = process.env[environmentVariableName];\n  if (apiKey == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError({\n      message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter or the ${environmentVariableName} environment variable.`\n    });\n  }\n  if (typeof apiKey !== \"string\") {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError({\n      message: `${description} API key must be a string. The value of the ${environmentVariableName} environment variable is not a string.`\n    });\n  }\n  return apiKey;\n}\n\n// src/load-optional-setting.ts\nfunction loadOptionalSetting({\n  settingValue,\n  environmentVariableName\n}) {\n  if (typeof settingValue === \"string\") {\n    return settingValue;\n  }\n  if (settingValue != null || typeof process === \"undefined\") {\n    return void 0;\n  }\n  settingValue = process.env[environmentVariableName];\n  if (settingValue == null || typeof settingValue !== \"string\") {\n    return void 0;\n  }\n  return settingValue;\n}\n\n// src/load-setting.ts\n\nfunction loadSetting({\n  settingValue,\n  environmentVariableName,\n  settingName,\n  description\n}) {\n  if (typeof settingValue === \"string\") {\n    return settingValue;\n  }\n  if (settingValue != null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadSettingError({\n      message: `${description} setting must be a string.`\n    });\n  }\n  if (typeof process === \"undefined\") {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadSettingError({\n      message: `${description} setting is missing. Pass it using the '${settingName}' parameter. Environment variables is not supported in this environment.`\n    });\n  }\n  settingValue = process.env[environmentVariableName];\n  if (settingValue == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadSettingError({\n      message: `${description} setting is missing. Pass it using the '${settingName}' parameter or the ${environmentVariableName} environment variable.`\n    });\n  }\n  if (typeof settingValue !== \"string\") {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadSettingError({\n      message: `${description} setting must be a string. The value of the ${environmentVariableName} environment variable is not a string.`\n    });\n  }\n  return settingValue;\n}\n\n// src/media-type-to-extension.ts\nfunction mediaTypeToExtension(mediaType) {\n  var _a;\n  const [_type, subtype = \"\"] = mediaType.toLowerCase().split(\"/\");\n  return (_a = {\n    mpeg: \"mp3\",\n    \"x-wav\": \"wav\",\n    opus: \"ogg\",\n    mp4: \"m4a\",\n    \"x-m4a\": \"m4a\"\n  }[subtype]) != null ? _a : subtype;\n}\n\n// src/parse-json.ts\n\n\n// src/secure-json-parse.ts\nvar suspectProtoRx = /\"__proto__\"\\s*:/;\nvar suspectConstructorRx = /\"constructor\"\\s*:/;\nfunction _parse(text) {\n  const obj = JSON.parse(text);\n  if (obj === null || typeof obj !== \"object\") {\n    return obj;\n  }\n  if (suspectProtoRx.test(text) === false && suspectConstructorRx.test(text) === false) {\n    return obj;\n  }\n  return filter(obj);\n}\nfunction filter(obj) {\n  let next = [obj];\n  while (next.length) {\n    const nodes = next;\n    next = [];\n    for (const node of nodes) {\n      if (Object.prototype.hasOwnProperty.call(node, \"__proto__\")) {\n        throw new SyntaxError(\"Object contains forbidden prototype property\");\n      }\n      if (Object.prototype.hasOwnProperty.call(node, \"constructor\") && Object.prototype.hasOwnProperty.call(node.constructor, \"prototype\")) {\n        throw new SyntaxError(\"Object contains forbidden prototype property\");\n      }\n      for (const key in node) {\n        const value = node[key];\n        if (value && typeof value === \"object\") {\n          next.push(value);\n        }\n      }\n    }\n  }\n  return obj;\n}\nfunction secureJsonParse(text) {\n  const { stackTraceLimit } = Error;\n  Error.stackTraceLimit = 0;\n  try {\n    return _parse(text);\n  } finally {\n    Error.stackTraceLimit = stackTraceLimit;\n  }\n}\n\n// src/validate-types.ts\n\n\n// src/validator.ts\n\nvar validatorSymbol = Symbol.for(\"vercel.ai.validator\");\nfunction validator(validate) {\n  return { [validatorSymbol]: true, validate };\n}\nfunction isValidator(value) {\n  return typeof value === \"object\" && value !== null && validatorSymbol in value && value[validatorSymbol] === true && \"validate\" in value;\n}\nfunction asValidator(value) {\n  return isValidator(value) ? value : standardSchemaValidator(value);\n}\nfunction standardSchemaValidator(standardSchema) {\n  return validator(async (value) => {\n    const result = await standardSchema[\"~standard\"].validate(value);\n    return result.issues == null ? { success: true, value: result.value } : {\n      success: false,\n      error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError({\n        value,\n        cause: result.issues\n      })\n    };\n  });\n}\n\n// src/validate-types.ts\nasync function validateTypes({\n  value,\n  schema\n}) {\n  const result = await safeValidateTypes({ value, schema });\n  if (!result.success) {\n    throw _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError.wrap({ value, cause: result.error });\n  }\n  return result.value;\n}\nasync function safeValidateTypes({\n  value,\n  schema\n}) {\n  const validator2 = asValidator(schema);\n  try {\n    if (validator2.validate == null) {\n      return { success: true, value, rawValue: value };\n    }\n    const result = await validator2.validate(value);\n    if (result.success) {\n      return { success: true, value: result.value, rawValue: value };\n    }\n    return {\n      success: false,\n      error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError.wrap({ value, cause: result.error }),\n      rawValue: value\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError.wrap({ value, cause: error }),\n      rawValue: value\n    };\n  }\n}\n\n// src/parse-json.ts\nasync function parseJSON({\n  text,\n  schema\n}) {\n  try {\n    const value = secureJsonParse(text);\n    if (schema == null) {\n      return value;\n    }\n    return validateTypes({ value, schema });\n  } catch (error) {\n    if (_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError.isInstance(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError.isInstance(error)) {\n      throw error;\n    }\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError({ text, cause: error });\n  }\n}\nasync function safeParseJSON({\n  text,\n  schema\n}) {\n  try {\n    const value = secureJsonParse(text);\n    if (schema == null) {\n      return { success: true, value, rawValue: value };\n    }\n    return await safeValidateTypes({ value, schema });\n  } catch (error) {\n    return {\n      success: false,\n      error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError.isInstance(error) ? error : new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError({ text, cause: error }),\n      rawValue: void 0\n    };\n  }\n}\nfunction isParsableJson(input) {\n  try {\n    secureJsonParse(input);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// src/parse-json-event-stream.ts\n\nfunction parseJsonEventStream({\n  stream,\n  schema\n}) {\n  return stream.pipeThrough(new TextDecoderStream()).pipeThrough(new eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_1__.EventSourceParserStream()).pipeThrough(\n    new TransformStream({\n      async transform({ data }, controller) {\n        if (data === \"[DONE]\") {\n          return;\n        }\n        controller.enqueue(await safeParseJSON({ text: data, schema }));\n      }\n    })\n  );\n}\n\n// src/parse-provider-options.ts\n\nasync function parseProviderOptions({\n  provider,\n  providerOptions,\n  schema\n}) {\n  if ((providerOptions == null ? void 0 : providerOptions[provider]) == null) {\n    return void 0;\n  }\n  const parsedProviderOptions = await safeValidateTypes({\n    value: providerOptions[provider],\n    schema\n  });\n  if (!parsedProviderOptions.success) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidArgumentError({\n      argument: \"providerOptions\",\n      message: `invalid ${provider} provider options`,\n      cause: parsedProviderOptions.error\n    });\n  }\n  return parsedProviderOptions.value;\n}\n\n// src/post-to-api.ts\n\nvar getOriginalFetch2 = () => globalThis.fetch;\nvar postJsonToApi = async ({\n  url,\n  headers,\n  body,\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n}) => postToApi({\n  url,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    ...headers\n  },\n  body: {\n    content: JSON.stringify(body),\n    values: body\n  },\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n});\nvar postFormDataToApi = async ({\n  url,\n  headers,\n  formData,\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n}) => postToApi({\n  url,\n  headers,\n  body: {\n    content: formData,\n    values: Object.fromEntries(formData.entries())\n  },\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n});\nvar postToApi = async ({\n  url,\n  headers = {},\n  body,\n  successfulResponseHandler,\n  failedResponseHandler,\n  abortSignal,\n  fetch = getOriginalFetch2()\n}) => {\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: withUserAgentSuffix(\n        headers,\n        `ai-sdk/provider-utils/${VERSION}`,\n        getRuntimeEnvironmentUserAgent()\n      ),\n      body: body.content,\n      signal: abortSignal\n    });\n    const responseHeaders = extractResponseHeaders(response);\n    if (!response.ok) {\n      let errorInformation;\n      try {\n        errorInformation = await failedResponseHandler({\n          response,\n          url,\n          requestBodyValues: body.values\n        });\n      } catch (error) {\n        if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isInstance(error)) {\n          throw error;\n        }\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n          message: \"Failed to process error response\",\n          cause: error,\n          statusCode: response.status,\n          url,\n          responseHeaders,\n          requestBodyValues: body.values\n        });\n      }\n      throw errorInformation.value;\n    }\n    try {\n      return await successfulResponseHandler({\n        response,\n        url,\n        requestBodyValues: body.values\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isInstance(error)) {\n          throw error;\n        }\n      }\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: \"Failed to process successful response\",\n        cause: error,\n        statusCode: response.status,\n        url,\n        responseHeaders,\n        requestBodyValues: body.values\n      });\n    }\n  } catch (error) {\n    throw handleFetchError({ error, url, requestBodyValues: body.values });\n  }\n};\n\n// src/types/tool.ts\nfunction tool(tool2) {\n  return tool2;\n}\nfunction dynamicTool(tool2) {\n  return { ...tool2, type: \"dynamic\" };\n}\n\n// src/provider-defined-tool-factory.ts\nfunction createProviderDefinedToolFactory({\n  id,\n  name,\n  inputSchema\n}) {\n  return ({\n    execute,\n    outputSchema,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable,\n    ...args\n  }) => tool({\n    type: \"provider-defined\",\n    id,\n    name,\n    args,\n    inputSchema,\n    outputSchema,\n    execute,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable\n  });\n}\nfunction createProviderDefinedToolFactoryWithOutputSchema({\n  id,\n  name,\n  inputSchema,\n  outputSchema\n}) {\n  return ({\n    execute,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable,\n    ...args\n  }) => tool({\n    type: \"provider-defined\",\n    id,\n    name,\n    args,\n    inputSchema,\n    outputSchema,\n    execute,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable\n  });\n}\n\n// src/resolve.ts\nasync function resolve(value) {\n  if (typeof value === \"function\") {\n    value = value();\n  }\n  return Promise.resolve(value);\n}\n\n// src/response-handler.ts\n\nvar createJsonErrorResponseHandler = ({\n  errorSchema,\n  errorToMessage,\n  isRetryable\n}) => async ({ response, url, requestBodyValues }) => {\n  const responseBody = await response.text();\n  const responseHeaders = extractResponseHeaders(response);\n  if (responseBody.trim() === \"\") {\n    return {\n      responseHeaders,\n      value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: response.statusText,\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        isRetryable: isRetryable == null ? void 0 : isRetryable(response)\n      })\n    };\n  }\n  try {\n    const parsedError = await parseJSON({\n      text: responseBody,\n      schema: errorSchema\n    });\n    return {\n      responseHeaders,\n      value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: errorToMessage(parsedError),\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        data: parsedError,\n        isRetryable: isRetryable == null ? void 0 : isRetryable(response, parsedError)\n      })\n    };\n  } catch (parseError) {\n    return {\n      responseHeaders,\n      value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: response.statusText,\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        isRetryable: isRetryable == null ? void 0 : isRetryable(response)\n      })\n    };\n  }\n};\nvar createEventSourceResponseHandler = (chunkSchema) => async ({ response }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  if (response.body == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.EmptyResponseBodyError({});\n  }\n  return {\n    responseHeaders,\n    value: parseJsonEventStream({\n      stream: response.body,\n      schema: chunkSchema\n    })\n  };\n};\nvar createJsonStreamResponseHandler = (chunkSchema) => async ({ response }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  if (response.body == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.EmptyResponseBodyError({});\n  }\n  let buffer = \"\";\n  return {\n    responseHeaders,\n    value: response.body.pipeThrough(new TextDecoderStream()).pipeThrough(\n      new TransformStream({\n        async transform(chunkText, controller) {\n          if (chunkText.endsWith(\"\\n\")) {\n            controller.enqueue(\n              await safeParseJSON({\n                text: buffer + chunkText,\n                schema: chunkSchema\n              })\n            );\n            buffer = \"\";\n          } else {\n            buffer += chunkText;\n          }\n        }\n      })\n    )\n  };\n};\nvar createJsonResponseHandler = (responseSchema) => async ({ response, url, requestBodyValues }) => {\n  const responseBody = await response.text();\n  const parsedResult = await safeParseJSON({\n    text: responseBody,\n    schema: responseSchema\n  });\n  const responseHeaders = extractResponseHeaders(response);\n  if (!parsedResult.success) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n      message: \"Invalid JSON response\",\n      cause: parsedResult.error,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody,\n      url,\n      requestBodyValues\n    });\n  }\n  return {\n    responseHeaders,\n    value: parsedResult.value,\n    rawValue: parsedResult.rawValue\n  };\n};\nvar createBinaryResponseHandler = () => async ({ response, url, requestBodyValues }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  if (!response.body) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n      message: \"Response body is empty\",\n      url,\n      requestBodyValues,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody: void 0\n    });\n  }\n  try {\n    const buffer = await response.arrayBuffer();\n    return {\n      responseHeaders,\n      value: new Uint8Array(buffer)\n    };\n  } catch (error) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n      message: \"Failed to read response as array buffer\",\n      url,\n      requestBodyValues,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody: void 0,\n      cause: error\n    });\n  }\n};\nvar createStatusCodeErrorResponseHandler = () => async ({ response, url, requestBodyValues }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  const responseBody = await response.text();\n  return {\n    responseHeaders,\n    value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n      message: response.statusText,\n      url,\n      requestBodyValues,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody\n    })\n  };\n};\n\n// src/zod-schema.ts\n\n\n// src/zod-to-json-schema/get-relative-path.ts\nvar getRelativePath = (pathA, pathB) => {\n  let i = 0;\n  for (; i < pathA.length && i < pathB.length; i++) {\n    if (pathA[i] !== pathB[i])\n      break;\n  }\n  return [(pathA.length - i).toString(), ...pathB.slice(i)].join(\"/\");\n};\n\n// src/zod-to-json-schema/options.ts\nvar ignoreOverride = Symbol(\n  \"Let zodToJsonSchema decide on which parser to use\"\n);\nvar defaultOptions = {\n  name: void 0,\n  $refStrategy: \"root\",\n  basePath: [\"#\"],\n  effectStrategy: \"input\",\n  pipeStrategy: \"all\",\n  dateStrategy: \"format:date-time\",\n  mapStrategy: \"entries\",\n  removeAdditionalStrategy: \"passthrough\",\n  allowedAdditionalProperties: true,\n  rejectedAdditionalProperties: false,\n  definitionPath: \"definitions\",\n  strictUnions: false,\n  definitions: {},\n  errorMessages: false,\n  patternStrategy: \"escape\",\n  applyRegexFlags: false,\n  emailStrategy: \"format:email\",\n  base64Strategy: \"contentEncoding:base64\",\n  nameStrategy: \"ref\"\n};\nvar getDefaultOptions = (options) => typeof options === \"string\" ? {\n  ...defaultOptions,\n  name: options\n} : {\n  ...defaultOptions,\n  ...options\n};\n\n// src/zod-to-json-schema/select-parser.ts\n\n\n// src/zod-to-json-schema/parsers/any.ts\nfunction parseAnyDef() {\n  return {};\n}\n\n// src/zod-to-json-schema/parsers/array.ts\n\nfunction parseArrayDef(def, refs) {\n  var _a, _b, _c;\n  const res = {\n    type: \"array\"\n  };\n  if (((_a = def.type) == null ? void 0 : _a._def) && ((_c = (_b = def.type) == null ? void 0 : _b._def) == null ? void 0 : _c.typeName) !== zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodAny) {\n    res.items = parseDef(def.type._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"items\"]\n    });\n  }\n  if (def.minLength) {\n    res.minItems = def.minLength.value;\n  }\n  if (def.maxLength) {\n    res.maxItems = def.maxLength.value;\n  }\n  if (def.exactLength) {\n    res.minItems = def.exactLength.value;\n    res.maxItems = def.exactLength.value;\n  }\n  return res;\n}\n\n// src/zod-to-json-schema/parsers/bigint.ts\nfunction parseBigintDef(def) {\n  const res = {\n    type: \"integer\",\n    format: \"int64\"\n  };\n  if (!def.checks)\n    return res;\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"min\":\n        if (check.inclusive) {\n          res.minimum = check.value;\n        } else {\n          res.exclusiveMinimum = check.value;\n        }\n        break;\n      case \"max\":\n        if (check.inclusive) {\n          res.maximum = check.value;\n        } else {\n          res.exclusiveMaximum = check.value;\n        }\n        break;\n      case \"multipleOf\":\n        res.multipleOf = check.value;\n        break;\n    }\n  }\n  return res;\n}\n\n// src/zod-to-json-schema/parsers/boolean.ts\nfunction parseBooleanDef() {\n  return { type: \"boolean\" };\n}\n\n// src/zod-to-json-schema/parsers/branded.ts\nfunction parseBrandedDef(_def, refs) {\n  return parseDef(_def.type._def, refs);\n}\n\n// src/zod-to-json-schema/parsers/catch.ts\nvar parseCatchDef = (def, refs) => {\n  return parseDef(def.innerType._def, refs);\n};\n\n// src/zod-to-json-schema/parsers/date.ts\nfunction parseDateDef(def, refs, overrideDateStrategy) {\n  const strategy = overrideDateStrategy != null ? overrideDateStrategy : refs.dateStrategy;\n  if (Array.isArray(strategy)) {\n    return {\n      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))\n    };\n  }\n  switch (strategy) {\n    case \"string\":\n    case \"format:date-time\":\n      return {\n        type: \"string\",\n        format: \"date-time\"\n      };\n    case \"format:date\":\n      return {\n        type: \"string\",\n        format: \"date\"\n      };\n    case \"integer\":\n      return integerDateParser(def);\n  }\n}\nvar integerDateParser = (def) => {\n  const res = {\n    type: \"integer\",\n    format: \"unix-time\"\n  };\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"min\":\n        res.minimum = check.value;\n        break;\n      case \"max\":\n        res.maximum = check.value;\n        break;\n    }\n  }\n  return res;\n};\n\n// src/zod-to-json-schema/parsers/default.ts\nfunction parseDefaultDef(_def, refs) {\n  return {\n    ...parseDef(_def.innerType._def, refs),\n    default: _def.defaultValue()\n  };\n}\n\n// src/zod-to-json-schema/parsers/effects.ts\nfunction parseEffectsDef(_def, refs) {\n  return refs.effectStrategy === \"input\" ? parseDef(_def.schema._def, refs) : parseAnyDef();\n}\n\n// src/zod-to-json-schema/parsers/enum.ts\nfunction parseEnumDef(def) {\n  return {\n    type: \"string\",\n    enum: Array.from(def.values)\n  };\n}\n\n// src/zod-to-json-schema/parsers/intersection.ts\nvar isJsonSchema7AllOfType = (type) => {\n  if (\"type\" in type && type.type === \"string\")\n    return false;\n  return \"allOf\" in type;\n};\nfunction parseIntersectionDef(def, refs) {\n  const allOf = [\n    parseDef(def.left._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"allOf\", \"0\"]\n    }),\n    parseDef(def.right._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"allOf\", \"1\"]\n    })\n  ].filter((x) => !!x);\n  const mergedAllOf = [];\n  allOf.forEach((schema) => {\n    if (isJsonSchema7AllOfType(schema)) {\n      mergedAllOf.push(...schema.allOf);\n    } else {\n      let nestedSchema = schema;\n      if (\"additionalProperties\" in schema && schema.additionalProperties === false) {\n        const { additionalProperties, ...rest } = schema;\n        nestedSchema = rest;\n      }\n      mergedAllOf.push(nestedSchema);\n    }\n  });\n  return mergedAllOf.length ? { allOf: mergedAllOf } : void 0;\n}\n\n// src/zod-to-json-schema/parsers/literal.ts\nfunction parseLiteralDef(def) {\n  const parsedType = typeof def.value;\n  if (parsedType !== \"bigint\" && parsedType !== \"number\" && parsedType !== \"boolean\" && parsedType !== \"string\") {\n    return {\n      type: Array.isArray(def.value) ? \"array\" : \"object\"\n    };\n  }\n  return {\n    type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n    const: def.value\n  };\n}\n\n// src/zod-to-json-schema/parsers/record.ts\n\n\n// src/zod-to-json-schema/parsers/string.ts\nvar emojiRegex = void 0;\nvar zodPatterns = {\n  /**\n   * `c` was changed to `[cC]` to replicate /i flag\n   */\n  cuid: /^[cC][^\\s-]{8,}$/,\n  cuid2: /^[0-9a-z]+$/,\n  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,\n  /**\n   * `a-z` was added to replicate /i flag\n   */\n  email: /^(?!\\.)(?!.*\\.\\.)([a-zA-Z0-9_'+\\-\\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\\-]*\\.)+[a-zA-Z]{2,}$/,\n  /**\n   * Constructed a valid Unicode RegExp\n   *\n   * Lazily instantiate since this type of regex isn't supported\n   * in all envs (e.g. React Native).\n   *\n   * See:\n   * https://github.com/colinhacks/zod/issues/2433\n   * Fix in Zod:\n   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b\n   */\n  emoji: () => {\n    if (emojiRegex === void 0) {\n      emojiRegex = RegExp(\n        \"^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$\",\n        \"u\"\n      );\n    }\n    return emojiRegex;\n  },\n  /**\n   * Unused\n   */\n  uuid: /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/,\n  /**\n   * Unused\n   */\n  ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,\n  ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/,\n  /**\n   * Unused\n   */\n  ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,\n  ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,\n  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,\n  base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,\n  nanoid: /^[a-zA-Z0-9_-]{21}$/,\n  jwt: /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/\n};\nfunction parseStringDef(def, refs) {\n  const res = {\n    type: \"string\"\n  };\n  if (def.checks) {\n    for (const check of def.checks) {\n      switch (check.kind) {\n        case \"min\":\n          res.minLength = typeof res.minLength === \"number\" ? Math.max(res.minLength, check.value) : check.value;\n          break;\n        case \"max\":\n          res.maxLength = typeof res.maxLength === \"number\" ? Math.min(res.maxLength, check.value) : check.value;\n          break;\n        case \"email\":\n          switch (refs.emailStrategy) {\n            case \"format:email\":\n              addFormat(res, \"email\", check.message, refs);\n              break;\n            case \"format:idn-email\":\n              addFormat(res, \"idn-email\", check.message, refs);\n              break;\n            case \"pattern:zod\":\n              addPattern(res, zodPatterns.email, check.message, refs);\n              break;\n          }\n          break;\n        case \"url\":\n          addFormat(res, \"uri\", check.message, refs);\n          break;\n        case \"uuid\":\n          addFormat(res, \"uuid\", check.message, refs);\n          break;\n        case \"regex\":\n          addPattern(res, check.regex, check.message, refs);\n          break;\n        case \"cuid\":\n          addPattern(res, zodPatterns.cuid, check.message, refs);\n          break;\n        case \"cuid2\":\n          addPattern(res, zodPatterns.cuid2, check.message, refs);\n          break;\n        case \"startsWith\":\n          addPattern(\n            res,\n            RegExp(`^${escapeLiteralCheckValue(check.value, refs)}`),\n            check.message,\n            refs\n          );\n          break;\n        case \"endsWith\":\n          addPattern(\n            res,\n            RegExp(`${escapeLiteralCheckValue(check.value, refs)}$`),\n            check.message,\n            refs\n          );\n          break;\n        case \"datetime\":\n          addFormat(res, \"date-time\", check.message, refs);\n          break;\n        case \"date\":\n          addFormat(res, \"date\", check.message, refs);\n          break;\n        case \"time\":\n          addFormat(res, \"time\", check.message, refs);\n          break;\n        case \"duration\":\n          addFormat(res, \"duration\", check.message, refs);\n          break;\n        case \"length\":\n          res.minLength = typeof res.minLength === \"number\" ? Math.max(res.minLength, check.value) : check.value;\n          res.maxLength = typeof res.maxLength === \"number\" ? Math.min(res.maxLength, check.value) : check.value;\n          break;\n        case \"includes\": {\n          addPattern(\n            res,\n            RegExp(escapeLiteralCheckValue(check.value, refs)),\n            check.message,\n            refs\n          );\n          break;\n        }\n        case \"ip\": {\n          if (check.version !== \"v6\") {\n            addFormat(res, \"ipv4\", check.message, refs);\n          }\n          if (check.version !== \"v4\") {\n            addFormat(res, \"ipv6\", check.message, refs);\n          }\n          break;\n        }\n        case \"base64url\":\n          addPattern(res, zodPatterns.base64url, check.message, refs);\n          break;\n        case \"jwt\":\n          addPattern(res, zodPatterns.jwt, check.message, refs);\n          break;\n        case \"cidr\": {\n          if (check.version !== \"v6\") {\n            addPattern(res, zodPatterns.ipv4Cidr, check.message, refs);\n          }\n          if (check.version !== \"v4\") {\n            addPattern(res, zodPatterns.ipv6Cidr, check.message, refs);\n          }\n          break;\n        }\n        case \"emoji\":\n          addPattern(res, zodPatterns.emoji(), check.message, refs);\n          break;\n        case \"ulid\": {\n          addPattern(res, zodPatterns.ulid, check.message, refs);\n          break;\n        }\n        case \"base64\": {\n          switch (refs.base64Strategy) {\n            case \"format:binary\": {\n              addFormat(res, \"binary\", check.message, refs);\n              break;\n            }\n            case \"contentEncoding:base64\": {\n              res.contentEncoding = \"base64\";\n              break;\n            }\n            case \"pattern:zod\": {\n              addPattern(res, zodPatterns.base64, check.message, refs);\n              break;\n            }\n          }\n          break;\n        }\n        case \"nanoid\": {\n          addPattern(res, zodPatterns.nanoid, check.message, refs);\n        }\n        case \"toLowerCase\":\n        case \"toUpperCase\":\n        case \"trim\":\n          break;\n        default:\n          /* @__PURE__ */ ((_) => {\n          })(check);\n      }\n    }\n  }\n  return res;\n}\nfunction escapeLiteralCheckValue(literal, refs) {\n  return refs.patternStrategy === \"escape\" ? escapeNonAlphaNumeric(literal) : literal;\n}\nvar ALPHA_NUMERIC = new Set(\n  \"ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789\"\n);\nfunction escapeNonAlphaNumeric(source) {\n  let result = \"\";\n  for (let i = 0; i < source.length; i++) {\n    if (!ALPHA_NUMERIC.has(source[i])) {\n      result += \"\\\\\";\n    }\n    result += source[i];\n  }\n  return result;\n}\nfunction addFormat(schema, value, message, refs) {\n  var _a;\n  if (schema.format || ((_a = schema.anyOf) == null ? void 0 : _a.some((x) => x.format))) {\n    if (!schema.anyOf) {\n      schema.anyOf = [];\n    }\n    if (schema.format) {\n      schema.anyOf.push({\n        format: schema.format\n      });\n      delete schema.format;\n    }\n    schema.anyOf.push({\n      format: value,\n      ...message && refs.errorMessages && { errorMessage: { format: message } }\n    });\n  } else {\n    schema.format = value;\n  }\n}\nfunction addPattern(schema, regex, message, refs) {\n  var _a;\n  if (schema.pattern || ((_a = schema.allOf) == null ? void 0 : _a.some((x) => x.pattern))) {\n    if (!schema.allOf) {\n      schema.allOf = [];\n    }\n    if (schema.pattern) {\n      schema.allOf.push({\n        pattern: schema.pattern\n      });\n      delete schema.pattern;\n    }\n    schema.allOf.push({\n      pattern: stringifyRegExpWithFlags(regex, refs),\n      ...message && refs.errorMessages && { errorMessage: { pattern: message } }\n    });\n  } else {\n    schema.pattern = stringifyRegExpWithFlags(regex, refs);\n  }\n}\nfunction stringifyRegExpWithFlags(regex, refs) {\n  var _a;\n  if (!refs.applyRegexFlags || !regex.flags) {\n    return regex.source;\n  }\n  const flags = {\n    i: regex.flags.includes(\"i\"),\n    // Case-insensitive\n    m: regex.flags.includes(\"m\"),\n    // `^` and `$` matches adjacent to newline characters\n    s: regex.flags.includes(\"s\")\n    // `.` matches newlines\n  };\n  const source = flags.i ? regex.source.toLowerCase() : regex.source;\n  let pattern = \"\";\n  let isEscaped = false;\n  let inCharGroup = false;\n  let inCharRange = false;\n  for (let i = 0; i < source.length; i++) {\n    if (isEscaped) {\n      pattern += source[i];\n      isEscaped = false;\n      continue;\n    }\n    if (flags.i) {\n      if (inCharGroup) {\n        if (source[i].match(/[a-z]/)) {\n          if (inCharRange) {\n            pattern += source[i];\n            pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();\n            inCharRange = false;\n          } else if (source[i + 1] === \"-\" && ((_a = source[i + 2]) == null ? void 0 : _a.match(/[a-z]/))) {\n            pattern += source[i];\n            inCharRange = true;\n          } else {\n            pattern += `${source[i]}${source[i].toUpperCase()}`;\n          }\n          continue;\n        }\n      } else if (source[i].match(/[a-z]/)) {\n        pattern += `[${source[i]}${source[i].toUpperCase()}]`;\n        continue;\n      }\n    }\n    if (flags.m) {\n      if (source[i] === \"^\") {\n        pattern += `(^|(?<=[\\r\n]))`;\n        continue;\n      } else if (source[i] === \"$\") {\n        pattern += `($|(?=[\\r\n]))`;\n        continue;\n      }\n    }\n    if (flags.s && source[i] === \".\") {\n      pattern += inCharGroup ? `${source[i]}\\r\n` : `[${source[i]}\\r\n]`;\n      continue;\n    }\n    pattern += source[i];\n    if (source[i] === \"\\\\\") {\n      isEscaped = true;\n    } else if (inCharGroup && source[i] === \"]\") {\n      inCharGroup = false;\n    } else if (!inCharGroup && source[i] === \"[\") {\n      inCharGroup = true;\n    }\n  }\n  try {\n    new RegExp(pattern);\n  } catch (e) {\n    console.warn(\n      `Could not convert regex pattern at ${refs.currentPath.join(\n        \"/\"\n      )} to a flag-independent form! Falling back to the flag-ignorant source`\n    );\n    return regex.source;\n  }\n  return pattern;\n}\n\n// src/zod-to-json-schema/parsers/record.ts\nfunction parseRecordDef(def, refs) {\n  var _a, _b, _c, _d, _e, _f;\n  const schema = {\n    type: \"object\",\n    additionalProperties: (_a = parseDef(def.valueType._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"additionalProperties\"]\n    })) != null ? _a : refs.allowedAdditionalProperties\n  };\n  if (((_b = def.keyType) == null ? void 0 : _b._def.typeName) === zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodString && ((_c = def.keyType._def.checks) == null ? void 0 : _c.length)) {\n    const { type, ...keyType } = parseStringDef(def.keyType._def, refs);\n    return {\n      ...schema,\n      propertyNames: keyType\n    };\n  } else if (((_d = def.keyType) == null ? void 0 : _d._def.typeName) === zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodEnum) {\n    return {\n      ...schema,\n      propertyNames: {\n        enum: def.keyType._def.values\n      }\n    };\n  } else if (((_e = def.keyType) == null ? void 0 : _e._def.typeName) === zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodBranded && def.keyType._def.type._def.typeName === zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodString && ((_f = def.keyType._def.type._def.checks) == null ? void 0 : _f.length)) {\n    const { type, ...keyType } = parseBrandedDef(\n      def.keyType._def,\n      refs\n    );\n    return {\n      ...schema,\n      propertyNames: keyType\n    };\n  }\n  return schema;\n}\n\n// src/zod-to-json-schema/parsers/map.ts\nfunction parseMapDef(def, refs) {\n  if (refs.mapStrategy === \"record\") {\n    return parseRecordDef(def, refs);\n  }\n  const keys = parseDef(def.keyType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"items\", \"items\", \"0\"]\n  }) || parseAnyDef();\n  const values = parseDef(def.valueType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"items\", \"items\", \"1\"]\n  }) || parseAnyDef();\n  return {\n    type: \"array\",\n    maxItems: 125,\n    items: {\n      type: \"array\",\n      items: [keys, values],\n      minItems: 2,\n      maxItems: 2\n    }\n  };\n}\n\n// src/zod-to-json-schema/parsers/native-enum.ts\nfunction parseNativeEnumDef(def) {\n  const object = def.values;\n  const actualKeys = Object.keys(def.values).filter((key) => {\n    return typeof object[object[key]] !== \"number\";\n  });\n  const actualValues = actualKeys.map((key) => object[key]);\n  const parsedTypes = Array.from(\n    new Set(actualValues.map((values) => typeof values))\n  );\n  return {\n    type: parsedTypes.length === 1 ? parsedTypes[0] === \"string\" ? \"string\" : \"number\" : [\"string\", \"number\"],\n    enum: actualValues\n  };\n}\n\n// src/zod-to-json-schema/parsers/never.ts\nfunction parseNeverDef() {\n  return { not: parseAnyDef() };\n}\n\n// src/zod-to-json-schema/parsers/null.ts\nfunction parseNullDef() {\n  return {\n    type: \"null\"\n  };\n}\n\n// src/zod-to-json-schema/parsers/union.ts\nvar primitiveMappings = {\n  ZodString: \"string\",\n  ZodNumber: \"number\",\n  ZodBigInt: \"integer\",\n  ZodBoolean: \"boolean\",\n  ZodNull: \"null\"\n};\nfunction parseUnionDef(def, refs) {\n  const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;\n  if (options.every(\n    (x) => x._def.typeName in primitiveMappings && (!x._def.checks || !x._def.checks.length)\n  )) {\n    const types = options.reduce((types2, x) => {\n      const type = primitiveMappings[x._def.typeName];\n      return type && !types2.includes(type) ? [...types2, type] : types2;\n    }, []);\n    return {\n      type: types.length > 1 ? types : types[0]\n    };\n  } else if (options.every((x) => x._def.typeName === \"ZodLiteral\" && !x.description)) {\n    const types = options.reduce(\n      (acc, x) => {\n        const type = typeof x._def.value;\n        switch (type) {\n          case \"string\":\n          case \"number\":\n          case \"boolean\":\n            return [...acc, type];\n          case \"bigint\":\n            return [...acc, \"integer\"];\n          case \"object\":\n            if (x._def.value === null)\n              return [...acc, \"null\"];\n          case \"symbol\":\n          case \"undefined\":\n          case \"function\":\n          default:\n            return acc;\n        }\n      },\n      []\n    );\n    if (types.length === options.length) {\n      const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);\n      return {\n        type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],\n        enum: options.reduce(\n          (acc, x) => {\n            return acc.includes(x._def.value) ? acc : [...acc, x._def.value];\n          },\n          []\n        )\n      };\n    }\n  } else if (options.every((x) => x._def.typeName === \"ZodEnum\")) {\n    return {\n      type: \"string\",\n      enum: options.reduce(\n        (acc, x) => [\n          ...acc,\n          ...x._def.values.filter((x2) => !acc.includes(x2))\n        ],\n        []\n      )\n    };\n  }\n  return asAnyOf(def, refs);\n}\nvar asAnyOf = (def, refs) => {\n  const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map(\n    (x, i) => parseDef(x._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"anyOf\", `${i}`]\n    })\n  ).filter(\n    (x) => !!x && (!refs.strictUnions || typeof x === \"object\" && Object.keys(x).length > 0)\n  );\n  return anyOf.length ? { anyOf } : void 0;\n};\n\n// src/zod-to-json-schema/parsers/nullable.ts\nfunction parseNullableDef(def, refs) {\n  if ([\"ZodString\", \"ZodNumber\", \"ZodBigInt\", \"ZodBoolean\", \"ZodNull\"].includes(\n    def.innerType._def.typeName\n  ) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {\n    return {\n      type: [\n        primitiveMappings[def.innerType._def.typeName],\n        \"null\"\n      ]\n    };\n  }\n  const base = parseDef(def.innerType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"anyOf\", \"0\"]\n  });\n  return base && { anyOf: [base, { type: \"null\" }] };\n}\n\n// src/zod-to-json-schema/parsers/number.ts\nfunction parseNumberDef(def) {\n  const res = {\n    type: \"number\"\n  };\n  if (!def.checks)\n    return res;\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"int\":\n        res.type = \"integer\";\n        break;\n      case \"min\":\n        if (check.inclusive) {\n          res.minimum = check.value;\n        } else {\n          res.exclusiveMinimum = check.value;\n        }\n        break;\n      case \"max\":\n        if (check.inclusive) {\n          res.maximum = check.value;\n        } else {\n          res.exclusiveMaximum = check.value;\n        }\n        break;\n      case \"multipleOf\":\n        res.multipleOf = check.value;\n        break;\n    }\n  }\n  return res;\n}\n\n// src/zod-to-json-schema/parsers/object.ts\nfunction parseObjectDef(def, refs) {\n  const result = {\n    type: \"object\",\n    properties: {}\n  };\n  const required = [];\n  const shape = def.shape();\n  for (const propName in shape) {\n    let propDef = shape[propName];\n    if (propDef === void 0 || propDef._def === void 0) {\n      continue;\n    }\n    const propOptional = safeIsOptional(propDef);\n    const parsedDef = parseDef(propDef._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"properties\", propName],\n      propertyPath: [...refs.currentPath, \"properties\", propName]\n    });\n    if (parsedDef === void 0) {\n      continue;\n    }\n    result.properties[propName] = parsedDef;\n    if (!propOptional) {\n      required.push(propName);\n    }\n  }\n  if (required.length) {\n    result.required = required;\n  }\n  const additionalProperties = decideAdditionalProperties(def, refs);\n  if (additionalProperties !== void 0) {\n    result.additionalProperties = additionalProperties;\n  }\n  return result;\n}\nfunction decideAdditionalProperties(def, refs) {\n  if (def.catchall._def.typeName !== \"ZodNever\") {\n    return parseDef(def.catchall._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"additionalProperties\"]\n    });\n  }\n  switch (def.unknownKeys) {\n    case \"passthrough\":\n      return refs.allowedAdditionalProperties;\n    case \"strict\":\n      return refs.rejectedAdditionalProperties;\n    case \"strip\":\n      return refs.removeAdditionalStrategy === \"strict\" ? refs.allowedAdditionalProperties : refs.rejectedAdditionalProperties;\n  }\n}\nfunction safeIsOptional(schema) {\n  try {\n    return schema.isOptional();\n  } catch (e) {\n    return true;\n  }\n}\n\n// src/zod-to-json-schema/parsers/optional.ts\nvar parseOptionalDef = (def, refs) => {\n  var _a;\n  if (refs.currentPath.toString() === ((_a = refs.propertyPath) == null ? void 0 : _a.toString())) {\n    return parseDef(def.innerType._def, refs);\n  }\n  const innerSchema = parseDef(def.innerType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"anyOf\", \"1\"]\n  });\n  return innerSchema ? { anyOf: [{ not: parseAnyDef() }, innerSchema] } : parseAnyDef();\n};\n\n// src/zod-to-json-schema/parsers/pipeline.ts\nvar parsePipelineDef = (def, refs) => {\n  if (refs.pipeStrategy === \"input\") {\n    return parseDef(def.in._def, refs);\n  } else if (refs.pipeStrategy === \"output\") {\n    return parseDef(def.out._def, refs);\n  }\n  const a = parseDef(def.in._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"allOf\", \"0\"]\n  });\n  const b = parseDef(def.out._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"allOf\", a ? \"1\" : \"0\"]\n  });\n  return {\n    allOf: [a, b].filter((x) => x !== void 0)\n  };\n};\n\n// src/zod-to-json-schema/parsers/promise.ts\nfunction parsePromiseDef(def, refs) {\n  return parseDef(def.type._def, refs);\n}\n\n// src/zod-to-json-schema/parsers/set.ts\nfunction parseSetDef(def, refs) {\n  const items = parseDef(def.valueType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"items\"]\n  });\n  const schema = {\n    type: \"array\",\n    uniqueItems: true,\n    items\n  };\n  if (def.minSize) {\n    schema.minItems = def.minSize.value;\n  }\n  if (def.maxSize) {\n    schema.maxItems = def.maxSize.value;\n  }\n  return schema;\n}\n\n// src/zod-to-json-schema/parsers/tuple.ts\nfunction parseTupleDef(def, refs) {\n  if (def.rest) {\n    return {\n      type: \"array\",\n      minItems: def.items.length,\n      items: def.items.map(\n        (x, i) => parseDef(x._def, {\n          ...refs,\n          currentPath: [...refs.currentPath, \"items\", `${i}`]\n        })\n      ).reduce(\n        (acc, x) => x === void 0 ? acc : [...acc, x],\n        []\n      ),\n      additionalItems: parseDef(def.rest._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"additionalItems\"]\n      })\n    };\n  } else {\n    return {\n      type: \"array\",\n      minItems: def.items.length,\n      maxItems: def.items.length,\n      items: def.items.map(\n        (x, i) => parseDef(x._def, {\n          ...refs,\n          currentPath: [...refs.currentPath, \"items\", `${i}`]\n        })\n      ).reduce(\n        (acc, x) => x === void 0 ? acc : [...acc, x],\n        []\n      )\n    };\n  }\n}\n\n// src/zod-to-json-schema/parsers/undefined.ts\nfunction parseUndefinedDef() {\n  return {\n    not: parseAnyDef()\n  };\n}\n\n// src/zod-to-json-schema/parsers/unknown.ts\nfunction parseUnknownDef() {\n  return parseAnyDef();\n}\n\n// src/zod-to-json-schema/parsers/readonly.ts\nvar parseReadonlyDef = (def, refs) => {\n  return parseDef(def.innerType._def, refs);\n};\n\n// src/zod-to-json-schema/select-parser.ts\nvar selectParser = (def, typeName, refs) => {\n  switch (typeName) {\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodString:\n      return parseStringDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodNumber:\n      return parseNumberDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodObject:\n      return parseObjectDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodBigInt:\n      return parseBigintDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodBoolean:\n      return parseBooleanDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodDate:\n      return parseDateDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodUndefined:\n      return parseUndefinedDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodNull:\n      return parseNullDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodArray:\n      return parseArrayDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodUnion:\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodDiscriminatedUnion:\n      return parseUnionDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodIntersection:\n      return parseIntersectionDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodTuple:\n      return parseTupleDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodRecord:\n      return parseRecordDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodLiteral:\n      return parseLiteralDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodEnum:\n      return parseEnumDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodNativeEnum:\n      return parseNativeEnumDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodNullable:\n      return parseNullableDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodOptional:\n      return parseOptionalDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodMap:\n      return parseMapDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodSet:\n      return parseSetDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodLazy:\n      return () => def.getter()._def;\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodPromise:\n      return parsePromiseDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodNaN:\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodNever:\n      return parseNeverDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodEffects:\n      return parseEffectsDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodAny:\n      return parseAnyDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodUnknown:\n      return parseUnknownDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodDefault:\n      return parseDefaultDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodBranded:\n      return parseBrandedDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodReadonly:\n      return parseReadonlyDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodCatch:\n      return parseCatchDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodPipeline:\n      return parsePipelineDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodFunction:\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodVoid:\n    case zod_v3__WEBPACK_IMPORTED_MODULE_3__.ZodFirstPartyTypeKind.ZodSymbol:\n      return void 0;\n    default:\n      return /* @__PURE__ */ ((_) => void 0)(typeName);\n  }\n};\n\n// src/zod-to-json-schema/parse-def.ts\nfunction parseDef(def, refs, forceResolution = false) {\n  var _a;\n  const seenItem = refs.seen.get(def);\n  if (refs.override) {\n    const overrideResult = (_a = refs.override) == null ? void 0 : _a.call(\n      refs,\n      def,\n      refs,\n      seenItem,\n      forceResolution\n    );\n    if (overrideResult !== ignoreOverride) {\n      return overrideResult;\n    }\n  }\n  if (seenItem && !forceResolution) {\n    const seenSchema = get$ref(seenItem, refs);\n    if (seenSchema !== void 0) {\n      return seenSchema;\n    }\n  }\n  const newItem = { def, path: refs.currentPath, jsonSchema: void 0 };\n  refs.seen.set(def, newItem);\n  const jsonSchemaOrGetter = selectParser(def, def.typeName, refs);\n  const jsonSchema2 = typeof jsonSchemaOrGetter === \"function\" ? parseDef(jsonSchemaOrGetter(), refs) : jsonSchemaOrGetter;\n  if (jsonSchema2) {\n    addMeta(def, refs, jsonSchema2);\n  }\n  if (refs.postProcess) {\n    const postProcessResult = refs.postProcess(jsonSchema2, def, refs);\n    newItem.jsonSchema = jsonSchema2;\n    return postProcessResult;\n  }\n  newItem.jsonSchema = jsonSchema2;\n  return jsonSchema2;\n}\nvar get$ref = (item, refs) => {\n  switch (refs.$refStrategy) {\n    case \"root\":\n      return { $ref: item.path.join(\"/\") };\n    case \"relative\":\n      return { $ref: getRelativePath(refs.currentPath, item.path) };\n    case \"none\":\n    case \"seen\": {\n      if (item.path.length < refs.currentPath.length && item.path.every((value, index) => refs.currentPath[index] === value)) {\n        console.warn(\n          `Recursive reference detected at ${refs.currentPath.join(\n            \"/\"\n          )}! Defaulting to any`\n        );\n        return parseAnyDef();\n      }\n      return refs.$refStrategy === \"seen\" ? parseAnyDef() : void 0;\n    }\n  }\n};\nvar addMeta = (def, refs, jsonSchema2) => {\n  if (def.description) {\n    jsonSchema2.description = def.description;\n  }\n  return jsonSchema2;\n};\n\n// src/zod-to-json-schema/refs.ts\nvar getRefs = (options) => {\n  const _options = getDefaultOptions(options);\n  const currentPath = _options.name !== void 0 ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;\n  return {\n    ..._options,\n    currentPath,\n    propertyPath: void 0,\n    seen: new Map(\n      Object.entries(_options.definitions).map(([name, def]) => [\n        def._def,\n        {\n          def: def._def,\n          path: [..._options.basePath, _options.definitionPath, name],\n          // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.\n          jsonSchema: void 0\n        }\n      ])\n    )\n  };\n};\n\n// src/zod-to-json-schema/zod-to-json-schema.ts\nvar zodToJsonSchema = (schema, options) => {\n  var _a;\n  const refs = getRefs(options);\n  let definitions = typeof options === \"object\" && options.definitions ? Object.entries(options.definitions).reduce(\n    (acc, [name2, schema2]) => {\n      var _a2;\n      return {\n        ...acc,\n        [name2]: (_a2 = parseDef(\n          schema2._def,\n          {\n            ...refs,\n            currentPath: [...refs.basePath, refs.definitionPath, name2]\n          },\n          true\n        )) != null ? _a2 : parseAnyDef()\n      };\n    },\n    {}\n  ) : void 0;\n  const name = typeof options === \"string\" ? options : (options == null ? void 0 : options.nameStrategy) === \"title\" ? void 0 : options == null ? void 0 : options.name;\n  const main = (_a = parseDef(\n    schema._def,\n    name === void 0 ? refs : {\n      ...refs,\n      currentPath: [...refs.basePath, refs.definitionPath, name]\n    },\n    false\n  )) != null ? _a : parseAnyDef();\n  const title = typeof options === \"object\" && options.name !== void 0 && options.nameStrategy === \"title\" ? options.name : void 0;\n  if (title !== void 0) {\n    main.title = title;\n  }\n  const combined = name === void 0 ? definitions ? {\n    ...main,\n    [refs.definitionPath]: definitions\n  } : main : {\n    $ref: [\n      ...refs.$refStrategy === \"relative\" ? [] : refs.basePath,\n      refs.definitionPath,\n      name\n    ].join(\"/\"),\n    [refs.definitionPath]: {\n      ...definitions,\n      [name]: main\n    }\n  };\n  combined.$schema = \"http://json-schema.org/draft-07/schema#\";\n  return combined;\n};\n\n// src/zod-to-json-schema/index.ts\nvar zod_to_json_schema_default = zodToJsonSchema;\n\n// src/zod-schema.ts\nfunction zod3Schema(zodSchema2, options) {\n  var _a;\n  const useReferences = (_a = options == null ? void 0 : options.useReferences) != null ? _a : false;\n  return jsonSchema(\n    zod_to_json_schema_default(zodSchema2, {\n      $refStrategy: useReferences ? \"root\" : \"none\"\n    }),\n    {\n      validate: async (value) => {\n        const result = await zodSchema2.safeParseAsync(value);\n        return result.success ? { success: true, value: result.data } : { success: false, error: result.error };\n      }\n    }\n  );\n}\nfunction zod4Schema(zodSchema2, options) {\n  var _a;\n  const useReferences = (_a = options == null ? void 0 : options.useReferences) != null ? _a : false;\n  const z4JSONSchema = zod_v4__WEBPACK_IMPORTED_MODULE_2__.toJSONSchema(zodSchema2, {\n    target: \"draft-7\",\n    io: \"output\",\n    reused: useReferences ? \"ref\" : \"inline\"\n  });\n  return jsonSchema(z4JSONSchema, {\n    validate: async (value) => {\n      const result = await zod_v4__WEBPACK_IMPORTED_MODULE_2__.safeParseAsync(zodSchema2, value);\n      return result.success ? { success: true, value: result.data } : { success: false, error: result.error };\n    }\n  });\n}\nfunction isZod4Schema(zodSchema2) {\n  return \"_zod\" in zodSchema2;\n}\nfunction zodSchema(zodSchema2, options) {\n  if (isZod4Schema(zodSchema2)) {\n    return zod4Schema(zodSchema2, options);\n  } else {\n    return zod3Schema(zodSchema2, options);\n  }\n}\n\n// src/schema.ts\nvar schemaSymbol = Symbol.for(\"vercel.ai.schema\");\nfunction jsonSchema(jsonSchema2, {\n  validate\n} = {}) {\n  return {\n    [schemaSymbol]: true,\n    _type: void 0,\n    // should never be used directly\n    [validatorSymbol]: true,\n    jsonSchema: jsonSchema2,\n    validate\n  };\n}\nfunction isSchema(value) {\n  return typeof value === \"object\" && value !== null && schemaSymbol in value && value[schemaSymbol] === true && \"jsonSchema\" in value && \"validate\" in value;\n}\nfunction asSchema(schema) {\n  return schema == null ? jsonSchema({\n    properties: {},\n    additionalProperties: false\n  }) : isSchema(schema) ? schema : zodSchema(schema);\n}\n\n// src/uint8-utils.ts\nvar { btoa, atob } = globalThis;\nfunction convertBase64ToUint8Array(base64String) {\n  const base64Url = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const latin1string = atob(base64Url);\n  return Uint8Array.from(latin1string, (byte) => byte.codePointAt(0));\n}\nfunction convertUint8ArrayToBase64(array) {\n  let latin1string = \"\";\n  for (let i = 0; i < array.length; i++) {\n    latin1string += String.fromCodePoint(array[i]);\n  }\n  return btoa(latin1string);\n}\nfunction convertToBase64(value) {\n  return value instanceof Uint8Array ? convertUint8ArrayToBase64(value) : value;\n}\n\n// src/without-trailing-slash.ts\nfunction withoutTrailingSlash(url) {\n  return url == null ? void 0 : url.replace(/\\/$/, \"\");\n}\n\n// src/is-async-iterable.ts\nfunction isAsyncIterable(obj) {\n  return obj != null && typeof obj[Symbol.asyncIterator] === \"function\";\n}\n\n// src/types/execute-tool.ts\nasync function* executeTool({\n  execute,\n  input,\n  options\n}) {\n  const result = execute(input, options);\n  if (isAsyncIterable(result)) {\n    let lastOutput;\n    for await (const output of result) {\n      lastOutput = output;\n      yield { type: \"preliminary\", output };\n    }\n    yield { type: \"final\", output: lastOutput };\n  } else {\n    yield { type: \"final\", output: await result };\n  }\n}\n\n// src/index.ts\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFpLXNkay9wcm92aWRlci11dGlscy9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixnREFBZ0Q7QUFDdEU7QUFDQTtBQUNBLDhCQUE4QiwyQ0FBMkM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUN3RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxJQUFJO0FBQ047QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7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OztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLFlBQVk7QUFDWixJQUFJO0FBQ0osWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDc0M7QUFHSDtBQXdEakM7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL21hdHN1bW9fYW5kL3NwZWNpZmljYXRpb24tZG9jdW1lbnQtYWdlbnQvbm9kZV9tb2R1bGVzL0BhaS1zZGsvcHJvdmlkZXItdXRpbHMvZGlzdC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbWJpbmUtaGVhZGVycy50c1xuZnVuY3Rpb24gY29tYmluZUhlYWRlcnMoLi4uaGVhZGVycykge1xuICByZXR1cm4gaGVhZGVycy5yZWR1Y2UoXG4gICAgKGNvbWJpbmVkSGVhZGVycywgY3VycmVudEhlYWRlcnMpID0+ICh7XG4gICAgICAuLi5jb21iaW5lZEhlYWRlcnMsXG4gICAgICAuLi5jdXJyZW50SGVhZGVycyAhPSBudWxsID8gY3VycmVudEhlYWRlcnMgOiB7fVxuICAgIH0pLFxuICAgIHt9XG4gICk7XG59XG5cbi8vIHNyYy9jb252ZXJ0LWFzeW5jLWl0ZXJhdG9yLXRvLXJlYWRhYmxlLXN0cmVhbS50c1xuZnVuY3Rpb24gY29udmVydEFzeW5jSXRlcmF0b3JUb1JlYWRhYmxlU3RyZWFtKGl0ZXJhdG9yKSB7XG4gIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBjb25zdW1lciB3YW50cyB0byBwdWxsIG1vcmUgZGF0YSBmcm9tIHRoZSBzdHJlYW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXI8VD59IGNvbnRyb2xsZXIgLSBUaGUgY29udHJvbGxlciB0byBlbnF1ZXVlIGRhdGEgaW50byB0aGUgc3RyZWFtLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb250cm9sbGVyLmVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBjb25zdW1lciBjYW5jZWxzIHRoZSBzdHJlYW0uXG4gICAgICovXG4gICAgY2FuY2VsKCkge1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIHNyYy9kZWxheS50c1xuYXN5bmMgZnVuY3Rpb24gZGVsYXkoZGVsYXlJbk1zLCBvcHRpb25zKSB7XG4gIGlmIChkZWxheUluTXMgPT0gbnVsbCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuICBjb25zdCBzaWduYWwgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmFib3J0U2lnbmFsO1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUyLCByZWplY3QpID0+IHtcbiAgICBpZiAoc2lnbmFsID09IG51bGwgPyB2b2lkIDAgOiBzaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUFib3J0RXJyb3IoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgcmVzb2x2ZTIoKTtcbiAgICB9LCBkZWxheUluTXMpO1xuICAgIGNvbnN0IGNsZWFudXAgPSAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIHNpZ25hbCA9PSBudWxsID8gdm9pZCAwIDogc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB9O1xuICAgIGNvbnN0IG9uQWJvcnQgPSAoKSA9PiB7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgICByZWplY3QoY3JlYXRlQWJvcnRFcnJvcigpKTtcbiAgICB9O1xuICAgIHNpZ25hbCA9PSBudWxsID8gdm9pZCAwIDogc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVBYm9ydEVycm9yKCkge1xuICByZXR1cm4gbmV3IERPTUV4Y2VwdGlvbihcIkRlbGF5IHdhcyBhYm9ydGVkXCIsIFwiQWJvcnRFcnJvclwiKTtcbn1cblxuLy8gc3JjL2V4dHJhY3QtcmVzcG9uc2UtaGVhZGVycy50c1xuZnVuY3Rpb24gZXh0cmFjdFJlc3BvbnNlSGVhZGVycyhyZXNwb25zZSkge1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFsuLi5yZXNwb25zZS5oZWFkZXJzXSk7XG59XG5cbi8vIHNyYy9nZXQtcnVudGltZS1lbnZpcm9ubWVudC11c2VyLWFnZW50LnRzXG5mdW5jdGlvbiBnZXRSdW50aW1lRW52aXJvbm1lbnRVc2VyQWdlbnQoZ2xvYmFsVGhpc0FueSA9IGdsb2JhbFRoaXMpIHtcbiAgdmFyIF9hLCBfYiwgX2M7XG4gIGlmIChnbG9iYWxUaGlzQW55LndpbmRvdykge1xuICAgIHJldHVybiBgcnVudGltZS9icm93c2VyYDtcbiAgfVxuICBpZiAoKF9hID0gZ2xvYmFsVGhpc0FueS5uYXZpZ2F0b3IpID09IG51bGwgPyB2b2lkIDAgOiBfYS51c2VyQWdlbnQpIHtcbiAgICByZXR1cm4gYHJ1bnRpbWUvJHtnbG9iYWxUaGlzQW55Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKX1gO1xuICB9XG4gIGlmICgoX2MgPSAoX2IgPSBnbG9iYWxUaGlzQW55LnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfYi52ZXJzaW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLm5vZGUpIHtcbiAgICByZXR1cm4gYHJ1bnRpbWUvbm9kZS5qcy8ke2dsb2JhbFRoaXNBbnkucHJvY2Vzcy52ZXJzaW9uLnN1YnN0cmluZygwKX1gO1xuICB9XG4gIGlmIChnbG9iYWxUaGlzQW55LkVkZ2VSdW50aW1lKSB7XG4gICAgcmV0dXJuIGBydW50aW1lL3ZlcmNlbC1lZGdlYDtcbiAgfVxuICByZXR1cm4gXCJydW50aW1lL3Vua25vd25cIjtcbn1cblxuLy8gc3JjL3JlbW92ZS11bmRlZmluZWQtZW50cmllcy50c1xuZnVuY3Rpb24gcmVtb3ZlVW5kZWZpbmVkRW50cmllcyhyZWNvcmQpIHtcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICBPYmplY3QuZW50cmllcyhyZWNvcmQpLmZpbHRlcigoW19rZXksIHZhbHVlXSkgPT4gdmFsdWUgIT0gbnVsbClcbiAgKTtcbn1cblxuLy8gc3JjL3dpdGgtdXNlci1hZ2VudC1zdWZmaXgudHNcbmZ1bmN0aW9uIHdpdGhVc2VyQWdlbnRTdWZmaXgoaGVhZGVycywgLi4udXNlckFnZW50U3VmZml4UGFydHMpIHtcbiAgY29uc3QgY2xlYW5lZEhlYWRlcnMgPSByZW1vdmVVbmRlZmluZWRFbnRyaWVzKFxuICAgIGhlYWRlcnMgIT0gbnVsbCA/IGhlYWRlcnMgOiB7fVxuICApO1xuICBjb25zdCBub3JtYWxpemVkSGVhZGVycyA9IG5ldyBIZWFkZXJzKGNsZWFuZWRIZWFkZXJzKTtcbiAgY29uc3QgY3VycmVudFVzZXJBZ2VudEhlYWRlciA9IG5vcm1hbGl6ZWRIZWFkZXJzLmdldChcInVzZXItYWdlbnRcIikgfHwgXCJcIjtcbiAgbm9ybWFsaXplZEhlYWRlcnMuc2V0KFxuICAgIFwidXNlci1hZ2VudFwiLFxuICAgIFtjdXJyZW50VXNlckFnZW50SGVhZGVyLCAuLi51c2VyQWdlbnRTdWZmaXhQYXJ0c10uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpXG4gICk7XG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMobm9ybWFsaXplZEhlYWRlcnMpO1xufVxuXG4vLyBzcmMvZ2VuZXJhdGUtaWQudHNcbmltcG9ydCB7IEludmFsaWRBcmd1bWVudEVycm9yIH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXJcIjtcbnZhciBjcmVhdGVJZEdlbmVyYXRvciA9ICh7XG4gIHByZWZpeCxcbiAgc2l6ZSA9IDE2LFxuICBhbHBoYWJldCA9IFwiMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIixcbiAgc2VwYXJhdG9yID0gXCItXCJcbn0gPSB7fSkgPT4ge1xuICBjb25zdCBnZW5lcmF0b3IgPSAoKSA9PiB7XG4gICAgY29uc3QgYWxwaGFiZXRMZW5ndGggPSBhbHBoYWJldC5sZW5ndGg7XG4gICAgY29uc3QgY2hhcnMgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgIGNoYXJzW2ldID0gYWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIGFscGhhYmV0TGVuZ3RoIHwgMF07XG4gICAgfVxuICAgIHJldHVybiBjaGFycy5qb2luKFwiXCIpO1xuICB9O1xuICBpZiAocHJlZml4ID09IG51bGwpIHtcbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGlmIChhbHBoYWJldC5pbmNsdWRlcyhzZXBhcmF0b3IpKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKHtcbiAgICAgIGFyZ3VtZW50OiBcInNlcGFyYXRvclwiLFxuICAgICAgbWVzc2FnZTogYFRoZSBzZXBhcmF0b3IgXCIke3NlcGFyYXRvcn1cIiBtdXN0IG5vdCBiZSBwYXJ0IG9mIHRoZSBhbHBoYWJldCBcIiR7YWxwaGFiZXR9XCIuYFxuICAgIH0pO1xuICB9XG4gIHJldHVybiAoKSA9PiBgJHtwcmVmaXh9JHtzZXBhcmF0b3J9JHtnZW5lcmF0b3IoKX1gO1xufTtcbnZhciBnZW5lcmF0ZUlkID0gY3JlYXRlSWRHZW5lcmF0b3IoKTtcblxuLy8gc3JjL2dldC1lcnJvci1tZXNzYWdlLnRzXG5mdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2UoZXJyb3IpIHtcbiAgaWYgKGVycm9yID09IG51bGwpIHtcbiAgICByZXR1cm4gXCJ1bmtub3duIGVycm9yXCI7XG4gIH1cbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBlcnJvci5tZXNzYWdlO1xuICB9XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShlcnJvcik7XG59XG5cbi8vIHNyYy9nZXQtZnJvbS1hcGkudHNcbmltcG9ydCB7IEFQSUNhbGxFcnJvciBhcyBBUElDYWxsRXJyb3IyIH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXJcIjtcblxuLy8gc3JjL2hhbmRsZS1mZXRjaC1lcnJvci50c1xuaW1wb3J0IHsgQVBJQ2FsbEVycm9yIH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXJcIjtcblxuLy8gc3JjL2lzLWFib3J0LWVycm9yLnRzXG5mdW5jdGlvbiBpc0Fib3J0RXJyb3IoZXJyb3IpIHtcbiAgcmV0dXJuIChlcnJvciBpbnN0YW5jZW9mIEVycm9yIHx8IGVycm9yIGluc3RhbmNlb2YgRE9NRXhjZXB0aW9uKSAmJiAoZXJyb3IubmFtZSA9PT0gXCJBYm9ydEVycm9yXCIgfHwgZXJyb3IubmFtZSA9PT0gXCJSZXNwb25zZUFib3J0ZWRcIiB8fCAvLyBOZXh0LmpzXG4gIGVycm9yLm5hbWUgPT09IFwiVGltZW91dEVycm9yXCIpO1xufVxuXG4vLyBzcmMvaGFuZGxlLWZldGNoLWVycm9yLnRzXG52YXIgRkVUQ0hfRkFJTEVEX0VSUk9SX01FU1NBR0VTID0gW1wiZmV0Y2ggZmFpbGVkXCIsIFwiZmFpbGVkIHRvIGZldGNoXCJdO1xuZnVuY3Rpb24gaGFuZGxlRmV0Y2hFcnJvcih7XG4gIGVycm9yLFxuICB1cmwsXG4gIHJlcXVlc3RCb2R5VmFsdWVzXG59KSB7XG4gIGlmIChpc0Fib3J0RXJyb3IoZXJyb3IpKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIFR5cGVFcnJvciAmJiBGRVRDSF9GQUlMRURfRVJST1JfTUVTU0FHRVMuaW5jbHVkZXMoZXJyb3IubWVzc2FnZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIGNvbnN0IGNhdXNlID0gZXJyb3IuY2F1c2U7XG4gICAgaWYgKGNhdXNlICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgQVBJQ2FsbEVycm9yKHtcbiAgICAgICAgbWVzc2FnZTogYENhbm5vdCBjb25uZWN0IHRvIEFQSTogJHtjYXVzZS5tZXNzYWdlfWAsXG4gICAgICAgIGNhdXNlLFxuICAgICAgICB1cmwsXG4gICAgICAgIHJlcXVlc3RCb2R5VmFsdWVzLFxuICAgICAgICBpc1JldHJ5YWJsZTogdHJ1ZVxuICAgICAgICAvLyByZXRyeSB3aGVuIG5ldHdvcmsgZXJyb3JcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZXJyb3I7XG59XG5cbi8vIHNyYy92ZXJzaW9uLnRzXG52YXIgVkVSU0lPTiA9IHRydWUgPyBcIjMuMC45XCIgOiBcIjAuMC4wLXRlc3RcIjtcblxuLy8gc3JjL2dldC1mcm9tLWFwaS50c1xudmFyIGdldE9yaWdpbmFsRmV0Y2ggPSAoKSA9PiBnbG9iYWxUaGlzLmZldGNoO1xudmFyIGdldEZyb21BcGkgPSBhc3luYyAoe1xuICB1cmwsXG4gIGhlYWRlcnMgPSB7fSxcbiAgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcixcbiAgZmFpbGVkUmVzcG9uc2VIYW5kbGVyLFxuICBhYm9ydFNpZ25hbCxcbiAgZmV0Y2ggPSBnZXRPcmlnaW5hbEZldGNoKClcbn0pID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgaGVhZGVyczogd2l0aFVzZXJBZ2VudFN1ZmZpeChcbiAgICAgICAgaGVhZGVycyxcbiAgICAgICAgYGFpLXNkay9wcm92aWRlci11dGlscy8ke1ZFUlNJT059YCxcbiAgICAgICAgZ2V0UnVudGltZUVudmlyb25tZW50VXNlckFnZW50KClcbiAgICAgICksXG4gICAgICBzaWduYWw6IGFib3J0U2lnbmFsXG4gICAgfSk7XG4gICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gZXh0cmFjdFJlc3BvbnNlSGVhZGVycyhyZXNwb25zZSk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgbGV0IGVycm9ySW5mb3JtYXRpb247XG4gICAgICB0cnkge1xuICAgICAgICBlcnJvckluZm9ybWF0aW9uID0gYXdhaXQgZmFpbGVkUmVzcG9uc2VIYW5kbGVyKHtcbiAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICB1cmwsXG4gICAgICAgICAgcmVxdWVzdEJvZHlWYWx1ZXM6IHt9XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGlzQWJvcnRFcnJvcihlcnJvcikgfHwgQVBJQ2FsbEVycm9yMi5pc0luc3RhbmNlKGVycm9yKSkge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBBUElDYWxsRXJyb3IyKHtcbiAgICAgICAgICBtZXNzYWdlOiBcIkZhaWxlZCB0byBwcm9jZXNzIGVycm9yIHJlc3BvbnNlXCIsXG4gICAgICAgICAgY2F1c2U6IGVycm9yLFxuICAgICAgICAgIHN0YXR1c0NvZGU6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICB1cmwsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICAgIHJlcXVlc3RCb2R5VmFsdWVzOiB7fVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9ySW5mb3JtYXRpb24udmFsdWU7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcih7XG4gICAgICAgIHJlc3BvbnNlLFxuICAgICAgICB1cmwsXG4gICAgICAgIHJlcXVlc3RCb2R5VmFsdWVzOiB7fVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGlmIChpc0Fib3J0RXJyb3IoZXJyb3IpIHx8IEFQSUNhbGxFcnJvcjIuaXNJbnN0YW5jZShlcnJvcikpIHtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEFQSUNhbGxFcnJvcjIoe1xuICAgICAgICBtZXNzYWdlOiBcIkZhaWxlZCB0byBwcm9jZXNzIHN1Y2Nlc3NmdWwgcmVzcG9uc2VcIixcbiAgICAgICAgY2F1c2U6IGVycm9yLFxuICAgICAgICBzdGF0dXNDb2RlOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgIHVybCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICByZXF1ZXN0Qm9keVZhbHVlczoge31cbiAgICAgIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBoYW5kbGVGZXRjaEVycm9yKHsgZXJyb3IsIHVybCwgcmVxdWVzdEJvZHlWYWx1ZXM6IHt9IH0pO1xuICB9XG59O1xuXG4vLyBzcmMvaW5qZWN0LWpzb24taW5zdHJ1Y3Rpb24udHNcbnZhciBERUZBVUxUX1NDSEVNQV9QUkVGSVggPSBcIkpTT04gc2NoZW1hOlwiO1xudmFyIERFRkFVTFRfU0NIRU1BX1NVRkZJWCA9IFwiWW91IE1VU1QgYW5zd2VyIHdpdGggYSBKU09OIG9iamVjdCB0aGF0IG1hdGNoZXMgdGhlIEpTT04gc2NoZW1hIGFib3ZlLlwiO1xudmFyIERFRkFVTFRfR0VORVJJQ19TVUZGSVggPSBcIllvdSBNVVNUIGFuc3dlciB3aXRoIEpTT04uXCI7XG5mdW5jdGlvbiBpbmplY3RKc29uSW5zdHJ1Y3Rpb24oe1xuICBwcm9tcHQsXG4gIHNjaGVtYSxcbiAgc2NoZW1hUHJlZml4ID0gc2NoZW1hICE9IG51bGwgPyBERUZBVUxUX1NDSEVNQV9QUkVGSVggOiB2b2lkIDAsXG4gIHNjaGVtYVN1ZmZpeCA9IHNjaGVtYSAhPSBudWxsID8gREVGQVVMVF9TQ0hFTUFfU1VGRklYIDogREVGQVVMVF9HRU5FUklDX1NVRkZJWFxufSkge1xuICByZXR1cm4gW1xuICAgIHByb21wdCAhPSBudWxsICYmIHByb21wdC5sZW5ndGggPiAwID8gcHJvbXB0IDogdm9pZCAwLFxuICAgIHByb21wdCAhPSBudWxsICYmIHByb21wdC5sZW5ndGggPiAwID8gXCJcIiA6IHZvaWQgMCxcbiAgICAvLyBhZGQgYSBuZXdsaW5lIGlmIHByb21wdCBpcyBub3QgbnVsbFxuICAgIHNjaGVtYVByZWZpeCxcbiAgICBzY2hlbWEgIT0gbnVsbCA/IEpTT04uc3RyaW5naWZ5KHNjaGVtYSkgOiB2b2lkIDAsXG4gICAgc2NoZW1hU3VmZml4XG4gIF0uZmlsdGVyKChsaW5lKSA9PiBsaW5lICE9IG51bGwpLmpvaW4oXCJcXG5cIik7XG59XG5mdW5jdGlvbiBpbmplY3RKc29uSW5zdHJ1Y3Rpb25JbnRvTWVzc2FnZXMoe1xuICBtZXNzYWdlcyxcbiAgc2NoZW1hLFxuICBzY2hlbWFQcmVmaXgsXG4gIHNjaGVtYVN1ZmZpeFxufSkge1xuICB2YXIgX2EsIF9iO1xuICBjb25zdCBzeXN0ZW1NZXNzYWdlID0gKChfYSA9IG1lc3NhZ2VzWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2Eucm9sZSkgPT09IFwic3lzdGVtXCIgPyB7IC4uLm1lc3NhZ2VzWzBdIH0gOiB7IHJvbGU6IFwic3lzdGVtXCIsIGNvbnRlbnQ6IFwiXCIgfTtcbiAgc3lzdGVtTWVzc2FnZS5jb250ZW50ID0gaW5qZWN0SnNvbkluc3RydWN0aW9uKHtcbiAgICBwcm9tcHQ6IHN5c3RlbU1lc3NhZ2UuY29udGVudCxcbiAgICBzY2hlbWEsXG4gICAgc2NoZW1hUHJlZml4LFxuICAgIHNjaGVtYVN1ZmZpeFxuICB9KTtcbiAgcmV0dXJuIFtcbiAgICBzeXN0ZW1NZXNzYWdlLFxuICAgIC4uLigoX2IgPSBtZXNzYWdlc1swXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnJvbGUpID09PSBcInN5c3RlbVwiID8gbWVzc2FnZXMuc2xpY2UoMSkgOiBtZXNzYWdlc1xuICBdO1xufVxuXG4vLyBzcmMvaXMtdXJsLXN1cHBvcnRlZC50c1xuZnVuY3Rpb24gaXNVcmxTdXBwb3J0ZWQoe1xuICBtZWRpYVR5cGUsXG4gIHVybCxcbiAgc3VwcG9ydGVkVXJsc1xufSkge1xuICB1cmwgPSB1cmwudG9Mb3dlckNhc2UoKTtcbiAgbWVkaWFUeXBlID0gbWVkaWFUeXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhzdXBwb3J0ZWRVcmxzKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGNvbnN0IG1lZGlhVHlwZTIgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gbWVkaWFUeXBlMiA9PT0gXCIqXCIgfHwgbWVkaWFUeXBlMiA9PT0gXCIqLypcIiA/IHsgbWVkaWFUeXBlUHJlZml4OiBcIlwiLCByZWdleGVzOiB2YWx1ZSB9IDogeyBtZWRpYVR5cGVQcmVmaXg6IG1lZGlhVHlwZTIucmVwbGFjZSgvXFwqLywgXCJcIiksIHJlZ2V4ZXM6IHZhbHVlIH07XG4gIH0pLmZpbHRlcigoeyBtZWRpYVR5cGVQcmVmaXggfSkgPT4gbWVkaWFUeXBlLnN0YXJ0c1dpdGgobWVkaWFUeXBlUHJlZml4KSkuZmxhdE1hcCgoeyByZWdleGVzIH0pID0+IHJlZ2V4ZXMpLnNvbWUoKHBhdHRlcm4pID0+IHBhdHRlcm4udGVzdCh1cmwpKTtcbn1cblxuLy8gc3JjL2xvYWQtYXBpLWtleS50c1xuaW1wb3J0IHsgTG9hZEFQSUtleUVycm9yIH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXJcIjtcbmZ1bmN0aW9uIGxvYWRBcGlLZXkoe1xuICBhcGlLZXksXG4gIGVudmlyb25tZW50VmFyaWFibGVOYW1lLFxuICBhcGlLZXlQYXJhbWV0ZXJOYW1lID0gXCJhcGlLZXlcIixcbiAgZGVzY3JpcHRpb25cbn0pIHtcbiAgaWYgKHR5cGVvZiBhcGlLZXkgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gYXBpS2V5O1xuICB9XG4gIGlmIChhcGlLZXkgIT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBMb2FkQVBJS2V5RXJyb3Ioe1xuICAgICAgbWVzc2FnZTogYCR7ZGVzY3JpcHRpb259IEFQSSBrZXkgbXVzdCBiZSBhIHN0cmluZy5gXG4gICAgfSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IExvYWRBUElLZXlFcnJvcih7XG4gICAgICBtZXNzYWdlOiBgJHtkZXNjcmlwdGlvbn0gQVBJIGtleSBpcyBtaXNzaW5nLiBQYXNzIGl0IHVzaW5nIHRoZSAnJHthcGlLZXlQYXJhbWV0ZXJOYW1lfScgcGFyYW1ldGVyLiBFbnZpcm9ubWVudCB2YXJpYWJsZXMgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50LmBcbiAgICB9KTtcbiAgfVxuICBhcGlLZXkgPSBwcm9jZXNzLmVudltlbnZpcm9ubWVudFZhcmlhYmxlTmFtZV07XG4gIGlmIChhcGlLZXkgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBMb2FkQVBJS2V5RXJyb3Ioe1xuICAgICAgbWVzc2FnZTogYCR7ZGVzY3JpcHRpb259IEFQSSBrZXkgaXMgbWlzc2luZy4gUGFzcyBpdCB1c2luZyB0aGUgJyR7YXBpS2V5UGFyYW1ldGVyTmFtZX0nIHBhcmFtZXRlciBvciB0aGUgJHtlbnZpcm9ubWVudFZhcmlhYmxlTmFtZX0gZW52aXJvbm1lbnQgdmFyaWFibGUuYFxuICAgIH0pO1xuICB9XG4gIGlmICh0eXBlb2YgYXBpS2V5ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IExvYWRBUElLZXlFcnJvcih7XG4gICAgICBtZXNzYWdlOiBgJHtkZXNjcmlwdGlvbn0gQVBJIGtleSBtdXN0IGJlIGEgc3RyaW5nLiBUaGUgdmFsdWUgb2YgdGhlICR7ZW52aXJvbm1lbnRWYXJpYWJsZU5hbWV9IGVudmlyb25tZW50IHZhcmlhYmxlIGlzIG5vdCBhIHN0cmluZy5gXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGFwaUtleTtcbn1cblxuLy8gc3JjL2xvYWQtb3B0aW9uYWwtc2V0dGluZy50c1xuZnVuY3Rpb24gbG9hZE9wdGlvbmFsU2V0dGluZyh7XG4gIHNldHRpbmdWYWx1ZSxcbiAgZW52aXJvbm1lbnRWYXJpYWJsZU5hbWVcbn0pIHtcbiAgaWYgKHR5cGVvZiBzZXR0aW5nVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gc2V0dGluZ1ZhbHVlO1xuICB9XG4gIGlmIChzZXR0aW5nVmFsdWUgIT0gbnVsbCB8fCB0eXBlb2YgcHJvY2VzcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgc2V0dGluZ1ZhbHVlID0gcHJvY2Vzcy5lbnZbZW52aXJvbm1lbnRWYXJpYWJsZU5hbWVdO1xuICBpZiAoc2V0dGluZ1ZhbHVlID09IG51bGwgfHwgdHlwZW9mIHNldHRpbmdWYWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgcmV0dXJuIHNldHRpbmdWYWx1ZTtcbn1cblxuLy8gc3JjL2xvYWQtc2V0dGluZy50c1xuaW1wb3J0IHsgTG9hZFNldHRpbmdFcnJvciB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyXCI7XG5mdW5jdGlvbiBsb2FkU2V0dGluZyh7XG4gIHNldHRpbmdWYWx1ZSxcbiAgZW52aXJvbm1lbnRWYXJpYWJsZU5hbWUsXG4gIHNldHRpbmdOYW1lLFxuICBkZXNjcmlwdGlvblxufSkge1xuICBpZiAodHlwZW9mIHNldHRpbmdWYWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBzZXR0aW5nVmFsdWU7XG4gIH1cbiAgaWYgKHNldHRpbmdWYWx1ZSAhPSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IExvYWRTZXR0aW5nRXJyb3Ioe1xuICAgICAgbWVzc2FnZTogYCR7ZGVzY3JpcHRpb259IHNldHRpbmcgbXVzdCBiZSBhIHN0cmluZy5gXG4gICAgfSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IExvYWRTZXR0aW5nRXJyb3Ioe1xuICAgICAgbWVzc2FnZTogYCR7ZGVzY3JpcHRpb259IHNldHRpbmcgaXMgbWlzc2luZy4gUGFzcyBpdCB1c2luZyB0aGUgJyR7c2V0dGluZ05hbWV9JyBwYXJhbWV0ZXIuIEVudmlyb25tZW50IHZhcmlhYmxlcyBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQuYFxuICAgIH0pO1xuICB9XG4gIHNldHRpbmdWYWx1ZSA9IHByb2Nlc3MuZW52W2Vudmlyb25tZW50VmFyaWFibGVOYW1lXTtcbiAgaWYgKHNldHRpbmdWYWx1ZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IExvYWRTZXR0aW5nRXJyb3Ioe1xuICAgICAgbWVzc2FnZTogYCR7ZGVzY3JpcHRpb259IHNldHRpbmcgaXMgbWlzc2luZy4gUGFzcyBpdCB1c2luZyB0aGUgJyR7c2V0dGluZ05hbWV9JyBwYXJhbWV0ZXIgb3IgdGhlICR7ZW52aXJvbm1lbnRWYXJpYWJsZU5hbWV9IGVudmlyb25tZW50IHZhcmlhYmxlLmBcbiAgICB9KTtcbiAgfVxuICBpZiAodHlwZW9mIHNldHRpbmdWYWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBMb2FkU2V0dGluZ0Vycm9yKHtcbiAgICAgIG1lc3NhZ2U6IGAke2Rlc2NyaXB0aW9ufSBzZXR0aW5nIG11c3QgYmUgYSBzdHJpbmcuIFRoZSB2YWx1ZSBvZiB0aGUgJHtlbnZpcm9ubWVudFZhcmlhYmxlTmFtZX0gZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgbm90IGEgc3RyaW5nLmBcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc2V0dGluZ1ZhbHVlO1xufVxuXG4vLyBzcmMvbWVkaWEtdHlwZS10by1leHRlbnNpb24udHNcbmZ1bmN0aW9uIG1lZGlhVHlwZVRvRXh0ZW5zaW9uKG1lZGlhVHlwZSkge1xuICB2YXIgX2E7XG4gIGNvbnN0IFtfdHlwZSwgc3VidHlwZSA9IFwiXCJdID0gbWVkaWFUeXBlLnRvTG93ZXJDYXNlKCkuc3BsaXQoXCIvXCIpO1xuICByZXR1cm4gKF9hID0ge1xuICAgIG1wZWc6IFwibXAzXCIsXG4gICAgXCJ4LXdhdlwiOiBcIndhdlwiLFxuICAgIG9wdXM6IFwib2dnXCIsXG4gICAgbXA0OiBcIm00YVwiLFxuICAgIFwieC1tNGFcIjogXCJtNGFcIlxuICB9W3N1YnR5cGVdKSAhPSBudWxsID8gX2EgOiBzdWJ0eXBlO1xufVxuXG4vLyBzcmMvcGFyc2UtanNvbi50c1xuaW1wb3J0IHtcbiAgSlNPTlBhcnNlRXJyb3IsXG4gIFR5cGVWYWxpZGF0aW9uRXJyb3IgYXMgVHlwZVZhbGlkYXRpb25FcnJvcjNcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXJcIjtcblxuLy8gc3JjL3NlY3VyZS1qc29uLXBhcnNlLnRzXG52YXIgc3VzcGVjdFByb3RvUnggPSAvXCJfX3Byb3RvX19cIlxccyo6LztcbnZhciBzdXNwZWN0Q29uc3RydWN0b3JSeCA9IC9cImNvbnN0cnVjdG9yXCJcXHMqOi87XG5mdW5jdGlvbiBfcGFyc2UodGV4dCkge1xuICBjb25zdCBvYmogPSBKU09OLnBhcnNlKHRleHQpO1xuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIGlmIChzdXNwZWN0UHJvdG9SeC50ZXN0KHRleHQpID09PSBmYWxzZSAmJiBzdXNwZWN0Q29uc3RydWN0b3JSeC50ZXN0KHRleHQpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgcmV0dXJuIGZpbHRlcihvYmopO1xufVxuZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICBsZXQgbmV4dCA9IFtvYmpdO1xuICB3aGlsZSAobmV4dC5sZW5ndGgpIHtcbiAgICBjb25zdCBub2RlcyA9IG5leHQ7XG4gICAgbmV4dCA9IFtdO1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChub2RlLCBcIl9fcHJvdG9fX1wiKSkge1xuICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJPYmplY3QgY29udGFpbnMgZm9yYmlkZGVuIHByb3RvdHlwZSBwcm9wZXJ0eVwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobm9kZSwgXCJjb25zdHJ1Y3RvclwiKSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobm9kZS5jb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiT2JqZWN0IGNvbnRhaW5zIGZvcmJpZGRlbiBwcm90b3R5cGUgcHJvcGVydHlcIik7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBub2RlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gbm9kZVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgbmV4dC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gc2VjdXJlSnNvblBhcnNlKHRleHQpIHtcbiAgY29uc3QgeyBzdGFja1RyYWNlTGltaXQgfSA9IEVycm9yO1xuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSAwO1xuICB0cnkge1xuICAgIHJldHVybiBfcGFyc2UodGV4dCk7XG4gIH0gZmluYWxseSB7XG4gICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gc3RhY2tUcmFjZUxpbWl0O1xuICB9XG59XG5cbi8vIHNyYy92YWxpZGF0ZS10eXBlcy50c1xuaW1wb3J0IHsgVHlwZVZhbGlkYXRpb25FcnJvciBhcyBUeXBlVmFsaWRhdGlvbkVycm9yMiB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyXCI7XG5cbi8vIHNyYy92YWxpZGF0b3IudHNcbmltcG9ydCB7IFR5cGVWYWxpZGF0aW9uRXJyb3IgfSBmcm9tIFwiQGFpLXNkay9wcm92aWRlclwiO1xudmFyIHZhbGlkYXRvclN5bWJvbCA9IFN5bWJvbC5mb3IoXCJ2ZXJjZWwuYWkudmFsaWRhdG9yXCIpO1xuZnVuY3Rpb24gdmFsaWRhdG9yKHZhbGlkYXRlKSB7XG4gIHJldHVybiB7IFt2YWxpZGF0b3JTeW1ib2xdOiB0cnVlLCB2YWxpZGF0ZSB9O1xufVxuZnVuY3Rpb24gaXNWYWxpZGF0b3IodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWxpZGF0b3JTeW1ib2wgaW4gdmFsdWUgJiYgdmFsdWVbdmFsaWRhdG9yU3ltYm9sXSA9PT0gdHJ1ZSAmJiBcInZhbGlkYXRlXCIgaW4gdmFsdWU7XG59XG5mdW5jdGlvbiBhc1ZhbGlkYXRvcih2YWx1ZSkge1xuICByZXR1cm4gaXNWYWxpZGF0b3IodmFsdWUpID8gdmFsdWUgOiBzdGFuZGFyZFNjaGVtYVZhbGlkYXRvcih2YWx1ZSk7XG59XG5mdW5jdGlvbiBzdGFuZGFyZFNjaGVtYVZhbGlkYXRvcihzdGFuZGFyZFNjaGVtYSkge1xuICByZXR1cm4gdmFsaWRhdG9yKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0YW5kYXJkU2NoZW1hW1wifnN0YW5kYXJkXCJdLnZhbGlkYXRlKHZhbHVlKTtcbiAgICByZXR1cm4gcmVzdWx0Lmlzc3VlcyA9PSBudWxsID8geyBzdWNjZXNzOiB0cnVlLCB2YWx1ZTogcmVzdWx0LnZhbHVlIH0gOiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBuZXcgVHlwZVZhbGlkYXRpb25FcnJvcih7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBjYXVzZTogcmVzdWx0Lmlzc3Vlc1xuICAgICAgfSlcbiAgICB9O1xuICB9KTtcbn1cblxuLy8gc3JjL3ZhbGlkYXRlLXR5cGVzLnRzXG5hc3luYyBmdW5jdGlvbiB2YWxpZGF0ZVR5cGVzKHtcbiAgdmFsdWUsXG4gIHNjaGVtYVxufSkge1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBzYWZlVmFsaWRhdGVUeXBlcyh7IHZhbHVlLCBzY2hlbWEgfSk7XG4gIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICB0aHJvdyBUeXBlVmFsaWRhdGlvbkVycm9yMi53cmFwKHsgdmFsdWUsIGNhdXNlOiByZXN1bHQuZXJyb3IgfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNhZmVWYWxpZGF0ZVR5cGVzKHtcbiAgdmFsdWUsXG4gIHNjaGVtYVxufSkge1xuICBjb25zdCB2YWxpZGF0b3IyID0gYXNWYWxpZGF0b3Ioc2NoZW1hKTtcbiAgdHJ5IHtcbiAgICBpZiAodmFsaWRhdG9yMi52YWxpZGF0ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCB2YWx1ZSwgcmF3VmFsdWU6IHZhbHVlIH07XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvcjIudmFsaWRhdGUodmFsdWUpO1xuICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgdmFsdWU6IHJlc3VsdC52YWx1ZSwgcmF3VmFsdWU6IHZhbHVlIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBUeXBlVmFsaWRhdGlvbkVycm9yMi53cmFwKHsgdmFsdWUsIGNhdXNlOiByZXN1bHQuZXJyb3IgfSksXG4gICAgICByYXdWYWx1ZTogdmFsdWVcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBUeXBlVmFsaWRhdGlvbkVycm9yMi53cmFwKHsgdmFsdWUsIGNhdXNlOiBlcnJvciB9KSxcbiAgICAgIHJhd1ZhbHVlOiB2YWx1ZVxuICAgIH07XG4gIH1cbn1cblxuLy8gc3JjL3BhcnNlLWpzb24udHNcbmFzeW5jIGZ1bmN0aW9uIHBhcnNlSlNPTih7XG4gIHRleHQsXG4gIHNjaGVtYVxufSkge1xuICB0cnkge1xuICAgIGNvbnN0IHZhbHVlID0gc2VjdXJlSnNvblBhcnNlKHRleHQpO1xuICAgIGlmIChzY2hlbWEgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsaWRhdGVUeXBlcyh7IHZhbHVlLCBzY2hlbWEgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKEpTT05QYXJzZUVycm9yLmlzSW5zdGFuY2UoZXJyb3IpIHx8IFR5cGVWYWxpZGF0aW9uRXJyb3IzLmlzSW5zdGFuY2UoZXJyb3IpKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEpTT05QYXJzZUVycm9yKHsgdGV4dCwgY2F1c2U6IGVycm9yIH0pO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiBzYWZlUGFyc2VKU09OKHtcbiAgdGV4dCxcbiAgc2NoZW1hXG59KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgdmFsdWUgPSBzZWN1cmVKc29uUGFyc2UodGV4dCk7XG4gICAgaWYgKHNjaGVtYSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCB2YWx1ZSwgcmF3VmFsdWU6IHZhbHVlIH07XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBzYWZlVmFsaWRhdGVUeXBlcyh7IHZhbHVlLCBzY2hlbWEgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IEpTT05QYXJzZUVycm9yLmlzSW5zdGFuY2UoZXJyb3IpID8gZXJyb3IgOiBuZXcgSlNPTlBhcnNlRXJyb3IoeyB0ZXh0LCBjYXVzZTogZXJyb3IgfSksXG4gICAgICByYXdWYWx1ZTogdm9pZCAwXG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gaXNQYXJzYWJsZUpzb24oaW5wdXQpIHtcbiAgdHJ5IHtcbiAgICBzZWN1cmVKc29uUGFyc2UoaW5wdXQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vIHNyYy9wYXJzZS1qc29uLWV2ZW50LXN0cmVhbS50c1xuaW1wb3J0IHtcbiAgRXZlbnRTb3VyY2VQYXJzZXJTdHJlYW1cbn0gZnJvbSBcImV2ZW50c291cmNlLXBhcnNlci9zdHJlYW1cIjtcbmZ1bmN0aW9uIHBhcnNlSnNvbkV2ZW50U3RyZWFtKHtcbiAgc3RyZWFtLFxuICBzY2hlbWFcbn0pIHtcbiAgcmV0dXJuIHN0cmVhbS5waXBlVGhyb3VnaChuZXcgVGV4dERlY29kZXJTdHJlYW0oKSkucGlwZVRocm91Z2gobmV3IEV2ZW50U291cmNlUGFyc2VyU3RyZWFtKCkpLnBpcGVUaHJvdWdoKFxuICAgIG5ldyBUcmFuc2Zvcm1TdHJlYW0oe1xuICAgICAgYXN5bmMgdHJhbnNmb3JtKHsgZGF0YSB9LCBjb250cm9sbGVyKSB7XG4gICAgICAgIGlmIChkYXRhID09PSBcIltET05FXVwiKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShhd2FpdCBzYWZlUGFyc2VKU09OKHsgdGV4dDogZGF0YSwgc2NoZW1hIH0pKTtcbiAgICAgIH1cbiAgICB9KVxuICApO1xufVxuXG4vLyBzcmMvcGFyc2UtcHJvdmlkZXItb3B0aW9ucy50c1xuaW1wb3J0IHsgSW52YWxpZEFyZ3VtZW50RXJyb3IgYXMgSW52YWxpZEFyZ3VtZW50RXJyb3IyIH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXJcIjtcbmFzeW5jIGZ1bmN0aW9uIHBhcnNlUHJvdmlkZXJPcHRpb25zKHtcbiAgcHJvdmlkZXIsXG4gIHByb3ZpZGVyT3B0aW9ucyxcbiAgc2NoZW1hXG59KSB7XG4gIGlmICgocHJvdmlkZXJPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBwcm92aWRlck9wdGlvbnNbcHJvdmlkZXJdKSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBjb25zdCBwYXJzZWRQcm92aWRlck9wdGlvbnMgPSBhd2FpdCBzYWZlVmFsaWRhdGVUeXBlcyh7XG4gICAgdmFsdWU6IHByb3ZpZGVyT3B0aW9uc1twcm92aWRlcl0sXG4gICAgc2NoZW1hXG4gIH0pO1xuICBpZiAoIXBhcnNlZFByb3ZpZGVyT3B0aW9ucy5zdWNjZXNzKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yMih7XG4gICAgICBhcmd1bWVudDogXCJwcm92aWRlck9wdGlvbnNcIixcbiAgICAgIG1lc3NhZ2U6IGBpbnZhbGlkICR7cHJvdmlkZXJ9IHByb3ZpZGVyIG9wdGlvbnNgLFxuICAgICAgY2F1c2U6IHBhcnNlZFByb3ZpZGVyT3B0aW9ucy5lcnJvclxuICAgIH0pO1xuICB9XG4gIHJldHVybiBwYXJzZWRQcm92aWRlck9wdGlvbnMudmFsdWU7XG59XG5cbi8vIHNyYy9wb3N0LXRvLWFwaS50c1xuaW1wb3J0IHsgQVBJQ2FsbEVycm9yIGFzIEFQSUNhbGxFcnJvcjMgfSBmcm9tIFwiQGFpLXNkay9wcm92aWRlclwiO1xudmFyIGdldE9yaWdpbmFsRmV0Y2gyID0gKCkgPT4gZ2xvYmFsVGhpcy5mZXRjaDtcbnZhciBwb3N0SnNvblRvQXBpID0gYXN5bmMgKHtcbiAgdXJsLFxuICBoZWFkZXJzLFxuICBib2R5LFxuICBmYWlsZWRSZXNwb25zZUhhbmRsZXIsXG4gIHN1Y2Nlc3NmdWxSZXNwb25zZUhhbmRsZXIsXG4gIGFib3J0U2lnbmFsLFxuICBmZXRjaFxufSkgPT4gcG9zdFRvQXBpKHtcbiAgdXJsLFxuICBoZWFkZXJzOiB7XG4gICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgLi4uaGVhZGVyc1xuICB9LFxuICBib2R5OiB7XG4gICAgY29udGVudDogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgdmFsdWVzOiBib2R5XG4gIH0sXG4gIGZhaWxlZFJlc3BvbnNlSGFuZGxlcixcbiAgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcixcbiAgYWJvcnRTaWduYWwsXG4gIGZldGNoXG59KTtcbnZhciBwb3N0Rm9ybURhdGFUb0FwaSA9IGFzeW5jICh7XG4gIHVybCxcbiAgaGVhZGVycyxcbiAgZm9ybURhdGEsXG4gIGZhaWxlZFJlc3BvbnNlSGFuZGxlcixcbiAgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcixcbiAgYWJvcnRTaWduYWwsXG4gIGZldGNoXG59KSA9PiBwb3N0VG9BcGkoe1xuICB1cmwsXG4gIGhlYWRlcnMsXG4gIGJvZHk6IHtcbiAgICBjb250ZW50OiBmb3JtRGF0YSxcbiAgICB2YWx1ZXM6IE9iamVjdC5mcm9tRW50cmllcyhmb3JtRGF0YS5lbnRyaWVzKCkpXG4gIH0sXG4gIGZhaWxlZFJlc3BvbnNlSGFuZGxlcixcbiAgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcixcbiAgYWJvcnRTaWduYWwsXG4gIGZldGNoXG59KTtcbnZhciBwb3N0VG9BcGkgPSBhc3luYyAoe1xuICB1cmwsXG4gIGhlYWRlcnMgPSB7fSxcbiAgYm9keSxcbiAgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcixcbiAgZmFpbGVkUmVzcG9uc2VIYW5kbGVyLFxuICBhYm9ydFNpZ25hbCxcbiAgZmV0Y2ggPSBnZXRPcmlnaW5hbEZldGNoMigpXG59KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiB3aXRoVXNlckFnZW50U3VmZml4KFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgICBgYWktc2RrL3Byb3ZpZGVyLXV0aWxzLyR7VkVSU0lPTn1gLFxuICAgICAgICBnZXRSdW50aW1lRW52aXJvbm1lbnRVc2VyQWdlbnQoKVxuICAgICAgKSxcbiAgICAgIGJvZHk6IGJvZHkuY29udGVudCxcbiAgICAgIHNpZ25hbDogYWJvcnRTaWduYWxcbiAgICB9KTtcbiAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBleHRyYWN0UmVzcG9uc2VIZWFkZXJzKHJlc3BvbnNlKTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBsZXQgZXJyb3JJbmZvcm1hdGlvbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGVycm9ySW5mb3JtYXRpb24gPSBhd2FpdCBmYWlsZWRSZXNwb25zZUhhbmRsZXIoe1xuICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgIHVybCxcbiAgICAgICAgICByZXF1ZXN0Qm9keVZhbHVlczogYm9keS52YWx1ZXNcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaXNBYm9ydEVycm9yKGVycm9yKSB8fCBBUElDYWxsRXJyb3IzLmlzSW5zdGFuY2UoZXJyb3IpKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEFQSUNhbGxFcnJvcjMoe1xuICAgICAgICAgIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHByb2Nlc3MgZXJyb3IgcmVzcG9uc2VcIixcbiAgICAgICAgICBjYXVzZTogZXJyb3IsXG4gICAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgIHVybCxcbiAgICAgICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgICAgcmVxdWVzdEJvZHlWYWx1ZXM6IGJvZHkudmFsdWVzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyb3JJbmZvcm1hdGlvbi52YWx1ZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBzdWNjZXNzZnVsUmVzcG9uc2VIYW5kbGVyKHtcbiAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgIHVybCxcbiAgICAgICAgcmVxdWVzdEJvZHlWYWx1ZXM6IGJvZHkudmFsdWVzXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgaWYgKGlzQWJvcnRFcnJvcihlcnJvcikgfHwgQVBJQ2FsbEVycm9yMy5pc0luc3RhbmNlKGVycm9yKSkge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgQVBJQ2FsbEVycm9yMyh7XG4gICAgICAgIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHByb2Nlc3Mgc3VjY2Vzc2Z1bCByZXNwb25zZVwiLFxuICAgICAgICBjYXVzZTogZXJyb3IsXG4gICAgICAgIHN0YXR1c0NvZGU6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgdXJsLFxuICAgICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIHJlcXVlc3RCb2R5VmFsdWVzOiBib2R5LnZhbHVlc1xuICAgICAgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IGhhbmRsZUZldGNoRXJyb3IoeyBlcnJvciwgdXJsLCByZXF1ZXN0Qm9keVZhbHVlczogYm9keS52YWx1ZXMgfSk7XG4gIH1cbn07XG5cbi8vIHNyYy90eXBlcy90b29sLnRzXG5mdW5jdGlvbiB0b29sKHRvb2wyKSB7XG4gIHJldHVybiB0b29sMjtcbn1cbmZ1bmN0aW9uIGR5bmFtaWNUb29sKHRvb2wyKSB7XG4gIHJldHVybiB7IC4uLnRvb2wyLCB0eXBlOiBcImR5bmFtaWNcIiB9O1xufVxuXG4vLyBzcmMvcHJvdmlkZXItZGVmaW5lZC10b29sLWZhY3RvcnkudHNcbmZ1bmN0aW9uIGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5KHtcbiAgaWQsXG4gIG5hbWUsXG4gIGlucHV0U2NoZW1hXG59KSB7XG4gIHJldHVybiAoe1xuICAgIGV4ZWN1dGUsXG4gICAgb3V0cHV0U2NoZW1hLFxuICAgIHRvTW9kZWxPdXRwdXQsXG4gICAgb25JbnB1dFN0YXJ0LFxuICAgIG9uSW5wdXREZWx0YSxcbiAgICBvbklucHV0QXZhaWxhYmxlLFxuICAgIC4uLmFyZ3NcbiAgfSkgPT4gdG9vbCh7XG4gICAgdHlwZTogXCJwcm92aWRlci1kZWZpbmVkXCIsXG4gICAgaWQsXG4gICAgbmFtZSxcbiAgICBhcmdzLFxuICAgIGlucHV0U2NoZW1hLFxuICAgIG91dHB1dFNjaGVtYSxcbiAgICBleGVjdXRlLFxuICAgIHRvTW9kZWxPdXRwdXQsXG4gICAgb25JbnB1dFN0YXJ0LFxuICAgIG9uSW5wdXREZWx0YSxcbiAgICBvbklucHV0QXZhaWxhYmxlXG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnlXaXRoT3V0cHV0U2NoZW1hKHtcbiAgaWQsXG4gIG5hbWUsXG4gIGlucHV0U2NoZW1hLFxuICBvdXRwdXRTY2hlbWFcbn0pIHtcbiAgcmV0dXJuICh7XG4gICAgZXhlY3V0ZSxcbiAgICB0b01vZGVsT3V0cHV0LFxuICAgIG9uSW5wdXRTdGFydCxcbiAgICBvbklucHV0RGVsdGEsXG4gICAgb25JbnB1dEF2YWlsYWJsZSxcbiAgICAuLi5hcmdzXG4gIH0pID0+IHRvb2woe1xuICAgIHR5cGU6IFwicHJvdmlkZXItZGVmaW5lZFwiLFxuICAgIGlkLFxuICAgIG5hbWUsXG4gICAgYXJncyxcbiAgICBpbnB1dFNjaGVtYSxcbiAgICBvdXRwdXRTY2hlbWEsXG4gICAgZXhlY3V0ZSxcbiAgICB0b01vZGVsT3V0cHV0LFxuICAgIG9uSW5wdXRTdGFydCxcbiAgICBvbklucHV0RGVsdGEsXG4gICAgb25JbnB1dEF2YWlsYWJsZVxuICB9KTtcbn1cblxuLy8gc3JjL3Jlc29sdmUudHNcbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSgpO1xuICB9XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpO1xufVxuXG4vLyBzcmMvcmVzcG9uc2UtaGFuZGxlci50c1xuaW1wb3J0IHsgQVBJQ2FsbEVycm9yIGFzIEFQSUNhbGxFcnJvcjQsIEVtcHR5UmVzcG9uc2VCb2R5RXJyb3IgfSBmcm9tIFwiQGFpLXNkay9wcm92aWRlclwiO1xudmFyIGNyZWF0ZUpzb25FcnJvclJlc3BvbnNlSGFuZGxlciA9ICh7XG4gIGVycm9yU2NoZW1hLFxuICBlcnJvclRvTWVzc2FnZSxcbiAgaXNSZXRyeWFibGVcbn0pID0+IGFzeW5jICh7IHJlc3BvbnNlLCB1cmwsIHJlcXVlc3RCb2R5VmFsdWVzIH0pID0+IHtcbiAgY29uc3QgcmVzcG9uc2VCb2R5ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBleHRyYWN0UmVzcG9uc2VIZWFkZXJzKHJlc3BvbnNlKTtcbiAgaWYgKHJlc3BvbnNlQm9keS50cmltKCkgPT09IFwiXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgdmFsdWU6IG5ldyBBUElDYWxsRXJyb3I0KHtcbiAgICAgICAgbWVzc2FnZTogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgdXJsLFxuICAgICAgICByZXF1ZXN0Qm9keVZhbHVlcyxcbiAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIHJlc3BvbnNlQm9keSxcbiAgICAgICAgaXNSZXRyeWFibGU6IGlzUmV0cnlhYmxlID09IG51bGwgPyB2b2lkIDAgOiBpc1JldHJ5YWJsZShyZXNwb25zZSlcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlZEVycm9yID0gYXdhaXQgcGFyc2VKU09OKHtcbiAgICAgIHRleHQ6IHJlc3BvbnNlQm9keSxcbiAgICAgIHNjaGVtYTogZXJyb3JTY2hlbWFcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgdmFsdWU6IG5ldyBBUElDYWxsRXJyb3I0KHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3JUb01lc3NhZ2UocGFyc2VkRXJyb3IpLFxuICAgICAgICB1cmwsXG4gICAgICAgIHJlcXVlc3RCb2R5VmFsdWVzLFxuICAgICAgICBzdGF0dXNDb2RlOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgcmVzcG9uc2VCb2R5LFxuICAgICAgICBkYXRhOiBwYXJzZWRFcnJvcixcbiAgICAgICAgaXNSZXRyeWFibGU6IGlzUmV0cnlhYmxlID09IG51bGwgPyB2b2lkIDAgOiBpc1JldHJ5YWJsZShyZXNwb25zZSwgcGFyc2VkRXJyb3IpXG4gICAgICB9KVxuICAgIH07XG4gIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgdmFsdWU6IG5ldyBBUElDYWxsRXJyb3I0KHtcbiAgICAgICAgbWVzc2FnZTogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgdXJsLFxuICAgICAgICByZXF1ZXN0Qm9keVZhbHVlcyxcbiAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIHJlc3BvbnNlQm9keSxcbiAgICAgICAgaXNSZXRyeWFibGU6IGlzUmV0cnlhYmxlID09IG51bGwgPyB2b2lkIDAgOiBpc1JldHJ5YWJsZShyZXNwb25zZSlcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxufTtcbnZhciBjcmVhdGVFdmVudFNvdXJjZVJlc3BvbnNlSGFuZGxlciA9IChjaHVua1NjaGVtYSkgPT4gYXN5bmMgKHsgcmVzcG9uc2UgfSkgPT4ge1xuICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBleHRyYWN0UmVzcG9uc2VIZWFkZXJzKHJlc3BvbnNlKTtcbiAgaWYgKHJlc3BvbnNlLmJvZHkgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFbXB0eVJlc3BvbnNlQm9keUVycm9yKHt9KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHJlc3BvbnNlSGVhZGVycyxcbiAgICB2YWx1ZTogcGFyc2VKc29uRXZlbnRTdHJlYW0oe1xuICAgICAgc3RyZWFtOiByZXNwb25zZS5ib2R5LFxuICAgICAgc2NoZW1hOiBjaHVua1NjaGVtYVxuICAgIH0pXG4gIH07XG59O1xudmFyIGNyZWF0ZUpzb25TdHJlYW1SZXNwb25zZUhhbmRsZXIgPSAoY2h1bmtTY2hlbWEpID0+IGFzeW5jICh7IHJlc3BvbnNlIH0pID0+IHtcbiAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gZXh0cmFjdFJlc3BvbnNlSGVhZGVycyhyZXNwb25zZSk7XG4gIGlmIChyZXNwb25zZS5ib2R5ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRW1wdHlSZXNwb25zZUJvZHlFcnJvcih7fSk7XG4gIH1cbiAgbGV0IGJ1ZmZlciA9IFwiXCI7XG4gIHJldHVybiB7XG4gICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgIHZhbHVlOiByZXNwb25zZS5ib2R5LnBpcGVUaHJvdWdoKG5ldyBUZXh0RGVjb2RlclN0cmVhbSgpKS5waXBlVGhyb3VnaChcbiAgICAgIG5ldyBUcmFuc2Zvcm1TdHJlYW0oe1xuICAgICAgICBhc3luYyB0cmFuc2Zvcm0oY2h1bmtUZXh0LCBjb250cm9sbGVyKSB7XG4gICAgICAgICAgaWYgKGNodW5rVGV4dC5lbmRzV2l0aChcIlxcblwiKSkge1xuICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKFxuICAgICAgICAgICAgICBhd2FpdCBzYWZlUGFyc2VKU09OKHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBidWZmZXIgKyBjaHVua1RleHQsXG4gICAgICAgICAgICAgICAgc2NoZW1hOiBjaHVua1NjaGVtYVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJ1ZmZlciA9IFwiXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBjaHVua1RleHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIClcbiAgfTtcbn07XG52YXIgY3JlYXRlSnNvblJlc3BvbnNlSGFuZGxlciA9IChyZXNwb25zZVNjaGVtYSkgPT4gYXN5bmMgKHsgcmVzcG9uc2UsIHVybCwgcmVxdWVzdEJvZHlWYWx1ZXMgfSkgPT4ge1xuICBjb25zdCByZXNwb25zZUJvZHkgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gIGNvbnN0IHBhcnNlZFJlc3VsdCA9IGF3YWl0IHNhZmVQYXJzZUpTT04oe1xuICAgIHRleHQ6IHJlc3BvbnNlQm9keSxcbiAgICBzY2hlbWE6IHJlc3BvbnNlU2NoZW1hXG4gIH0pO1xuICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBleHRyYWN0UmVzcG9uc2VIZWFkZXJzKHJlc3BvbnNlKTtcbiAgaWYgKCFwYXJzZWRSZXN1bHQuc3VjY2Vzcykge1xuICAgIHRocm93IG5ldyBBUElDYWxsRXJyb3I0KHtcbiAgICAgIG1lc3NhZ2U6IFwiSW52YWxpZCBKU09OIHJlc3BvbnNlXCIsXG4gICAgICBjYXVzZTogcGFyc2VkUmVzdWx0LmVycm9yLFxuICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgcmVzcG9uc2VCb2R5LFxuICAgICAgdXJsLFxuICAgICAgcmVxdWVzdEJvZHlWYWx1ZXNcbiAgICB9KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHJlc3BvbnNlSGVhZGVycyxcbiAgICB2YWx1ZTogcGFyc2VkUmVzdWx0LnZhbHVlLFxuICAgIHJhd1ZhbHVlOiBwYXJzZWRSZXN1bHQucmF3VmFsdWVcbiAgfTtcbn07XG52YXIgY3JlYXRlQmluYXJ5UmVzcG9uc2VIYW5kbGVyID0gKCkgPT4gYXN5bmMgKHsgcmVzcG9uc2UsIHVybCwgcmVxdWVzdEJvZHlWYWx1ZXMgfSkgPT4ge1xuICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBleHRyYWN0UmVzcG9uc2VIZWFkZXJzKHJlc3BvbnNlKTtcbiAgaWYgKCFyZXNwb25zZS5ib2R5KSB7XG4gICAgdGhyb3cgbmV3IEFQSUNhbGxFcnJvcjQoe1xuICAgICAgbWVzc2FnZTogXCJSZXNwb25zZSBib2R5IGlzIGVtcHR5XCIsXG4gICAgICB1cmwsXG4gICAgICByZXF1ZXN0Qm9keVZhbHVlcyxcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlSGVhZGVycyxcbiAgICAgIHJlc3BvbnNlQm9keTogdm9pZCAwXG4gICAgfSk7XG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCBidWZmZXIgPSBhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xuICAgIHJldHVybiB7XG4gICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICB2YWx1ZTogbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IEFQSUNhbGxFcnJvcjQoe1xuICAgICAgbWVzc2FnZTogXCJGYWlsZWQgdG8gcmVhZCByZXNwb25zZSBhcyBhcnJheSBidWZmZXJcIixcbiAgICAgIHVybCxcbiAgICAgIHJlcXVlc3RCb2R5VmFsdWVzLFxuICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgcmVzcG9uc2VCb2R5OiB2b2lkIDAsXG4gICAgICBjYXVzZTogZXJyb3JcbiAgICB9KTtcbiAgfVxufTtcbnZhciBjcmVhdGVTdGF0dXNDb2RlRXJyb3JSZXNwb25zZUhhbmRsZXIgPSAoKSA9PiBhc3luYyAoeyByZXNwb25zZSwgdXJsLCByZXF1ZXN0Qm9keVZhbHVlcyB9KSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IGV4dHJhY3RSZXNwb25zZUhlYWRlcnMocmVzcG9uc2UpO1xuICBjb25zdCByZXNwb25zZUJvZHkgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gIHJldHVybiB7XG4gICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgIHZhbHVlOiBuZXcgQVBJQ2FsbEVycm9yNCh7XG4gICAgICBtZXNzYWdlOiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgdXJsLFxuICAgICAgcmVxdWVzdEJvZHlWYWx1ZXMsXG4gICAgICBzdGF0dXNDb2RlOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICByZXNwb25zZUJvZHlcbiAgICB9KVxuICB9O1xufTtcblxuLy8gc3JjL3pvZC1zY2hlbWEudHNcbmltcG9ydCAqIGFzIHo0IGZyb20gXCJ6b2QvdjRcIjtcblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9nZXQtcmVsYXRpdmUtcGF0aC50c1xudmFyIGdldFJlbGF0aXZlUGF0aCA9IChwYXRoQSwgcGF0aEIpID0+IHtcbiAgbGV0IGkgPSAwO1xuICBmb3IgKDsgaSA8IHBhdGhBLmxlbmd0aCAmJiBpIDwgcGF0aEIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocGF0aEFbaV0gIT09IHBhdGhCW2ldKVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIFsocGF0aEEubGVuZ3RoIC0gaSkudG9TdHJpbmcoKSwgLi4ucGF0aEIuc2xpY2UoaSldLmpvaW4oXCIvXCIpO1xufTtcblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9vcHRpb25zLnRzXG52YXIgaWdub3JlT3ZlcnJpZGUgPSBTeW1ib2woXG4gIFwiTGV0IHpvZFRvSnNvblNjaGVtYSBkZWNpZGUgb24gd2hpY2ggcGFyc2VyIHRvIHVzZVwiXG4pO1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBuYW1lOiB2b2lkIDAsXG4gICRyZWZTdHJhdGVneTogXCJyb290XCIsXG4gIGJhc2VQYXRoOiBbXCIjXCJdLFxuICBlZmZlY3RTdHJhdGVneTogXCJpbnB1dFwiLFxuICBwaXBlU3RyYXRlZ3k6IFwiYWxsXCIsXG4gIGRhdGVTdHJhdGVneTogXCJmb3JtYXQ6ZGF0ZS10aW1lXCIsXG4gIG1hcFN0cmF0ZWd5OiBcImVudHJpZXNcIixcbiAgcmVtb3ZlQWRkaXRpb25hbFN0cmF0ZWd5OiBcInBhc3N0aHJvdWdoXCIsXG4gIGFsbG93ZWRBZGRpdGlvbmFsUHJvcGVydGllczogdHJ1ZSxcbiAgcmVqZWN0ZWRBZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsXG4gIGRlZmluaXRpb25QYXRoOiBcImRlZmluaXRpb25zXCIsXG4gIHN0cmljdFVuaW9uczogZmFsc2UsXG4gIGRlZmluaXRpb25zOiB7fSxcbiAgZXJyb3JNZXNzYWdlczogZmFsc2UsXG4gIHBhdHRlcm5TdHJhdGVneTogXCJlc2NhcGVcIixcbiAgYXBwbHlSZWdleEZsYWdzOiBmYWxzZSxcbiAgZW1haWxTdHJhdGVneTogXCJmb3JtYXQ6ZW1haWxcIixcbiAgYmFzZTY0U3RyYXRlZ3k6IFwiY29udGVudEVuY29kaW5nOmJhc2U2NFwiLFxuICBuYW1lU3RyYXRlZ3k6IFwicmVmXCJcbn07XG52YXIgZ2V0RGVmYXVsdE9wdGlvbnMgPSAob3B0aW9ucykgPT4gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgPyB7XG4gIC4uLmRlZmF1bHRPcHRpb25zLFxuICBuYW1lOiBvcHRpb25zXG59IDoge1xuICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgLi4ub3B0aW9uc1xufTtcblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9zZWxlY3QtcGFyc2VyLnRzXG5pbXBvcnQgeyBab2RGaXJzdFBhcnR5VHlwZUtpbmQgYXMgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMyB9IGZyb20gXCJ6b2QvdjNcIjtcblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2FueS50c1xuZnVuY3Rpb24gcGFyc2VBbnlEZWYoKSB7XG4gIHJldHVybiB7fTtcbn1cblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2FycmF5LnRzXG5pbXBvcnQgeyBab2RGaXJzdFBhcnR5VHlwZUtpbmQgfSBmcm9tIFwiem9kL3YzXCI7XG5mdW5jdGlvbiBwYXJzZUFycmF5RGVmKGRlZiwgcmVmcykge1xuICB2YXIgX2EsIF9iLCBfYztcbiAgY29uc3QgcmVzID0ge1xuICAgIHR5cGU6IFwiYXJyYXlcIlxuICB9O1xuICBpZiAoKChfYSA9IGRlZi50eXBlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuX2RlZikgJiYgKChfYyA9IChfYiA9IGRlZi50eXBlKSA9PSBudWxsID8gdm9pZCAwIDogX2IuX2RlZikgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLnR5cGVOYW1lKSAhPT0gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEFueSkge1xuICAgIHJlcy5pdGVtcyA9IHBhcnNlRGVmKGRlZi50eXBlLl9kZWYsIHtcbiAgICAgIC4uLnJlZnMsXG4gICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiaXRlbXNcIl1cbiAgICB9KTtcbiAgfVxuICBpZiAoZGVmLm1pbkxlbmd0aCkge1xuICAgIHJlcy5taW5JdGVtcyA9IGRlZi5taW5MZW5ndGgudmFsdWU7XG4gIH1cbiAgaWYgKGRlZi5tYXhMZW5ndGgpIHtcbiAgICByZXMubWF4SXRlbXMgPSBkZWYubWF4TGVuZ3RoLnZhbHVlO1xuICB9XG4gIGlmIChkZWYuZXhhY3RMZW5ndGgpIHtcbiAgICByZXMubWluSXRlbXMgPSBkZWYuZXhhY3RMZW5ndGgudmFsdWU7XG4gICAgcmVzLm1heEl0ZW1zID0gZGVmLmV4YWN0TGVuZ3RoLnZhbHVlO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9iaWdpbnQudHNcbmZ1bmN0aW9uIHBhcnNlQmlnaW50RGVmKGRlZikge1xuICBjb25zdCByZXMgPSB7XG4gICAgdHlwZTogXCJpbnRlZ2VyXCIsXG4gICAgZm9ybWF0OiBcImludDY0XCJcbiAgfTtcbiAgaWYgKCFkZWYuY2hlY2tzKVxuICAgIHJldHVybiByZXM7XG4gIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgIHN3aXRjaCAoY2hlY2sua2luZCkge1xuICAgICAgY2FzZSBcIm1pblwiOlxuICAgICAgICBpZiAoY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgcmVzLm1pbmltdW0gPSBjaGVjay52YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMuZXhjbHVzaXZlTWluaW11bSA9IGNoZWNrLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1heFwiOlxuICAgICAgICBpZiAoY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgcmVzLm1heGltdW0gPSBjaGVjay52YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMuZXhjbHVzaXZlTWF4aW11bSA9IGNoZWNrLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm11bHRpcGxlT2ZcIjpcbiAgICAgICAgcmVzLm11bHRpcGxlT2YgPSBjaGVjay52YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9ib29sZWFuLnRzXG5mdW5jdGlvbiBwYXJzZUJvb2xlYW5EZWYoKSB7XG4gIHJldHVybiB7IHR5cGU6IFwiYm9vbGVhblwiIH07XG59XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9icmFuZGVkLnRzXG5mdW5jdGlvbiBwYXJzZUJyYW5kZWREZWYoX2RlZiwgcmVmcykge1xuICByZXR1cm4gcGFyc2VEZWYoX2RlZi50eXBlLl9kZWYsIHJlZnMpO1xufVxuXG4vLyBzcmMvem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvY2F0Y2gudHNcbnZhciBwYXJzZUNhdGNoRGVmID0gKGRlZiwgcmVmcykgPT4ge1xuICByZXR1cm4gcGFyc2VEZWYoZGVmLmlubmVyVHlwZS5fZGVmLCByZWZzKTtcbn07XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9kYXRlLnRzXG5mdW5jdGlvbiBwYXJzZURhdGVEZWYoZGVmLCByZWZzLCBvdmVycmlkZURhdGVTdHJhdGVneSkge1xuICBjb25zdCBzdHJhdGVneSA9IG92ZXJyaWRlRGF0ZVN0cmF0ZWd5ICE9IG51bGwgPyBvdmVycmlkZURhdGVTdHJhdGVneSA6IHJlZnMuZGF0ZVN0cmF0ZWd5O1xuICBpZiAoQXJyYXkuaXNBcnJheShzdHJhdGVneSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYW55T2Y6IHN0cmF0ZWd5Lm1hcCgoaXRlbSwgaSkgPT4gcGFyc2VEYXRlRGVmKGRlZiwgcmVmcywgaXRlbSkpXG4gICAgfTtcbiAgfVxuICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgIGNhc2UgXCJmb3JtYXQ6ZGF0ZS10aW1lXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBmb3JtYXQ6IFwiZGF0ZS10aW1lXCJcbiAgICAgIH07XG4gICAgY2FzZSBcImZvcm1hdDpkYXRlXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBmb3JtYXQ6IFwiZGF0ZVwiXG4gICAgICB9O1xuICAgIGNhc2UgXCJpbnRlZ2VyXCI6XG4gICAgICByZXR1cm4gaW50ZWdlckRhdGVQYXJzZXIoZGVmKTtcbiAgfVxufVxudmFyIGludGVnZXJEYXRlUGFyc2VyID0gKGRlZikgPT4ge1xuICBjb25zdCByZXMgPSB7XG4gICAgdHlwZTogXCJpbnRlZ2VyXCIsXG4gICAgZm9ybWF0OiBcInVuaXgtdGltZVwiXG4gIH07XG4gIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgIHN3aXRjaCAoY2hlY2sua2luZCkge1xuICAgICAgY2FzZSBcIm1pblwiOlxuICAgICAgICByZXMubWluaW11bSA9IGNoZWNrLnZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJtYXhcIjpcbiAgICAgICAgcmVzLm1heGltdW0gPSBjaGVjay52YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG4vLyBzcmMvem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvZGVmYXVsdC50c1xuZnVuY3Rpb24gcGFyc2VEZWZhdWx0RGVmKF9kZWYsIHJlZnMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5wYXJzZURlZihfZGVmLmlubmVyVHlwZS5fZGVmLCByZWZzKSxcbiAgICBkZWZhdWx0OiBfZGVmLmRlZmF1bHRWYWx1ZSgpXG4gIH07XG59XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9lZmZlY3RzLnRzXG5mdW5jdGlvbiBwYXJzZUVmZmVjdHNEZWYoX2RlZiwgcmVmcykge1xuICByZXR1cm4gcmVmcy5lZmZlY3RTdHJhdGVneSA9PT0gXCJpbnB1dFwiID8gcGFyc2VEZWYoX2RlZi5zY2hlbWEuX2RlZiwgcmVmcykgOiBwYXJzZUFueURlZigpO1xufVxuXG4vLyBzcmMvem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvZW51bS50c1xuZnVuY3Rpb24gcGFyc2VFbnVtRGVmKGRlZikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgZW51bTogQXJyYXkuZnJvbShkZWYudmFsdWVzKVxuICB9O1xufVxuXG4vLyBzcmMvem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvaW50ZXJzZWN0aW9uLnRzXG52YXIgaXNKc29uU2NoZW1hN0FsbE9mVHlwZSA9ICh0eXBlKSA9PiB7XG4gIGlmIChcInR5cGVcIiBpbiB0eXBlICYmIHR5cGUudHlwZSA9PT0gXCJzdHJpbmdcIilcbiAgICByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBcImFsbE9mXCIgaW4gdHlwZTtcbn07XG5mdW5jdGlvbiBwYXJzZUludGVyc2VjdGlvbkRlZihkZWYsIHJlZnMpIHtcbiAgY29uc3QgYWxsT2YgPSBbXG4gICAgcGFyc2VEZWYoZGVmLmxlZnQuX2RlZiwge1xuICAgICAgLi4ucmVmcyxcbiAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJhbGxPZlwiLCBcIjBcIl1cbiAgICB9KSxcbiAgICBwYXJzZURlZihkZWYucmlnaHQuX2RlZiwge1xuICAgICAgLi4ucmVmcyxcbiAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJhbGxPZlwiLCBcIjFcIl1cbiAgICB9KVxuICBdLmZpbHRlcigoeCkgPT4gISF4KTtcbiAgY29uc3QgbWVyZ2VkQWxsT2YgPSBbXTtcbiAgYWxsT2YuZm9yRWFjaCgoc2NoZW1hKSA9PiB7XG4gICAgaWYgKGlzSnNvblNjaGVtYTdBbGxPZlR5cGUoc2NoZW1hKSkge1xuICAgICAgbWVyZ2VkQWxsT2YucHVzaCguLi5zY2hlbWEuYWxsT2YpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbmVzdGVkU2NoZW1hID0gc2NoZW1hO1xuICAgICAgaWYgKFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIiBpbiBzY2hlbWEgJiYgc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzID09PSBmYWxzZSkge1xuICAgICAgICBjb25zdCB7IGFkZGl0aW9uYWxQcm9wZXJ0aWVzLCAuLi5yZXN0IH0gPSBzY2hlbWE7XG4gICAgICAgIG5lc3RlZFNjaGVtYSA9IHJlc3Q7XG4gICAgICB9XG4gICAgICBtZXJnZWRBbGxPZi5wdXNoKG5lc3RlZFNjaGVtYSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG1lcmdlZEFsbE9mLmxlbmd0aCA/IHsgYWxsT2Y6IG1lcmdlZEFsbE9mIH0gOiB2b2lkIDA7XG59XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9saXRlcmFsLnRzXG5mdW5jdGlvbiBwYXJzZUxpdGVyYWxEZWYoZGVmKSB7XG4gIGNvbnN0IHBhcnNlZFR5cGUgPSB0eXBlb2YgZGVmLnZhbHVlO1xuICBpZiAocGFyc2VkVHlwZSAhPT0gXCJiaWdpbnRcIiAmJiBwYXJzZWRUeXBlICE9PSBcIm51bWJlclwiICYmIHBhcnNlZFR5cGUgIT09IFwiYm9vbGVhblwiICYmIHBhcnNlZFR5cGUgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQXJyYXkuaXNBcnJheShkZWYudmFsdWUpID8gXCJhcnJheVwiIDogXCJvYmplY3RcIlxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBwYXJzZWRUeXBlID09PSBcImJpZ2ludFwiID8gXCJpbnRlZ2VyXCIgOiBwYXJzZWRUeXBlLFxuICAgIGNvbnN0OiBkZWYudmFsdWVcbiAgfTtcbn1cblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3JlY29yZC50c1xuaW1wb3J0IHtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kIGFzIFpvZEZpcnN0UGFydHlUeXBlS2luZDJcbn0gZnJvbSBcInpvZC92M1wiO1xuXG4vLyBzcmMvem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvc3RyaW5nLnRzXG52YXIgZW1vamlSZWdleCA9IHZvaWQgMDtcbnZhciB6b2RQYXR0ZXJucyA9IHtcbiAgLyoqXG4gICAqIGBjYCB3YXMgY2hhbmdlZCB0byBgW2NDXWAgdG8gcmVwbGljYXRlIC9pIGZsYWdcbiAgICovXG4gIGN1aWQ6IC9eW2NDXVteXFxzLV17OCx9JC8sXG4gIGN1aWQyOiAvXlswLTlhLXpdKyQvLFxuICB1bGlkOiAvXlswLTlBLUhKS01OUC1UVi1aXXsyNn0kLyxcbiAgLyoqXG4gICAqIGBhLXpgIHdhcyBhZGRlZCB0byByZXBsaWNhdGUgL2kgZmxhZ1xuICAgKi9cbiAgZW1haWw6IC9eKD8hXFwuKSg/IS4qXFwuXFwuKShbYS16QS1aMC05XycrXFwtXFwuXSopW2EtekEtWjAtOV8rLV1AKFthLXpBLVowLTldW2EtekEtWjAtOVxcLV0qXFwuKStbYS16QS1aXXsyLH0kLyxcbiAgLyoqXG4gICAqIENvbnN0cnVjdGVkIGEgdmFsaWQgVW5pY29kZSBSZWdFeHBcbiAgICpcbiAgICogTGF6aWx5IGluc3RhbnRpYXRlIHNpbmNlIHRoaXMgdHlwZSBvZiByZWdleCBpc24ndCBzdXBwb3J0ZWRcbiAgICogaW4gYWxsIGVudnMgKGUuZy4gUmVhY3QgTmF0aXZlKS5cbiAgICpcbiAgICogU2VlOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY29saW5oYWNrcy96b2QvaXNzdWVzLzI0MzNcbiAgICogRml4IGluIFpvZDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NvbGluaGFja3Mvem9kL2NvbW1pdC85MzQwZmQ1MWU0ODU3NmE3NWFkYzkxOWJmZjY1ZGJjNGE1ZDRjOTliXG4gICAqL1xuICBlbW9qaTogKCkgPT4ge1xuICAgIGlmIChlbW9qaVJlZ2V4ID09PSB2b2lkIDApIHtcbiAgICAgIGVtb2ppUmVnZXggPSBSZWdFeHAoXG4gICAgICAgIFwiXihcXFxccHtFeHRlbmRlZF9QaWN0b2dyYXBoaWN9fFxcXFxwe0Vtb2ppX0NvbXBvbmVudH0pKyRcIixcbiAgICAgICAgXCJ1XCJcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBlbW9qaVJlZ2V4O1xuICB9LFxuICAvKipcbiAgICogVW51c2VkXG4gICAqL1xuICB1dWlkOiAvXlswLTlhLWZBLUZdezh9XFxiLVswLTlhLWZBLUZdezR9XFxiLVswLTlhLWZBLUZdezR9XFxiLVswLTlhLWZBLUZdezR9XFxiLVswLTlhLWZBLUZdezEyfSQvLFxuICAvKipcbiAgICogVW51c2VkXG4gICAqL1xuICBpcHY0OiAvXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSlcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKSQvLFxuICBpcHY0Q2lkcjogL14oPzooPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSlcXC8oM1swLTJdfFsxMl0/WzAtOV0pJC8sXG4gIC8qKlxuICAgKiBVbnVzZWRcbiAgICovXG4gIGlwdjY6IC9eKChbYS1mMC05XXsxLDR9Oil7N318OjooW2EtZjAtOV17MSw0fTopezAsNn18KFthLWYwLTldezEsNH06KXsxfTooW2EtZjAtOV17MSw0fTopezAsNX18KFthLWYwLTldezEsNH06KXsyfTooW2EtZjAtOV17MSw0fTopezAsNH18KFthLWYwLTldezEsNH06KXszfTooW2EtZjAtOV17MSw0fTopezAsM318KFthLWYwLTldezEsNH06KXs0fTooW2EtZjAtOV17MSw0fTopezAsMn18KFthLWYwLTldezEsNH06KXs1fTooW2EtZjAtOV17MSw0fTopezAsMX0pKFthLWYwLTldezEsNH18KCgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpXFwuKXszfSgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpKSQvLFxuICBpcHY2Q2lkcjogL14oKFswLTlhLWZBLUZdezEsNH06KXs3LDd9WzAtOWEtZkEtRl17MSw0fXwoWzAtOWEtZkEtRl17MSw0fTopezEsN306fChbMC05YS1mQS1GXXsxLDR9Oil7MSw2fTpbMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw1fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwyfXwoWzAtOWEtZkEtRl17MSw0fTopezEsNH0oOlswLTlhLWZBLUZdezEsNH0pezEsM318KFswLTlhLWZBLUZdezEsNH06KXsxLDN9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSwyfSg6WzAtOWEtZkEtRl17MSw0fSl7MSw1fXxbMC05YS1mQS1GXXsxLDR9OigoOlswLTlhLWZBLUZdezEsNH0pezEsNn0pfDooKDpbMC05YS1mQS1GXXsxLDR9KXsxLDd9fDopfGZlODA6KDpbMC05YS1mQS1GXXswLDR9KXswLDR9JVswLTlhLXpBLVpdezEsfXw6OihmZmZmKDowezEsNH0pezAsMX06KXswLDF9KCgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXC4pezMsM30oMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pfChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fTooKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSkpXFwvKDEyWzAtOF18MVswMV1bMC05XXxbMS05XT9bMC05XSkkLyxcbiAgYmFzZTY0OiAvXihbMC05YS16QS1aKy9dezR9KSooKFswLTlhLXpBLVorL117Mn09PSl8KFswLTlhLXpBLVorL117M309KSk/JC8sXG4gIGJhc2U2NHVybDogL14oWzAtOWEtekEtWi1fXXs0fSkqKChbMC05YS16QS1aLV9dezJ9KD09KT8pfChbMC05YS16QS1aLV9dezN9KD0pPykpPyQvLFxuICBuYW5vaWQ6IC9eW2EtekEtWjAtOV8tXXsyMX0kLyxcbiAgand0OiAvXltBLVphLXowLTktX10rXFwuW0EtWmEtejAtOS1fXStcXC5bQS1aYS16MC05LV9dKiQvXG59O1xuZnVuY3Rpb24gcGFyc2VTdHJpbmdEZWYoZGVmLCByZWZzKSB7XG4gIGNvbnN0IHJlcyA9IHtcbiAgICB0eXBlOiBcInN0cmluZ1wiXG4gIH07XG4gIGlmIChkZWYuY2hlY2tzKSB7XG4gICAgZm9yIChjb25zdCBjaGVjayBvZiBkZWYuY2hlY2tzKSB7XG4gICAgICBzd2l0Y2ggKGNoZWNrLmtpbmQpIHtcbiAgICAgICAgY2FzZSBcIm1pblwiOlxuICAgICAgICAgIHJlcy5taW5MZW5ndGggPSB0eXBlb2YgcmVzLm1pbkxlbmd0aCA9PT0gXCJudW1iZXJcIiA/IE1hdGgubWF4KHJlcy5taW5MZW5ndGgsIGNoZWNrLnZhbHVlKSA6IGNoZWNrLnZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWF4XCI6XG4gICAgICAgICAgcmVzLm1heExlbmd0aCA9IHR5cGVvZiByZXMubWF4TGVuZ3RoID09PSBcIm51bWJlclwiID8gTWF0aC5taW4ocmVzLm1heExlbmd0aCwgY2hlY2sudmFsdWUpIDogY2hlY2sudmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbWFpbFwiOlxuICAgICAgICAgIHN3aXRjaCAocmVmcy5lbWFpbFN0cmF0ZWd5KSB7XG4gICAgICAgICAgICBjYXNlIFwiZm9ybWF0OmVtYWlsXCI6XG4gICAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwiZW1haWxcIiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImZvcm1hdDppZG4tZW1haWxcIjpcbiAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgXCJpZG4tZW1haWxcIiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInBhdHRlcm46em9kXCI6XG4gICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5lbWFpbCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInVybFwiOlxuICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwidXJpXCIsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidXVpZFwiOlxuICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwidXVpZFwiLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInJlZ2V4XCI6XG4gICAgICAgICAgYWRkUGF0dGVybihyZXMsIGNoZWNrLnJlZ2V4LCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImN1aWRcIjpcbiAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgem9kUGF0dGVybnMuY3VpZCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJjdWlkMlwiOlxuICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5jdWlkMiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzdGFydHNXaXRoXCI6XG4gICAgICAgICAgYWRkUGF0dGVybihcbiAgICAgICAgICAgIHJlcyxcbiAgICAgICAgICAgIFJlZ0V4cChgXiR7ZXNjYXBlTGl0ZXJhbENoZWNrVmFsdWUoY2hlY2sudmFsdWUsIHJlZnMpfWApLFxuICAgICAgICAgICAgY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgIHJlZnNcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZW5kc1dpdGhcIjpcbiAgICAgICAgICBhZGRQYXR0ZXJuKFxuICAgICAgICAgICAgcmVzLFxuICAgICAgICAgICAgUmVnRXhwKGAke2VzY2FwZUxpdGVyYWxDaGVja1ZhbHVlKGNoZWNrLnZhbHVlLCByZWZzKX0kYCksXG4gICAgICAgICAgICBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgcmVmc1xuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkYXRldGltZVwiOlxuICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwiZGF0ZS10aW1lXCIsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZGF0ZVwiOlxuICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwiZGF0ZVwiLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInRpbWVcIjpcbiAgICAgICAgICBhZGRGb3JtYXQocmVzLCBcInRpbWVcIiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkdXJhdGlvblwiOlxuICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwiZHVyYXRpb25cIiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJsZW5ndGhcIjpcbiAgICAgICAgICByZXMubWluTGVuZ3RoID0gdHlwZW9mIHJlcy5taW5MZW5ndGggPT09IFwibnVtYmVyXCIgPyBNYXRoLm1heChyZXMubWluTGVuZ3RoLCBjaGVjay52YWx1ZSkgOiBjaGVjay52YWx1ZTtcbiAgICAgICAgICByZXMubWF4TGVuZ3RoID0gdHlwZW9mIHJlcy5tYXhMZW5ndGggPT09IFwibnVtYmVyXCIgPyBNYXRoLm1pbihyZXMubWF4TGVuZ3RoLCBjaGVjay52YWx1ZSkgOiBjaGVjay52YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImluY2x1ZGVzXCI6IHtcbiAgICAgICAgICBhZGRQYXR0ZXJuKFxuICAgICAgICAgICAgcmVzLFxuICAgICAgICAgICAgUmVnRXhwKGVzY2FwZUxpdGVyYWxDaGVja1ZhbHVlKGNoZWNrLnZhbHVlLCByZWZzKSksXG4gICAgICAgICAgICBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgcmVmc1xuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImlwXCI6IHtcbiAgICAgICAgICBpZiAoY2hlY2sudmVyc2lvbiAhPT0gXCJ2NlwiKSB7XG4gICAgICAgICAgICBhZGRGb3JtYXQocmVzLCBcImlwdjRcIiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGVjay52ZXJzaW9uICE9PSBcInY0XCIpIHtcbiAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwiaXB2NlwiLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImJhc2U2NHVybFwiOlxuICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5iYXNlNjR1cmwsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiand0XCI6XG4gICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLmp3dCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJjaWRyXCI6IHtcbiAgICAgICAgICBpZiAoY2hlY2sudmVyc2lvbiAhPT0gXCJ2NlwiKSB7XG4gICAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgem9kUGF0dGVybnMuaXB2NENpZHIsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hlY2sudmVyc2lvbiAhPT0gXCJ2NFwiKSB7XG4gICAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgem9kUGF0dGVybnMuaXB2NkNpZHIsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZW1vamlcIjpcbiAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgem9kUGF0dGVybnMuZW1vamkoKSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ1bGlkXCI6IHtcbiAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgem9kUGF0dGVybnMudWxpZCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImJhc2U2NFwiOiB7XG4gICAgICAgICAgc3dpdGNoIChyZWZzLmJhc2U2NFN0cmF0ZWd5KSB7XG4gICAgICAgICAgICBjYXNlIFwiZm9ybWF0OmJpbmFyeVwiOiB7XG4gICAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwiYmluYXJ5XCIsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJjb250ZW50RW5jb2Rpbmc6YmFzZTY0XCI6IHtcbiAgICAgICAgICAgICAgcmVzLmNvbnRlbnRFbmNvZGluZyA9IFwiYmFzZTY0XCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcInBhdHRlcm46em9kXCI6IHtcbiAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLmJhc2U2NCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwibmFub2lkXCI6IHtcbiAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgem9kUGF0dGVybnMubmFub2lkLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidG9Mb3dlckNhc2VcIjpcbiAgICAgICAgY2FzZSBcInRvVXBwZXJDYXNlXCI6XG4gICAgICAgIGNhc2UgXCJ0cmltXCI6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLyogQF9fUFVSRV9fICovICgoXykgPT4ge1xuICAgICAgICAgIH0pKGNoZWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGVzY2FwZUxpdGVyYWxDaGVja1ZhbHVlKGxpdGVyYWwsIHJlZnMpIHtcbiAgcmV0dXJuIHJlZnMucGF0dGVyblN0cmF0ZWd5ID09PSBcImVzY2FwZVwiID8gZXNjYXBlTm9uQWxwaGFOdW1lcmljKGxpdGVyYWwpIDogbGl0ZXJhbDtcbn1cbnZhciBBTFBIQV9OVU1FUklDID0gbmV3IFNldChcbiAgXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnh5ejAxMjM0NTY3ODlcIlxuKTtcbmZ1bmN0aW9uIGVzY2FwZU5vbkFscGhhTnVtZXJpYyhzb3VyY2UpIHtcbiAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFBTFBIQV9OVU1FUklDLmhhcyhzb3VyY2VbaV0pKSB7XG4gICAgICByZXN1bHQgKz0gXCJcXFxcXCI7XG4gICAgfVxuICAgIHJlc3VsdCArPSBzb3VyY2VbaV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGFkZEZvcm1hdChzY2hlbWEsIHZhbHVlLCBtZXNzYWdlLCByZWZzKSB7XG4gIHZhciBfYTtcbiAgaWYgKHNjaGVtYS5mb3JtYXQgfHwgKChfYSA9IHNjaGVtYS5hbnlPZikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnNvbWUoKHgpID0+IHguZm9ybWF0KSkpIHtcbiAgICBpZiAoIXNjaGVtYS5hbnlPZikge1xuICAgICAgc2NoZW1hLmFueU9mID0gW107XG4gICAgfVxuICAgIGlmIChzY2hlbWEuZm9ybWF0KSB7XG4gICAgICBzY2hlbWEuYW55T2YucHVzaCh7XG4gICAgICAgIGZvcm1hdDogc2NoZW1hLmZvcm1hdFxuICAgICAgfSk7XG4gICAgICBkZWxldGUgc2NoZW1hLmZvcm1hdDtcbiAgICB9XG4gICAgc2NoZW1hLmFueU9mLnB1c2goe1xuICAgICAgZm9ybWF0OiB2YWx1ZSxcbiAgICAgIC4uLm1lc3NhZ2UgJiYgcmVmcy5lcnJvck1lc3NhZ2VzICYmIHsgZXJyb3JNZXNzYWdlOiB7IGZvcm1hdDogbWVzc2FnZSB9IH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBzY2hlbWEuZm9ybWF0ID0gdmFsdWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGFkZFBhdHRlcm4oc2NoZW1hLCByZWdleCwgbWVzc2FnZSwgcmVmcykge1xuICB2YXIgX2E7XG4gIGlmIChzY2hlbWEucGF0dGVybiB8fCAoKF9hID0gc2NoZW1hLmFsbE9mKSA9PSBudWxsID8gdm9pZCAwIDogX2Euc29tZSgoeCkgPT4geC5wYXR0ZXJuKSkpIHtcbiAgICBpZiAoIXNjaGVtYS5hbGxPZikge1xuICAgICAgc2NoZW1hLmFsbE9mID0gW107XG4gICAgfVxuICAgIGlmIChzY2hlbWEucGF0dGVybikge1xuICAgICAgc2NoZW1hLmFsbE9mLnB1c2goe1xuICAgICAgICBwYXR0ZXJuOiBzY2hlbWEucGF0dGVyblxuICAgICAgfSk7XG4gICAgICBkZWxldGUgc2NoZW1hLnBhdHRlcm47XG4gICAgfVxuICAgIHNjaGVtYS5hbGxPZi5wdXNoKHtcbiAgICAgIHBhdHRlcm46IHN0cmluZ2lmeVJlZ0V4cFdpdGhGbGFncyhyZWdleCwgcmVmcyksXG4gICAgICAuLi5tZXNzYWdlICYmIHJlZnMuZXJyb3JNZXNzYWdlcyAmJiB7IGVycm9yTWVzc2FnZTogeyBwYXR0ZXJuOiBtZXNzYWdlIH0gfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHNjaGVtYS5wYXR0ZXJuID0gc3RyaW5naWZ5UmVnRXhwV2l0aEZsYWdzKHJlZ2V4LCByZWZzKTtcbiAgfVxufVxuZnVuY3Rpb24gc3RyaW5naWZ5UmVnRXhwV2l0aEZsYWdzKHJlZ2V4LCByZWZzKSB7XG4gIHZhciBfYTtcbiAgaWYgKCFyZWZzLmFwcGx5UmVnZXhGbGFncyB8fCAhcmVnZXguZmxhZ3MpIHtcbiAgICByZXR1cm4gcmVnZXguc291cmNlO1xuICB9XG4gIGNvbnN0IGZsYWdzID0ge1xuICAgIGk6IHJlZ2V4LmZsYWdzLmluY2x1ZGVzKFwiaVwiKSxcbiAgICAvLyBDYXNlLWluc2Vuc2l0aXZlXG4gICAgbTogcmVnZXguZmxhZ3MuaW5jbHVkZXMoXCJtXCIpLFxuICAgIC8vIGBeYCBhbmQgYCRgIG1hdGNoZXMgYWRqYWNlbnQgdG8gbmV3bGluZSBjaGFyYWN0ZXJzXG4gICAgczogcmVnZXguZmxhZ3MuaW5jbHVkZXMoXCJzXCIpXG4gICAgLy8gYC5gIG1hdGNoZXMgbmV3bGluZXNcbiAgfTtcbiAgY29uc3Qgc291cmNlID0gZmxhZ3MuaSA/IHJlZ2V4LnNvdXJjZS50b0xvd2VyQ2FzZSgpIDogcmVnZXguc291cmNlO1xuICBsZXQgcGF0dGVybiA9IFwiXCI7XG4gIGxldCBpc0VzY2FwZWQgPSBmYWxzZTtcbiAgbGV0IGluQ2hhckdyb3VwID0gZmFsc2U7XG4gIGxldCBpbkNoYXJSYW5nZSA9IGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpc0VzY2FwZWQpIHtcbiAgICAgIHBhdHRlcm4gKz0gc291cmNlW2ldO1xuICAgICAgaXNFc2NhcGVkID0gZmFsc2U7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGZsYWdzLmkpIHtcbiAgICAgIGlmIChpbkNoYXJHcm91cCkge1xuICAgICAgICBpZiAoc291cmNlW2ldLm1hdGNoKC9bYS16XS8pKSB7XG4gICAgICAgICAgaWYgKGluQ2hhclJhbmdlKSB7XG4gICAgICAgICAgICBwYXR0ZXJuICs9IHNvdXJjZVtpXTtcbiAgICAgICAgICAgIHBhdHRlcm4gKz0gYCR7c291cmNlW2kgLSAyXX0tJHtzb3VyY2VbaV19YC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgaW5DaGFyUmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZVtpICsgMV0gPT09IFwiLVwiICYmICgoX2EgPSBzb3VyY2VbaSArIDJdKSA9PSBudWxsID8gdm9pZCAwIDogX2EubWF0Y2goL1thLXpdLykpKSB7XG4gICAgICAgICAgICBwYXR0ZXJuICs9IHNvdXJjZVtpXTtcbiAgICAgICAgICAgIGluQ2hhclJhbmdlID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGF0dGVybiArPSBgJHtzb3VyY2VbaV19JHtzb3VyY2VbaV0udG9VcHBlckNhc2UoKX1gO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzb3VyY2VbaV0ubWF0Y2goL1thLXpdLykpIHtcbiAgICAgICAgcGF0dGVybiArPSBgWyR7c291cmNlW2ldfSR7c291cmNlW2ldLnRvVXBwZXJDYXNlKCl9XWA7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmxhZ3MubSkge1xuICAgICAgaWYgKHNvdXJjZVtpXSA9PT0gXCJeXCIpIHtcbiAgICAgICAgcGF0dGVybiArPSBgKF58KD88PVtcXHJcbl0pKWA7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChzb3VyY2VbaV0gPT09IFwiJFwiKSB7XG4gICAgICAgIHBhdHRlcm4gKz0gYCgkfCg/PVtcXHJcbl0pKWA7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmxhZ3MucyAmJiBzb3VyY2VbaV0gPT09IFwiLlwiKSB7XG4gICAgICBwYXR0ZXJuICs9IGluQ2hhckdyb3VwID8gYCR7c291cmNlW2ldfVxcclxuYCA6IGBbJHtzb3VyY2VbaV19XFxyXG5dYDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBwYXR0ZXJuICs9IHNvdXJjZVtpXTtcbiAgICBpZiAoc291cmNlW2ldID09PSBcIlxcXFxcIikge1xuICAgICAgaXNFc2NhcGVkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGluQ2hhckdyb3VwICYmIHNvdXJjZVtpXSA9PT0gXCJdXCIpIHtcbiAgICAgIGluQ2hhckdyb3VwID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICghaW5DaGFyR3JvdXAgJiYgc291cmNlW2ldID09PSBcIltcIikge1xuICAgICAgaW5DaGFyR3JvdXAgPSB0cnVlO1xuICAgIH1cbiAgfVxuICB0cnkge1xuICAgIG5ldyBSZWdFeHAocGF0dGVybik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgQ291bGQgbm90IGNvbnZlcnQgcmVnZXggcGF0dGVybiBhdCAke3JlZnMuY3VycmVudFBhdGguam9pbihcbiAgICAgICAgXCIvXCJcbiAgICAgICl9IHRvIGEgZmxhZy1pbmRlcGVuZGVudCBmb3JtISBGYWxsaW5nIGJhY2sgdG8gdGhlIGZsYWctaWdub3JhbnQgc291cmNlYFxuICAgICk7XG4gICAgcmV0dXJuIHJlZ2V4LnNvdXJjZTtcbiAgfVxuICByZXR1cm4gcGF0dGVybjtcbn1cblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3JlY29yZC50c1xuZnVuY3Rpb24gcGFyc2VSZWNvcmREZWYoZGVmLCByZWZzKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICBjb25zdCBzY2hlbWEgPSB7XG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBhZGRpdGlvbmFsUHJvcGVydGllczogKF9hID0gcGFyc2VEZWYoZGVmLnZhbHVlVHlwZS5fZGVmLCB7XG4gICAgICAuLi5yZWZzLFxuICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCJdXG4gICAgfSkpICE9IG51bGwgPyBfYSA6IHJlZnMuYWxsb3dlZEFkZGl0aW9uYWxQcm9wZXJ0aWVzXG4gIH07XG4gIGlmICgoKF9iID0gZGVmLmtleVR5cGUpID09IG51bGwgPyB2b2lkIDAgOiBfYi5fZGVmLnR5cGVOYW1lKSA9PT0gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2RTdHJpbmcgJiYgKChfYyA9IGRlZi5rZXlUeXBlLl9kZWYuY2hlY2tzKSA9PSBudWxsID8gdm9pZCAwIDogX2MubGVuZ3RoKSkge1xuICAgIGNvbnN0IHsgdHlwZSwgLi4ua2V5VHlwZSB9ID0gcGFyc2VTdHJpbmdEZWYoZGVmLmtleVR5cGUuX2RlZiwgcmVmcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnNjaGVtYSxcbiAgICAgIHByb3BlcnR5TmFtZXM6IGtleVR5cGVcbiAgICB9O1xuICB9IGVsc2UgaWYgKCgoX2QgPSBkZWYua2V5VHlwZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLl9kZWYudHlwZU5hbWUpID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQyLlpvZEVudW0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uc2NoZW1hLFxuICAgICAgcHJvcGVydHlOYW1lczoge1xuICAgICAgICBlbnVtOiBkZWYua2V5VHlwZS5fZGVmLnZhbHVlc1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSBpZiAoKChfZSA9IGRlZi5rZXlUeXBlKSA9PSBudWxsID8gdm9pZCAwIDogX2UuX2RlZi50eXBlTmFtZSkgPT09IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kQnJhbmRlZCAmJiBkZWYua2V5VHlwZS5fZGVmLnR5cGUuX2RlZi50eXBlTmFtZSA9PT0gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2RTdHJpbmcgJiYgKChfZiA9IGRlZi5rZXlUeXBlLl9kZWYudHlwZS5fZGVmLmNoZWNrcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9mLmxlbmd0aCkpIHtcbiAgICBjb25zdCB7IHR5cGUsIC4uLmtleVR5cGUgfSA9IHBhcnNlQnJhbmRlZERlZihcbiAgICAgIGRlZi5rZXlUeXBlLl9kZWYsXG4gICAgICByZWZzXG4gICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uc2NoZW1hLFxuICAgICAgcHJvcGVydHlOYW1lczoga2V5VHlwZVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHNjaGVtYTtcbn1cblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL21hcC50c1xuZnVuY3Rpb24gcGFyc2VNYXBEZWYoZGVmLCByZWZzKSB7XG4gIGlmIChyZWZzLm1hcFN0cmF0ZWd5ID09PSBcInJlY29yZFwiKSB7XG4gICAgcmV0dXJuIHBhcnNlUmVjb3JkRGVmKGRlZiwgcmVmcyk7XG4gIH1cbiAgY29uc3Qga2V5cyA9IHBhcnNlRGVmKGRlZi5rZXlUeXBlLl9kZWYsIHtcbiAgICAuLi5yZWZzLFxuICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJpdGVtc1wiLCBcIml0ZW1zXCIsIFwiMFwiXVxuICB9KSB8fCBwYXJzZUFueURlZigpO1xuICBjb25zdCB2YWx1ZXMgPSBwYXJzZURlZihkZWYudmFsdWVUeXBlLl9kZWYsIHtcbiAgICAuLi5yZWZzLFxuICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJpdGVtc1wiLCBcIml0ZW1zXCIsIFwiMVwiXVxuICB9KSB8fCBwYXJzZUFueURlZigpO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBtYXhJdGVtczogMTI1LFxuICAgIGl0ZW1zOiB7XG4gICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICBpdGVtczogW2tleXMsIHZhbHVlc10sXG4gICAgICBtaW5JdGVtczogMixcbiAgICAgIG1heEl0ZW1zOiAyXG4gICAgfVxuICB9O1xufVxuXG4vLyBzcmMvem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvbmF0aXZlLWVudW0udHNcbmZ1bmN0aW9uIHBhcnNlTmF0aXZlRW51bURlZihkZWYpIHtcbiAgY29uc3Qgb2JqZWN0ID0gZGVmLnZhbHVlcztcbiAgY29uc3QgYWN0dWFsS2V5cyA9IE9iamVjdC5rZXlzKGRlZi52YWx1ZXMpLmZpbHRlcigoa2V5KSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3Rbb2JqZWN0W2tleV1dICE9PSBcIm51bWJlclwiO1xuICB9KTtcbiAgY29uc3QgYWN0dWFsVmFsdWVzID0gYWN0dWFsS2V5cy5tYXAoKGtleSkgPT4gb2JqZWN0W2tleV0pO1xuICBjb25zdCBwYXJzZWRUeXBlcyA9IEFycmF5LmZyb20oXG4gICAgbmV3IFNldChhY3R1YWxWYWx1ZXMubWFwKCh2YWx1ZXMpID0+IHR5cGVvZiB2YWx1ZXMpKVxuICApO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHBhcnNlZFR5cGVzLmxlbmd0aCA9PT0gMSA/IHBhcnNlZFR5cGVzWzBdID09PSBcInN0cmluZ1wiID8gXCJzdHJpbmdcIiA6IFwibnVtYmVyXCIgOiBbXCJzdHJpbmdcIiwgXCJudW1iZXJcIl0sXG4gICAgZW51bTogYWN0dWFsVmFsdWVzXG4gIH07XG59XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9uZXZlci50c1xuZnVuY3Rpb24gcGFyc2VOZXZlckRlZigpIHtcbiAgcmV0dXJuIHsgbm90OiBwYXJzZUFueURlZigpIH07XG59XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9udWxsLnRzXG5mdW5jdGlvbiBwYXJzZU51bGxEZWYoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJudWxsXCJcbiAgfTtcbn1cblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3VuaW9uLnRzXG52YXIgcHJpbWl0aXZlTWFwcGluZ3MgPSB7XG4gIFpvZFN0cmluZzogXCJzdHJpbmdcIixcbiAgWm9kTnVtYmVyOiBcIm51bWJlclwiLFxuICBab2RCaWdJbnQ6IFwiaW50ZWdlclwiLFxuICBab2RCb29sZWFuOiBcImJvb2xlYW5cIixcbiAgWm9kTnVsbDogXCJudWxsXCJcbn07XG5mdW5jdGlvbiBwYXJzZVVuaW9uRGVmKGRlZiwgcmVmcykge1xuICBjb25zdCBvcHRpb25zID0gZGVmLm9wdGlvbnMgaW5zdGFuY2VvZiBNYXAgPyBBcnJheS5mcm9tKGRlZi5vcHRpb25zLnZhbHVlcygpKSA6IGRlZi5vcHRpb25zO1xuICBpZiAob3B0aW9ucy5ldmVyeShcbiAgICAoeCkgPT4geC5fZGVmLnR5cGVOYW1lIGluIHByaW1pdGl2ZU1hcHBpbmdzICYmICgheC5fZGVmLmNoZWNrcyB8fCAheC5fZGVmLmNoZWNrcy5sZW5ndGgpXG4gICkpIHtcbiAgICBjb25zdCB0eXBlcyA9IG9wdGlvbnMucmVkdWNlKCh0eXBlczIsIHgpID0+IHtcbiAgICAgIGNvbnN0IHR5cGUgPSBwcmltaXRpdmVNYXBwaW5nc1t4Ll9kZWYudHlwZU5hbWVdO1xuICAgICAgcmV0dXJuIHR5cGUgJiYgIXR5cGVzMi5pbmNsdWRlcyh0eXBlKSA/IFsuLi50eXBlczIsIHR5cGVdIDogdHlwZXMyO1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdHlwZXMubGVuZ3RoID4gMSA/IHR5cGVzIDogdHlwZXNbMF1cbiAgICB9O1xuICB9IGVsc2UgaWYgKG9wdGlvbnMuZXZlcnkoKHgpID0+IHguX2RlZi50eXBlTmFtZSA9PT0gXCJab2RMaXRlcmFsXCIgJiYgIXguZGVzY3JpcHRpb24pKSB7XG4gICAgY29uc3QgdHlwZXMgPSBvcHRpb25zLnJlZHVjZShcbiAgICAgIChhY2MsIHgpID0+IHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiB4Ll9kZWYudmFsdWU7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgIHJldHVybiBbLi4uYWNjLCB0eXBlXTtcbiAgICAgICAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgICAgICAgICByZXR1cm4gWy4uLmFjYywgXCJpbnRlZ2VyXCJdO1xuICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgICAgIGlmICh4Ll9kZWYudmFsdWUgPT09IG51bGwpXG4gICAgICAgICAgICAgIHJldHVybiBbLi4uYWNjLCBcIm51bGxcIl07XG4gICAgICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFtdXG4gICAgKTtcbiAgICBpZiAodHlwZXMubGVuZ3RoID09PSBvcHRpb25zLmxlbmd0aCkge1xuICAgICAgY29uc3QgdW5pcXVlVHlwZXMgPSB0eXBlcy5maWx0ZXIoKHgsIGksIGEpID0+IGEuaW5kZXhPZih4KSA9PT0gaSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB1bmlxdWVUeXBlcy5sZW5ndGggPiAxID8gdW5pcXVlVHlwZXMgOiB1bmlxdWVUeXBlc1swXSxcbiAgICAgICAgZW51bTogb3B0aW9ucy5yZWR1Y2UoXG4gICAgICAgICAgKGFjYywgeCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFjYy5pbmNsdWRlcyh4Ll9kZWYudmFsdWUpID8gYWNjIDogWy4uLmFjYywgeC5fZGVmLnZhbHVlXTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtdXG4gICAgICAgIClcbiAgICAgIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKG9wdGlvbnMuZXZlcnkoKHgpID0+IHguX2RlZi50eXBlTmFtZSA9PT0gXCJab2RFbnVtXCIpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbnVtOiBvcHRpb25zLnJlZHVjZShcbiAgICAgICAgKGFjYywgeCkgPT4gW1xuICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAuLi54Ll9kZWYudmFsdWVzLmZpbHRlcigoeDIpID0+ICFhY2MuaW5jbHVkZXMoeDIpKVxuICAgICAgICBdLFxuICAgICAgICBbXVxuICAgICAgKVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGFzQW55T2YoZGVmLCByZWZzKTtcbn1cbnZhciBhc0FueU9mID0gKGRlZiwgcmVmcykgPT4ge1xuICBjb25zdCBhbnlPZiA9IChkZWYub3B0aW9ucyBpbnN0YW5jZW9mIE1hcCA/IEFycmF5LmZyb20oZGVmLm9wdGlvbnMudmFsdWVzKCkpIDogZGVmLm9wdGlvbnMpLm1hcChcbiAgICAoeCwgaSkgPT4gcGFyc2VEZWYoeC5fZGVmLCB7XG4gICAgICAuLi5yZWZzLFxuICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcImFueU9mXCIsIGAke2l9YF1cbiAgICB9KVxuICApLmZpbHRlcihcbiAgICAoeCkgPT4gISF4ICYmICghcmVmcy5zdHJpY3RVbmlvbnMgfHwgdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiYgT2JqZWN0LmtleXMoeCkubGVuZ3RoID4gMClcbiAgKTtcbiAgcmV0dXJuIGFueU9mLmxlbmd0aCA/IHsgYW55T2YgfSA6IHZvaWQgMDtcbn07XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9udWxsYWJsZS50c1xuZnVuY3Rpb24gcGFyc2VOdWxsYWJsZURlZihkZWYsIHJlZnMpIHtcbiAgaWYgKFtcIlpvZFN0cmluZ1wiLCBcIlpvZE51bWJlclwiLCBcIlpvZEJpZ0ludFwiLCBcIlpvZEJvb2xlYW5cIiwgXCJab2ROdWxsXCJdLmluY2x1ZGVzKFxuICAgIGRlZi5pbm5lclR5cGUuX2RlZi50eXBlTmFtZVxuICApICYmICghZGVmLmlubmVyVHlwZS5fZGVmLmNoZWNrcyB8fCAhZGVmLmlubmVyVHlwZS5fZGVmLmNoZWNrcy5sZW5ndGgpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFtcbiAgICAgICAgcHJpbWl0aXZlTWFwcGluZ3NbZGVmLmlubmVyVHlwZS5fZGVmLnR5cGVOYW1lXSxcbiAgICAgICAgXCJudWxsXCJcbiAgICAgIF1cbiAgICB9O1xuICB9XG4gIGNvbnN0IGJhc2UgPSBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHtcbiAgICAuLi5yZWZzLFxuICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJhbnlPZlwiLCBcIjBcIl1cbiAgfSk7XG4gIHJldHVybiBiYXNlICYmIHsgYW55T2Y6IFtiYXNlLCB7IHR5cGU6IFwibnVsbFwiIH1dIH07XG59XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9udW1iZXIudHNcbmZ1bmN0aW9uIHBhcnNlTnVtYmVyRGVmKGRlZikge1xuICBjb25zdCByZXMgPSB7XG4gICAgdHlwZTogXCJudW1iZXJcIlxuICB9O1xuICBpZiAoIWRlZi5jaGVja3MpXG4gICAgcmV0dXJuIHJlcztcbiAgZm9yIChjb25zdCBjaGVjayBvZiBkZWYuY2hlY2tzKSB7XG4gICAgc3dpdGNoIChjaGVjay5raW5kKSB7XG4gICAgICBjYXNlIFwiaW50XCI6XG4gICAgICAgIHJlcy50eXBlID0gXCJpbnRlZ2VyXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1pblwiOlxuICAgICAgICBpZiAoY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgcmVzLm1pbmltdW0gPSBjaGVjay52YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMuZXhjbHVzaXZlTWluaW11bSA9IGNoZWNrLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1heFwiOlxuICAgICAgICBpZiAoY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgcmVzLm1heGltdW0gPSBjaGVjay52YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMuZXhjbHVzaXZlTWF4aW11bSA9IGNoZWNrLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm11bHRpcGxlT2ZcIjpcbiAgICAgICAgcmVzLm11bHRpcGxlT2YgPSBjaGVjay52YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9vYmplY3QudHNcbmZ1bmN0aW9uIHBhcnNlT2JqZWN0RGVmKGRlZiwgcmVmcykge1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBwcm9wZXJ0aWVzOiB7fVxuICB9O1xuICBjb25zdCByZXF1aXJlZCA9IFtdO1xuICBjb25zdCBzaGFwZSA9IGRlZi5zaGFwZSgpO1xuICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIHNoYXBlKSB7XG4gICAgbGV0IHByb3BEZWYgPSBzaGFwZVtwcm9wTmFtZV07XG4gICAgaWYgKHByb3BEZWYgPT09IHZvaWQgMCB8fCBwcm9wRGVmLl9kZWYgPT09IHZvaWQgMCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHByb3BPcHRpb25hbCA9IHNhZmVJc09wdGlvbmFsKHByb3BEZWYpO1xuICAgIGNvbnN0IHBhcnNlZERlZiA9IHBhcnNlRGVmKHByb3BEZWYuX2RlZiwge1xuICAgICAgLi4ucmVmcyxcbiAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJwcm9wZXJ0aWVzXCIsIHByb3BOYW1lXSxcbiAgICAgIHByb3BlcnR5UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwicHJvcGVydGllc1wiLCBwcm9wTmFtZV1cbiAgICB9KTtcbiAgICBpZiAocGFyc2VkRGVmID09PSB2b2lkIDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXN1bHQucHJvcGVydGllc1twcm9wTmFtZV0gPSBwYXJzZWREZWY7XG4gICAgaWYgKCFwcm9wT3B0aW9uYWwpIHtcbiAgICAgIHJlcXVpcmVkLnB1c2gocHJvcE5hbWUpO1xuICAgIH1cbiAgfVxuICBpZiAocmVxdWlyZWQubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnJlcXVpcmVkID0gcmVxdWlyZWQ7XG4gIH1cbiAgY29uc3QgYWRkaXRpb25hbFByb3BlcnRpZXMgPSBkZWNpZGVBZGRpdGlvbmFsUHJvcGVydGllcyhkZWYsIHJlZnMpO1xuICBpZiAoYWRkaXRpb25hbFByb3BlcnRpZXMgIT09IHZvaWQgMCkge1xuICAgIHJlc3VsdC5hZGRpdGlvbmFsUHJvcGVydGllcyA9IGFkZGl0aW9uYWxQcm9wZXJ0aWVzO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBkZWNpZGVBZGRpdGlvbmFsUHJvcGVydGllcyhkZWYsIHJlZnMpIHtcbiAgaWYgKGRlZi5jYXRjaGFsbC5fZGVmLnR5cGVOYW1lICE9PSBcIlpvZE5ldmVyXCIpIHtcbiAgICByZXR1cm4gcGFyc2VEZWYoZGVmLmNhdGNoYWxsLl9kZWYsIHtcbiAgICAgIC4uLnJlZnMsXG4gICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIl1cbiAgICB9KTtcbiAgfVxuICBzd2l0Y2ggKGRlZi51bmtub3duS2V5cykge1xuICAgIGNhc2UgXCJwYXNzdGhyb3VnaFwiOlxuICAgICAgcmV0dXJuIHJlZnMuYWxsb3dlZEFkZGl0aW9uYWxQcm9wZXJ0aWVzO1xuICAgIGNhc2UgXCJzdHJpY3RcIjpcbiAgICAgIHJldHVybiByZWZzLnJlamVjdGVkQWRkaXRpb25hbFByb3BlcnRpZXM7XG4gICAgY2FzZSBcInN0cmlwXCI6XG4gICAgICByZXR1cm4gcmVmcy5yZW1vdmVBZGRpdGlvbmFsU3RyYXRlZ3kgPT09IFwic3RyaWN0XCIgPyByZWZzLmFsbG93ZWRBZGRpdGlvbmFsUHJvcGVydGllcyA6IHJlZnMucmVqZWN0ZWRBZGRpdGlvbmFsUHJvcGVydGllcztcbiAgfVxufVxuZnVuY3Rpb24gc2FmZUlzT3B0aW9uYWwoc2NoZW1hKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHNjaGVtYS5pc09wdGlvbmFsKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vLyBzcmMvem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvb3B0aW9uYWwudHNcbnZhciBwYXJzZU9wdGlvbmFsRGVmID0gKGRlZiwgcmVmcykgPT4ge1xuICB2YXIgX2E7XG4gIGlmIChyZWZzLmN1cnJlbnRQYXRoLnRvU3RyaW5nKCkgPT09ICgoX2EgPSByZWZzLnByb3BlcnR5UGF0aCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnRvU3RyaW5nKCkpKSB7XG4gICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5pbm5lclR5cGUuX2RlZiwgcmVmcyk7XG4gIH1cbiAgY29uc3QgaW5uZXJTY2hlbWEgPSBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHtcbiAgICAuLi5yZWZzLFxuICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJhbnlPZlwiLCBcIjFcIl1cbiAgfSk7XG4gIHJldHVybiBpbm5lclNjaGVtYSA/IHsgYW55T2Y6IFt7IG5vdDogcGFyc2VBbnlEZWYoKSB9LCBpbm5lclNjaGVtYV0gfSA6IHBhcnNlQW55RGVmKCk7XG59O1xuXG4vLyBzcmMvem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvcGlwZWxpbmUudHNcbnZhciBwYXJzZVBpcGVsaW5lRGVmID0gKGRlZiwgcmVmcykgPT4ge1xuICBpZiAocmVmcy5waXBlU3RyYXRlZ3kgPT09IFwiaW5wdXRcIikge1xuICAgIHJldHVybiBwYXJzZURlZihkZWYuaW4uX2RlZiwgcmVmcyk7XG4gIH0gZWxzZSBpZiAocmVmcy5waXBlU3RyYXRlZ3kgPT09IFwib3V0cHV0XCIpIHtcbiAgICByZXR1cm4gcGFyc2VEZWYoZGVmLm91dC5fZGVmLCByZWZzKTtcbiAgfVxuICBjb25zdCBhID0gcGFyc2VEZWYoZGVmLmluLl9kZWYsIHtcbiAgICAuLi5yZWZzLFxuICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJhbGxPZlwiLCBcIjBcIl1cbiAgfSk7XG4gIGNvbnN0IGIgPSBwYXJzZURlZihkZWYub3V0Ll9kZWYsIHtcbiAgICAuLi5yZWZzLFxuICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJhbGxPZlwiLCBhID8gXCIxXCIgOiBcIjBcIl1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYWxsT2Y6IFthLCBiXS5maWx0ZXIoKHgpID0+IHggIT09IHZvaWQgMClcbiAgfTtcbn07XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9wcm9taXNlLnRzXG5mdW5jdGlvbiBwYXJzZVByb21pc2VEZWYoZGVmLCByZWZzKSB7XG4gIHJldHVybiBwYXJzZURlZihkZWYudHlwZS5fZGVmLCByZWZzKTtcbn1cblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3NldC50c1xuZnVuY3Rpb24gcGFyc2VTZXREZWYoZGVmLCByZWZzKSB7XG4gIGNvbnN0IGl0ZW1zID0gcGFyc2VEZWYoZGVmLnZhbHVlVHlwZS5fZGVmLCB7XG4gICAgLi4ucmVmcyxcbiAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiaXRlbXNcIl1cbiAgfSk7XG4gIGNvbnN0IHNjaGVtYSA9IHtcbiAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgdW5pcXVlSXRlbXM6IHRydWUsXG4gICAgaXRlbXNcbiAgfTtcbiAgaWYgKGRlZi5taW5TaXplKSB7XG4gICAgc2NoZW1hLm1pbkl0ZW1zID0gZGVmLm1pblNpemUudmFsdWU7XG4gIH1cbiAgaWYgKGRlZi5tYXhTaXplKSB7XG4gICAgc2NoZW1hLm1heEl0ZW1zID0gZGVmLm1heFNpemUudmFsdWU7XG4gIH1cbiAgcmV0dXJuIHNjaGVtYTtcbn1cblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3R1cGxlLnRzXG5mdW5jdGlvbiBwYXJzZVR1cGxlRGVmKGRlZiwgcmVmcykge1xuICBpZiAoZGVmLnJlc3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgbWluSXRlbXM6IGRlZi5pdGVtcy5sZW5ndGgsXG4gICAgICBpdGVtczogZGVmLml0ZW1zLm1hcChcbiAgICAgICAgKHgsIGkpID0+IHBhcnNlRGVmKHguX2RlZiwge1xuICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcIml0ZW1zXCIsIGAke2l9YF1cbiAgICAgICAgfSlcbiAgICAgICkucmVkdWNlKFxuICAgICAgICAoYWNjLCB4KSA9PiB4ID09PSB2b2lkIDAgPyBhY2MgOiBbLi4uYWNjLCB4XSxcbiAgICAgICAgW11cbiAgICAgICksXG4gICAgICBhZGRpdGlvbmFsSXRlbXM6IHBhcnNlRGVmKGRlZi5yZXN0Ll9kZWYsIHtcbiAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcImFkZGl0aW9uYWxJdGVtc1wiXVxuICAgICAgfSlcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICBtaW5JdGVtczogZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgIG1heEl0ZW1zOiBkZWYuaXRlbXMubGVuZ3RoLFxuICAgICAgaXRlbXM6IGRlZi5pdGVtcy5tYXAoXG4gICAgICAgICh4LCBpKSA9PiBwYXJzZURlZih4Ll9kZWYsIHtcbiAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJpdGVtc1wiLCBgJHtpfWBdXG4gICAgICAgIH0pXG4gICAgICApLnJlZHVjZShcbiAgICAgICAgKGFjYywgeCkgPT4geCA9PT0gdm9pZCAwID8gYWNjIDogWy4uLmFjYywgeF0sXG4gICAgICAgIFtdXG4gICAgICApXG4gICAgfTtcbiAgfVxufVxuXG4vLyBzcmMvem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvdW5kZWZpbmVkLnRzXG5mdW5jdGlvbiBwYXJzZVVuZGVmaW5lZERlZigpIHtcbiAgcmV0dXJuIHtcbiAgICBub3Q6IHBhcnNlQW55RGVmKClcbiAgfTtcbn1cblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3Vua25vd24udHNcbmZ1bmN0aW9uIHBhcnNlVW5rbm93bkRlZigpIHtcbiAgcmV0dXJuIHBhcnNlQW55RGVmKCk7XG59XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9yZWFkb25seS50c1xudmFyIHBhcnNlUmVhZG9ubHlEZWYgPSAoZGVmLCByZWZzKSA9PiB7XG4gIHJldHVybiBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHJlZnMpO1xufTtcblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS9zZWxlY3QtcGFyc2VyLnRzXG52YXIgc2VsZWN0UGFyc2VyID0gKGRlZiwgdHlwZU5hbWUsIHJlZnMpID0+IHtcbiAgc3dpdGNoICh0eXBlTmFtZSkge1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RTdHJpbmc6XG4gICAgICByZXR1cm4gcGFyc2VTdHJpbmdEZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kTnVtYmVyOlxuICAgICAgcmV0dXJuIHBhcnNlTnVtYmVyRGVmKGRlZik7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZE9iamVjdDpcbiAgICAgIHJldHVybiBwYXJzZU9iamVjdERlZihkZWYsIHJlZnMpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RCaWdJbnQ6XG4gICAgICByZXR1cm4gcGFyc2VCaWdpbnREZWYoZGVmKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kQm9vbGVhbjpcbiAgICAgIHJldHVybiBwYXJzZUJvb2xlYW5EZWYoKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kRGF0ZTpcbiAgICAgIHJldHVybiBwYXJzZURhdGVEZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kVW5kZWZpbmVkOlxuICAgICAgcmV0dXJuIHBhcnNlVW5kZWZpbmVkRGVmKCk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZE51bGw6XG4gICAgICByZXR1cm4gcGFyc2VOdWxsRGVmKCk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZEFycmF5OlxuICAgICAgcmV0dXJuIHBhcnNlQXJyYXlEZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kVW5pb246XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZERpc2NyaW1pbmF0ZWRVbmlvbjpcbiAgICAgIHJldHVybiBwYXJzZVVuaW9uRGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZEludGVyc2VjdGlvbjpcbiAgICAgIHJldHVybiBwYXJzZUludGVyc2VjdGlvbkRlZihkZWYsIHJlZnMpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RUdXBsZTpcbiAgICAgIHJldHVybiBwYXJzZVR1cGxlRGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZFJlY29yZDpcbiAgICAgIHJldHVybiBwYXJzZVJlY29yZERlZihkZWYsIHJlZnMpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RMaXRlcmFsOlxuICAgICAgcmV0dXJuIHBhcnNlTGl0ZXJhbERlZihkZWYpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RFbnVtOlxuICAgICAgcmV0dXJuIHBhcnNlRW51bURlZihkZWYpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2ROYXRpdmVFbnVtOlxuICAgICAgcmV0dXJuIHBhcnNlTmF0aXZlRW51bURlZihkZWYpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2ROdWxsYWJsZTpcbiAgICAgIHJldHVybiBwYXJzZU51bGxhYmxlRGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZE9wdGlvbmFsOlxuICAgICAgcmV0dXJuIHBhcnNlT3B0aW9uYWxEZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kTWFwOlxuICAgICAgcmV0dXJuIHBhcnNlTWFwRGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZFNldDpcbiAgICAgIHJldHVybiBwYXJzZVNldERlZihkZWYsIHJlZnMpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RMYXp5OlxuICAgICAgcmV0dXJuICgpID0+IGRlZi5nZXR0ZXIoKS5fZGVmO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RQcm9taXNlOlxuICAgICAgcmV0dXJuIHBhcnNlUHJvbWlzZURlZihkZWYsIHJlZnMpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2ROYU46XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZE5ldmVyOlxuICAgICAgcmV0dXJuIHBhcnNlTmV2ZXJEZWYoKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kRWZmZWN0czpcbiAgICAgIHJldHVybiBwYXJzZUVmZmVjdHNEZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kQW55OlxuICAgICAgcmV0dXJuIHBhcnNlQW55RGVmKCk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZFVua25vd246XG4gICAgICByZXR1cm4gcGFyc2VVbmtub3duRGVmKCk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZERlZmF1bHQ6XG4gICAgICByZXR1cm4gcGFyc2VEZWZhdWx0RGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZEJyYW5kZWQ6XG4gICAgICByZXR1cm4gcGFyc2VCcmFuZGVkRGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZFJlYWRvbmx5OlxuICAgICAgcmV0dXJuIHBhcnNlUmVhZG9ubHlEZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kQ2F0Y2g6XG4gICAgICByZXR1cm4gcGFyc2VDYXRjaERlZihkZWYsIHJlZnMpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RQaXBlbGluZTpcbiAgICAgIHJldHVybiBwYXJzZVBpcGVsaW5lRGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZEZ1bmN0aW9uOlxuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RWb2lkOlxuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RTeW1ib2w6XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovICgoXykgPT4gdm9pZCAwKSh0eXBlTmFtZSk7XG4gIH1cbn07XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2UtZGVmLnRzXG5mdW5jdGlvbiBwYXJzZURlZihkZWYsIHJlZnMsIGZvcmNlUmVzb2x1dGlvbiA9IGZhbHNlKSB7XG4gIHZhciBfYTtcbiAgY29uc3Qgc2Vlbkl0ZW0gPSByZWZzLnNlZW4uZ2V0KGRlZik7XG4gIGlmIChyZWZzLm92ZXJyaWRlKSB7XG4gICAgY29uc3Qgb3ZlcnJpZGVSZXN1bHQgPSAoX2EgPSByZWZzLm92ZXJyaWRlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChcbiAgICAgIHJlZnMsXG4gICAgICBkZWYsXG4gICAgICByZWZzLFxuICAgICAgc2Vlbkl0ZW0sXG4gICAgICBmb3JjZVJlc29sdXRpb25cbiAgICApO1xuICAgIGlmIChvdmVycmlkZVJlc3VsdCAhPT0gaWdub3JlT3ZlcnJpZGUpIHtcbiAgICAgIHJldHVybiBvdmVycmlkZVJlc3VsdDtcbiAgICB9XG4gIH1cbiAgaWYgKHNlZW5JdGVtICYmICFmb3JjZVJlc29sdXRpb24pIHtcbiAgICBjb25zdCBzZWVuU2NoZW1hID0gZ2V0JHJlZihzZWVuSXRlbSwgcmVmcyk7XG4gICAgaWYgKHNlZW5TY2hlbWEgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIHNlZW5TY2hlbWE7XG4gICAgfVxuICB9XG4gIGNvbnN0IG5ld0l0ZW0gPSB7IGRlZiwgcGF0aDogcmVmcy5jdXJyZW50UGF0aCwganNvblNjaGVtYTogdm9pZCAwIH07XG4gIHJlZnMuc2Vlbi5zZXQoZGVmLCBuZXdJdGVtKTtcbiAgY29uc3QganNvblNjaGVtYU9yR2V0dGVyID0gc2VsZWN0UGFyc2VyKGRlZiwgZGVmLnR5cGVOYW1lLCByZWZzKTtcbiAgY29uc3QganNvblNjaGVtYTIgPSB0eXBlb2YganNvblNjaGVtYU9yR2V0dGVyID09PSBcImZ1bmN0aW9uXCIgPyBwYXJzZURlZihqc29uU2NoZW1hT3JHZXR0ZXIoKSwgcmVmcykgOiBqc29uU2NoZW1hT3JHZXR0ZXI7XG4gIGlmIChqc29uU2NoZW1hMikge1xuICAgIGFkZE1ldGEoZGVmLCByZWZzLCBqc29uU2NoZW1hMik7XG4gIH1cbiAgaWYgKHJlZnMucG9zdFByb2Nlc3MpIHtcbiAgICBjb25zdCBwb3N0UHJvY2Vzc1Jlc3VsdCA9IHJlZnMucG9zdFByb2Nlc3MoanNvblNjaGVtYTIsIGRlZiwgcmVmcyk7XG4gICAgbmV3SXRlbS5qc29uU2NoZW1hID0ganNvblNjaGVtYTI7XG4gICAgcmV0dXJuIHBvc3RQcm9jZXNzUmVzdWx0O1xuICB9XG4gIG5ld0l0ZW0uanNvblNjaGVtYSA9IGpzb25TY2hlbWEyO1xuICByZXR1cm4ganNvblNjaGVtYTI7XG59XG52YXIgZ2V0JHJlZiA9IChpdGVtLCByZWZzKSA9PiB7XG4gIHN3aXRjaCAocmVmcy4kcmVmU3RyYXRlZ3kpIHtcbiAgICBjYXNlIFwicm9vdFwiOlxuICAgICAgcmV0dXJuIHsgJHJlZjogaXRlbS5wYXRoLmpvaW4oXCIvXCIpIH07XG4gICAgY2FzZSBcInJlbGF0aXZlXCI6XG4gICAgICByZXR1cm4geyAkcmVmOiBnZXRSZWxhdGl2ZVBhdGgocmVmcy5jdXJyZW50UGF0aCwgaXRlbS5wYXRoKSB9O1xuICAgIGNhc2UgXCJub25lXCI6XG4gICAgY2FzZSBcInNlZW5cIjoge1xuICAgICAgaWYgKGl0ZW0ucGF0aC5sZW5ndGggPCByZWZzLmN1cnJlbnRQYXRoLmxlbmd0aCAmJiBpdGVtLnBhdGguZXZlcnkoKHZhbHVlLCBpbmRleCkgPT4gcmVmcy5jdXJyZW50UGF0aFtpbmRleF0gPT09IHZhbHVlKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFJlY3Vyc2l2ZSByZWZlcmVuY2UgZGV0ZWN0ZWQgYXQgJHtyZWZzLmN1cnJlbnRQYXRoLmpvaW4oXG4gICAgICAgICAgICBcIi9cIlxuICAgICAgICAgICl9ISBEZWZhdWx0aW5nIHRvIGFueWBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlQW55RGVmKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVmcy4kcmVmU3RyYXRlZ3kgPT09IFwic2VlblwiID8gcGFyc2VBbnlEZWYoKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbn07XG52YXIgYWRkTWV0YSA9IChkZWYsIHJlZnMsIGpzb25TY2hlbWEyKSA9PiB7XG4gIGlmIChkZWYuZGVzY3JpcHRpb24pIHtcbiAgICBqc29uU2NoZW1hMi5kZXNjcmlwdGlvbiA9IGRlZi5kZXNjcmlwdGlvbjtcbiAgfVxuICByZXR1cm4ganNvblNjaGVtYTI7XG59O1xuXG4vLyBzcmMvem9kLXRvLWpzb24tc2NoZW1hL3JlZnMudHNcbnZhciBnZXRSZWZzID0gKG9wdGlvbnMpID0+IHtcbiAgY29uc3QgX29wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucyhvcHRpb25zKTtcbiAgY29uc3QgY3VycmVudFBhdGggPSBfb3B0aW9ucy5uYW1lICE9PSB2b2lkIDAgPyBbLi4uX29wdGlvbnMuYmFzZVBhdGgsIF9vcHRpb25zLmRlZmluaXRpb25QYXRoLCBfb3B0aW9ucy5uYW1lXSA6IF9vcHRpb25zLmJhc2VQYXRoO1xuICByZXR1cm4ge1xuICAgIC4uLl9vcHRpb25zLFxuICAgIGN1cnJlbnRQYXRoLFxuICAgIHByb3BlcnR5UGF0aDogdm9pZCAwLFxuICAgIHNlZW46IG5ldyBNYXAoXG4gICAgICBPYmplY3QuZW50cmllcyhfb3B0aW9ucy5kZWZpbml0aW9ucykubWFwKChbbmFtZSwgZGVmXSkgPT4gW1xuICAgICAgICBkZWYuX2RlZixcbiAgICAgICAge1xuICAgICAgICAgIGRlZjogZGVmLl9kZWYsXG4gICAgICAgICAgcGF0aDogWy4uLl9vcHRpb25zLmJhc2VQYXRoLCBfb3B0aW9ucy5kZWZpbml0aW9uUGF0aCwgbmFtZV0sXG4gICAgICAgICAgLy8gUmVzb2x1dGlvbiBvZiByZWZlcmVuY2VzIHdpbGwgYmUgZm9yY2VkIGV2ZW4gdGhvdWdoIHNlZW4sIHNvIGl0J3Mgb2sgdGhhdCB0aGUgc2NoZW1hIGlzIHVuZGVmaW5lZCBoZXJlIGZvciBub3cuXG4gICAgICAgICAganNvblNjaGVtYTogdm9pZCAwXG4gICAgICAgIH1cbiAgICAgIF0pXG4gICAgKVxuICB9O1xufTtcblxuLy8gc3JjL3pvZC10by1qc29uLXNjaGVtYS96b2QtdG8tanNvbi1zY2hlbWEudHNcbnZhciB6b2RUb0pzb25TY2hlbWEgPSAoc2NoZW1hLCBvcHRpb25zKSA9PiB7XG4gIHZhciBfYTtcbiAgY29uc3QgcmVmcyA9IGdldFJlZnMob3B0aW9ucyk7XG4gIGxldCBkZWZpbml0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuZGVmaW5pdGlvbnMgPyBPYmplY3QuZW50cmllcyhvcHRpb25zLmRlZmluaXRpb25zKS5yZWR1Y2UoXG4gICAgKGFjYywgW25hbWUyLCBzY2hlbWEyXSkgPT4ge1xuICAgICAgdmFyIF9hMjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmFjYyxcbiAgICAgICAgW25hbWUyXTogKF9hMiA9IHBhcnNlRGVmKFxuICAgICAgICAgIHNjaGVtYTIuX2RlZixcbiAgICAgICAgICB7XG4gICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmJhc2VQYXRoLCByZWZzLmRlZmluaXRpb25QYXRoLCBuYW1lMl1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKSkgIT0gbnVsbCA/IF9hMiA6IHBhcnNlQW55RGVmKClcbiAgICAgIH07XG4gICAgfSxcbiAgICB7fVxuICApIDogdm9pZCAwO1xuICBjb25zdCBuYW1lID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgPyBvcHRpb25zIDogKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMubmFtZVN0cmF0ZWd5KSA9PT0gXCJ0aXRsZVwiID8gdm9pZCAwIDogb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5uYW1lO1xuICBjb25zdCBtYWluID0gKF9hID0gcGFyc2VEZWYoXG4gICAgc2NoZW1hLl9kZWYsXG4gICAgbmFtZSA9PT0gdm9pZCAwID8gcmVmcyA6IHtcbiAgICAgIC4uLnJlZnMsXG4gICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuYmFzZVBhdGgsIHJlZnMuZGVmaW5pdGlvblBhdGgsIG5hbWVdXG4gICAgfSxcbiAgICBmYWxzZVxuICApKSAhPSBudWxsID8gX2EgOiBwYXJzZUFueURlZigpO1xuICBjb25zdCB0aXRsZSA9IHR5cGVvZiBvcHRpb25zID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMubmFtZSAhPT0gdm9pZCAwICYmIG9wdGlvbnMubmFtZVN0cmF0ZWd5ID09PSBcInRpdGxlXCIgPyBvcHRpb25zLm5hbWUgOiB2b2lkIDA7XG4gIGlmICh0aXRsZSAhPT0gdm9pZCAwKSB7XG4gICAgbWFpbi50aXRsZSA9IHRpdGxlO1xuICB9XG4gIGNvbnN0IGNvbWJpbmVkID0gbmFtZSA9PT0gdm9pZCAwID8gZGVmaW5pdGlvbnMgPyB7XG4gICAgLi4ubWFpbixcbiAgICBbcmVmcy5kZWZpbml0aW9uUGF0aF06IGRlZmluaXRpb25zXG4gIH0gOiBtYWluIDoge1xuICAgICRyZWY6IFtcbiAgICAgIC4uLnJlZnMuJHJlZlN0cmF0ZWd5ID09PSBcInJlbGF0aXZlXCIgPyBbXSA6IHJlZnMuYmFzZVBhdGgsXG4gICAgICByZWZzLmRlZmluaXRpb25QYXRoLFxuICAgICAgbmFtZVxuICAgIF0uam9pbihcIi9cIiksXG4gICAgW3JlZnMuZGVmaW5pdGlvblBhdGhdOiB7XG4gICAgICAuLi5kZWZpbml0aW9ucyxcbiAgICAgIFtuYW1lXTogbWFpblxuICAgIH1cbiAgfTtcbiAgY29tYmluZWQuJHNjaGVtYSA9IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjXCI7XG4gIHJldHVybiBjb21iaW5lZDtcbn07XG5cbi8vIHNyYy96b2QtdG8tanNvbi1zY2hlbWEvaW5kZXgudHNcbnZhciB6b2RfdG9fanNvbl9zY2hlbWFfZGVmYXVsdCA9IHpvZFRvSnNvblNjaGVtYTtcblxuLy8gc3JjL3pvZC1zY2hlbWEudHNcbmZ1bmN0aW9uIHpvZDNTY2hlbWEoem9kU2NoZW1hMiwgb3B0aW9ucykge1xuICB2YXIgX2E7XG4gIGNvbnN0IHVzZVJlZmVyZW5jZXMgPSAoX2EgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnVzZVJlZmVyZW5jZXMpICE9IG51bGwgPyBfYSA6IGZhbHNlO1xuICByZXR1cm4ganNvblNjaGVtYShcbiAgICB6b2RfdG9fanNvbl9zY2hlbWFfZGVmYXVsdCh6b2RTY2hlbWEyLCB7XG4gICAgICAkcmVmU3RyYXRlZ3k6IHVzZVJlZmVyZW5jZXMgPyBcInJvb3RcIiA6IFwibm9uZVwiXG4gICAgfSksXG4gICAge1xuICAgICAgdmFsaWRhdGU6IGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB6b2RTY2hlbWEyLnNhZmVQYXJzZUFzeW5jKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5zdWNjZXNzID8geyBzdWNjZXNzOiB0cnVlLCB2YWx1ZTogcmVzdWx0LmRhdGEgfSA6IHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiByZXN1bHQuZXJyb3IgfTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59XG5mdW5jdGlvbiB6b2Q0U2NoZW1hKHpvZFNjaGVtYTIsIG9wdGlvbnMpIHtcbiAgdmFyIF9hO1xuICBjb25zdCB1c2VSZWZlcmVuY2VzID0gKF9hID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy51c2VSZWZlcmVuY2VzKSAhPSBudWxsID8gX2EgOiBmYWxzZTtcbiAgY29uc3QgejRKU09OU2NoZW1hID0gejQudG9KU09OU2NoZW1hKHpvZFNjaGVtYTIsIHtcbiAgICB0YXJnZXQ6IFwiZHJhZnQtN1wiLFxuICAgIGlvOiBcIm91dHB1dFwiLFxuICAgIHJldXNlZDogdXNlUmVmZXJlbmNlcyA/IFwicmVmXCIgOiBcImlubGluZVwiXG4gIH0pO1xuICByZXR1cm4ganNvblNjaGVtYSh6NEpTT05TY2hlbWEsIHtcbiAgICB2YWxpZGF0ZTogYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB6NC5zYWZlUGFyc2VBc3luYyh6b2RTY2hlbWEyLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gcmVzdWx0LnN1Y2Nlc3MgPyB7IHN1Y2Nlc3M6IHRydWUsIHZhbHVlOiByZXN1bHQuZGF0YSB9IDogeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IHJlc3VsdC5lcnJvciB9O1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBpc1pvZDRTY2hlbWEoem9kU2NoZW1hMikge1xuICByZXR1cm4gXCJfem9kXCIgaW4gem9kU2NoZW1hMjtcbn1cbmZ1bmN0aW9uIHpvZFNjaGVtYSh6b2RTY2hlbWEyLCBvcHRpb25zKSB7XG4gIGlmIChpc1pvZDRTY2hlbWEoem9kU2NoZW1hMikpIHtcbiAgICByZXR1cm4gem9kNFNjaGVtYSh6b2RTY2hlbWEyLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gem9kM1NjaGVtYSh6b2RTY2hlbWEyLCBvcHRpb25zKTtcbiAgfVxufVxuXG4vLyBzcmMvc2NoZW1hLnRzXG52YXIgc2NoZW1hU3ltYm9sID0gU3ltYm9sLmZvcihcInZlcmNlbC5haS5zY2hlbWFcIik7XG5mdW5jdGlvbiBqc29uU2NoZW1hKGpzb25TY2hlbWEyLCB7XG4gIHZhbGlkYXRlXG59ID0ge30pIHtcbiAgcmV0dXJuIHtcbiAgICBbc2NoZW1hU3ltYm9sXTogdHJ1ZSxcbiAgICBfdHlwZTogdm9pZCAwLFxuICAgIC8vIHNob3VsZCBuZXZlciBiZSB1c2VkIGRpcmVjdGx5XG4gICAgW3ZhbGlkYXRvclN5bWJvbF06IHRydWUsXG4gICAganNvblNjaGVtYToganNvblNjaGVtYTIsXG4gICAgdmFsaWRhdGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzU2NoZW1hKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwgJiYgc2NoZW1hU3ltYm9sIGluIHZhbHVlICYmIHZhbHVlW3NjaGVtYVN5bWJvbF0gPT09IHRydWUgJiYgXCJqc29uU2NoZW1hXCIgaW4gdmFsdWUgJiYgXCJ2YWxpZGF0ZVwiIGluIHZhbHVlO1xufVxuZnVuY3Rpb24gYXNTY2hlbWEoc2NoZW1hKSB7XG4gIHJldHVybiBzY2hlbWEgPT0gbnVsbCA/IGpzb25TY2hlbWEoe1xuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZVxuICB9KSA6IGlzU2NoZW1hKHNjaGVtYSkgPyBzY2hlbWEgOiB6b2RTY2hlbWEoc2NoZW1hKTtcbn1cblxuLy8gc3JjL3VpbnQ4LXV0aWxzLnRzXG52YXIgeyBidG9hLCBhdG9iIH0gPSBnbG9iYWxUaGlzO1xuZnVuY3Rpb24gY29udmVydEJhc2U2NFRvVWludDhBcnJheShiYXNlNjRTdHJpbmcpIHtcbiAgY29uc3QgYmFzZTY0VXJsID0gYmFzZTY0U3RyaW5nLnJlcGxhY2UoLy0vZywgXCIrXCIpLnJlcGxhY2UoL18vZywgXCIvXCIpO1xuICBjb25zdCBsYXRpbjFzdHJpbmcgPSBhdG9iKGJhc2U2NFVybCk7XG4gIHJldHVybiBVaW50OEFycmF5LmZyb20obGF0aW4xc3RyaW5nLCAoYnl0ZSkgPT4gYnl0ZS5jb2RlUG9pbnRBdCgwKSk7XG59XG5mdW5jdGlvbiBjb252ZXJ0VWludDhBcnJheVRvQmFzZTY0KGFycmF5KSB7XG4gIGxldCBsYXRpbjFzdHJpbmcgPSBcIlwiO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgbGF0aW4xc3RyaW5nICs9IFN0cmluZy5mcm9tQ29kZVBvaW50KGFycmF5W2ldKTtcbiAgfVxuICByZXR1cm4gYnRvYShsYXRpbjFzdHJpbmcpO1xufVxuZnVuY3Rpb24gY29udmVydFRvQmFzZTY0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBjb252ZXJ0VWludDhBcnJheVRvQmFzZTY0KHZhbHVlKSA6IHZhbHVlO1xufVxuXG4vLyBzcmMvd2l0aG91dC10cmFpbGluZy1zbGFzaC50c1xuZnVuY3Rpb24gd2l0aG91dFRyYWlsaW5nU2xhc2godXJsKSB7XG4gIHJldHVybiB1cmwgPT0gbnVsbCA/IHZvaWQgMCA6IHVybC5yZXBsYWNlKC9cXC8kLywgXCJcIik7XG59XG5cbi8vIHNyYy9pcy1hc3luYy1pdGVyYWJsZS50c1xuZnVuY3Rpb24gaXNBc3luY0l0ZXJhYmxlKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgdHlwZW9mIG9ialtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuLy8gc3JjL3R5cGVzL2V4ZWN1dGUtdG9vbC50c1xuYXN5bmMgZnVuY3Rpb24qIGV4ZWN1dGVUb29sKHtcbiAgZXhlY3V0ZSxcbiAgaW5wdXQsXG4gIG9wdGlvbnNcbn0pIHtcbiAgY29uc3QgcmVzdWx0ID0gZXhlY3V0ZShpbnB1dCwgb3B0aW9ucyk7XG4gIGlmIChpc0FzeW5jSXRlcmFibGUocmVzdWx0KSkge1xuICAgIGxldCBsYXN0T3V0cHV0O1xuICAgIGZvciBhd2FpdCAoY29uc3Qgb3V0cHV0IG9mIHJlc3VsdCkge1xuICAgICAgbGFzdE91dHB1dCA9IG91dHB1dDtcbiAgICAgIHlpZWxkIHsgdHlwZTogXCJwcmVsaW1pbmFyeVwiLCBvdXRwdXQgfTtcbiAgICB9XG4gICAgeWllbGQgeyB0eXBlOiBcImZpbmFsXCIsIG91dHB1dDogbGFzdE91dHB1dCB9O1xuICB9IGVsc2Uge1xuICAgIHlpZWxkIHsgdHlwZTogXCJmaW5hbFwiLCBvdXRwdXQ6IGF3YWl0IHJlc3VsdCB9O1xuICB9XG59XG5cbi8vIHNyYy9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcIkBzdGFuZGFyZC1zY2hlbWEvc3BlY1wiO1xuaW1wb3J0IHtcbiAgRXZlbnRTb3VyY2VQYXJzZXJTdHJlYW0gYXMgRXZlbnRTb3VyY2VQYXJzZXJTdHJlYW0yXG59IGZyb20gXCJldmVudHNvdXJjZS1wYXJzZXIvc3RyZWFtXCI7XG5leHBvcnQge1xuICBFdmVudFNvdXJjZVBhcnNlclN0cmVhbTIgYXMgRXZlbnRTb3VyY2VQYXJzZXJTdHJlYW0sXG4gIFZFUlNJT04sXG4gIGFzU2NoZW1hLFxuICBhc1ZhbGlkYXRvcixcbiAgY29tYmluZUhlYWRlcnMsXG4gIGNvbnZlcnRBc3luY0l0ZXJhdG9yVG9SZWFkYWJsZVN0cmVhbSxcbiAgY29udmVydEJhc2U2NFRvVWludDhBcnJheSxcbiAgY29udmVydFRvQmFzZTY0LFxuICBjb252ZXJ0VWludDhBcnJheVRvQmFzZTY0LFxuICBjcmVhdGVCaW5hcnlSZXNwb25zZUhhbmRsZXIsXG4gIGNyZWF0ZUV2ZW50U291cmNlUmVzcG9uc2VIYW5kbGVyLFxuICBjcmVhdGVJZEdlbmVyYXRvcixcbiAgY3JlYXRlSnNvbkVycm9yUmVzcG9uc2VIYW5kbGVyLFxuICBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyLFxuICBjcmVhdGVKc29uU3RyZWFtUmVzcG9uc2VIYW5kbGVyLFxuICBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeSxcbiAgY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnlXaXRoT3V0cHV0U2NoZW1hLFxuICBjcmVhdGVTdGF0dXNDb2RlRXJyb3JSZXNwb25zZUhhbmRsZXIsXG4gIGRlbGF5LFxuICBkeW5hbWljVG9vbCxcbiAgZXhlY3V0ZVRvb2wsXG4gIGV4dHJhY3RSZXNwb25zZUhlYWRlcnMsXG4gIGdlbmVyYXRlSWQsXG4gIGdldEVycm9yTWVzc2FnZSxcbiAgZ2V0RnJvbUFwaSxcbiAgZ2V0UnVudGltZUVudmlyb25tZW50VXNlckFnZW50LFxuICBpbmplY3RKc29uSW5zdHJ1Y3Rpb25JbnRvTWVzc2FnZXMsXG4gIGlzQWJvcnRFcnJvcixcbiAgaXNQYXJzYWJsZUpzb24sXG4gIGlzVXJsU3VwcG9ydGVkLFxuICBpc1ZhbGlkYXRvcixcbiAganNvblNjaGVtYSxcbiAgbG9hZEFwaUtleSxcbiAgbG9hZE9wdGlvbmFsU2V0dGluZyxcbiAgbG9hZFNldHRpbmcsXG4gIG1lZGlhVHlwZVRvRXh0ZW5zaW9uLFxuICBwYXJzZUpTT04sXG4gIHBhcnNlSnNvbkV2ZW50U3RyZWFtLFxuICBwYXJzZVByb3ZpZGVyT3B0aW9ucyxcbiAgcG9zdEZvcm1EYXRhVG9BcGksXG4gIHBvc3RKc29uVG9BcGksXG4gIHBvc3RUb0FwaSxcbiAgcmVtb3ZlVW5kZWZpbmVkRW50cmllcyxcbiAgcmVzb2x2ZSxcbiAgc2FmZVBhcnNlSlNPTixcbiAgc2FmZVZhbGlkYXRlVHlwZXMsXG4gIHN0YW5kYXJkU2NoZW1hVmFsaWRhdG9yLFxuICB0b29sLFxuICB2YWxpZGF0ZVR5cGVzLFxuICB2YWxpZGF0b3IsXG4gIHZhbGlkYXRvclN5bWJvbCxcbiAgd2l0aFVzZXJBZ2VudFN1ZmZpeCxcbiAgd2l0aG91dFRyYWlsaW5nU2xhc2gsXG4gIHpvZFNjaGVtYVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@ai-sdk/provider/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AISDKError: () => (/* binding */ AISDKError),\n/* harmony export */   APICallError: () => (/* binding */ APICallError),\n/* harmony export */   EmptyResponseBodyError: () => (/* binding */ EmptyResponseBodyError),\n/* harmony export */   InvalidArgumentError: () => (/* binding */ InvalidArgumentError),\n/* harmony export */   InvalidPromptError: () => (/* binding */ InvalidPromptError),\n/* harmony export */   InvalidResponseDataError: () => (/* binding */ InvalidResponseDataError),\n/* harmony export */   JSONParseError: () => (/* binding */ JSONParseError),\n/* harmony export */   LoadAPIKeyError: () => (/* binding */ LoadAPIKeyError),\n/* harmony export */   LoadSettingError: () => (/* binding */ LoadSettingError),\n/* harmony export */   NoContentGeneratedError: () => (/* binding */ NoContentGeneratedError),\n/* harmony export */   NoSuchModelError: () => (/* binding */ NoSuchModelError),\n/* harmony export */   TooManyEmbeddingValuesForCallError: () => (/* binding */ TooManyEmbeddingValuesForCallError),\n/* harmony export */   TypeValidationError: () => (/* binding */ TypeValidationError),\n/* harmony export */   UnsupportedFunctionalityError: () => (/* binding */ UnsupportedFunctionalityError),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   isJSONArray: () => (/* binding */ isJSONArray),\n/* harmony export */   isJSONObject: () => (/* binding */ isJSONObject),\n/* harmony export */   isJSONValue: () => (/* binding */ isJSONValue)\n/* harmony export */ });\n// src/errors/ai-sdk-error.ts\nvar marker = \"vercel.ai.error\";\nvar symbol = Symbol.for(marker);\nvar _a;\nvar _AISDKError = class _AISDKError extends Error {\n  /**\n   * Creates an AI SDK Error.\n   *\n   * @param {Object} params - The parameters for creating the error.\n   * @param {string} params.name - The name of the error.\n   * @param {string} params.message - The error message.\n   * @param {unknown} [params.cause] - The underlying cause of the error.\n   */\n  constructor({\n    name: name14,\n    message,\n    cause\n  }) {\n    super(message);\n    this[_a] = true;\n    this.name = name14;\n    this.cause = cause;\n  }\n  /**\n   * Checks if the given error is an AI SDK Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is an AI SDK Error, false otherwise.\n   */\n  static isInstance(error) {\n    return _AISDKError.hasMarker(error, marker);\n  }\n  static hasMarker(error, marker15) {\n    const markerSymbol = Symbol.for(marker15);\n    return error != null && typeof error === \"object\" && markerSymbol in error && typeof error[markerSymbol] === \"boolean\" && error[markerSymbol] === true;\n  }\n};\n_a = symbol;\nvar AISDKError = _AISDKError;\n\n// src/errors/api-call-error.ts\nvar name = \"AI_APICallError\";\nvar marker2 = `vercel.ai.error.${name}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2;\nvar APICallError = class extends AISDKError {\n  constructor({\n    message,\n    url,\n    requestBodyValues,\n    statusCode,\n    responseHeaders,\n    responseBody,\n    cause,\n    isRetryable = statusCode != null && (statusCode === 408 || // request timeout\n    statusCode === 409 || // conflict\n    statusCode === 429 || // too many requests\n    statusCode >= 500),\n    // server error\n    data\n  }) {\n    super({ name, message, cause });\n    this[_a2] = true;\n    this.url = url;\n    this.requestBodyValues = requestBodyValues;\n    this.statusCode = statusCode;\n    this.responseHeaders = responseHeaders;\n    this.responseBody = responseBody;\n    this.isRetryable = isRetryable;\n    this.data = data;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker2);\n  }\n};\n_a2 = symbol2;\n\n// src/errors/empty-response-body-error.ts\nvar name2 = \"AI_EmptyResponseBodyError\";\nvar marker3 = `vercel.ai.error.${name2}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3;\nvar EmptyResponseBodyError = class extends AISDKError {\n  // used in isInstance\n  constructor({ message = \"Empty response body\" } = {}) {\n    super({ name: name2, message });\n    this[_a3] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker3);\n  }\n};\n_a3 = symbol3;\n\n// src/errors/get-error-message.ts\nfunction getErrorMessage(error) {\n  if (error == null) {\n    return \"unknown error\";\n  }\n  if (typeof error === \"string\") {\n    return error;\n  }\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return JSON.stringify(error);\n}\n\n// src/errors/invalid-argument-error.ts\nvar name3 = \"AI_InvalidArgumentError\";\nvar marker4 = `vercel.ai.error.${name3}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4;\nvar InvalidArgumentError = class extends AISDKError {\n  constructor({\n    message,\n    cause,\n    argument\n  }) {\n    super({ name: name3, message, cause });\n    this[_a4] = true;\n    this.argument = argument;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker4);\n  }\n};\n_a4 = symbol4;\n\n// src/errors/invalid-prompt-error.ts\nvar name4 = \"AI_InvalidPromptError\";\nvar marker5 = `vercel.ai.error.${name4}`;\nvar symbol5 = Symbol.for(marker5);\nvar _a5;\nvar InvalidPromptError = class extends AISDKError {\n  constructor({\n    prompt,\n    message,\n    cause\n  }) {\n    super({ name: name4, message: `Invalid prompt: ${message}`, cause });\n    this[_a5] = true;\n    this.prompt = prompt;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker5);\n  }\n};\n_a5 = symbol5;\n\n// src/errors/invalid-response-data-error.ts\nvar name5 = \"AI_InvalidResponseDataError\";\nvar marker6 = `vercel.ai.error.${name5}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6;\nvar InvalidResponseDataError = class extends AISDKError {\n  constructor({\n    data,\n    message = `Invalid response data: ${JSON.stringify(data)}.`\n  }) {\n    super({ name: name5, message });\n    this[_a6] = true;\n    this.data = data;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker6);\n  }\n};\n_a6 = symbol6;\n\n// src/errors/json-parse-error.ts\nvar name6 = \"AI_JSONParseError\";\nvar marker7 = `vercel.ai.error.${name6}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7;\nvar JSONParseError = class extends AISDKError {\n  constructor({ text, cause }) {\n    super({\n      name: name6,\n      message: `JSON parsing failed: Text: ${text}.\nError message: ${getErrorMessage(cause)}`,\n      cause\n    });\n    this[_a7] = true;\n    this.text = text;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker7);\n  }\n};\n_a7 = symbol7;\n\n// src/errors/load-api-key-error.ts\nvar name7 = \"AI_LoadAPIKeyError\";\nvar marker8 = `vercel.ai.error.${name7}`;\nvar symbol8 = Symbol.for(marker8);\nvar _a8;\nvar LoadAPIKeyError = class extends AISDKError {\n  // used in isInstance\n  constructor({ message }) {\n    super({ name: name7, message });\n    this[_a8] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker8);\n  }\n};\n_a8 = symbol8;\n\n// src/errors/load-setting-error.ts\nvar name8 = \"AI_LoadSettingError\";\nvar marker9 = `vercel.ai.error.${name8}`;\nvar symbol9 = Symbol.for(marker9);\nvar _a9;\nvar LoadSettingError = class extends AISDKError {\n  // used in isInstance\n  constructor({ message }) {\n    super({ name: name8, message });\n    this[_a9] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker9);\n  }\n};\n_a9 = symbol9;\n\n// src/errors/no-content-generated-error.ts\nvar name9 = \"AI_NoContentGeneratedError\";\nvar marker10 = `vercel.ai.error.${name9}`;\nvar symbol10 = Symbol.for(marker10);\nvar _a10;\nvar NoContentGeneratedError = class extends AISDKError {\n  // used in isInstance\n  constructor({\n    message = \"No content generated.\"\n  } = {}) {\n    super({ name: name9, message });\n    this[_a10] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker10);\n  }\n};\n_a10 = symbol10;\n\n// src/errors/no-such-model-error.ts\nvar name10 = \"AI_NoSuchModelError\";\nvar marker11 = `vercel.ai.error.${name10}`;\nvar symbol11 = Symbol.for(marker11);\nvar _a11;\nvar NoSuchModelError = class extends AISDKError {\n  constructor({\n    errorName = name10,\n    modelId,\n    modelType,\n    message = `No such ${modelType}: ${modelId}`\n  }) {\n    super({ name: errorName, message });\n    this[_a11] = true;\n    this.modelId = modelId;\n    this.modelType = modelType;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker11);\n  }\n};\n_a11 = symbol11;\n\n// src/errors/too-many-embedding-values-for-call-error.ts\nvar name11 = \"AI_TooManyEmbeddingValuesForCallError\";\nvar marker12 = `vercel.ai.error.${name11}`;\nvar symbol12 = Symbol.for(marker12);\nvar _a12;\nvar TooManyEmbeddingValuesForCallError = class extends AISDKError {\n  constructor(options) {\n    super({\n      name: name11,\n      message: `Too many values for a single embedding call. The ${options.provider} model \"${options.modelId}\" can only embed up to ${options.maxEmbeddingsPerCall} values per call, but ${options.values.length} values were provided.`\n    });\n    this[_a12] = true;\n    this.provider = options.provider;\n    this.modelId = options.modelId;\n    this.maxEmbeddingsPerCall = options.maxEmbeddingsPerCall;\n    this.values = options.values;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker12);\n  }\n};\n_a12 = symbol12;\n\n// src/errors/type-validation-error.ts\nvar name12 = \"AI_TypeValidationError\";\nvar marker13 = `vercel.ai.error.${name12}`;\nvar symbol13 = Symbol.for(marker13);\nvar _a13;\nvar _TypeValidationError = class _TypeValidationError extends AISDKError {\n  constructor({ value, cause }) {\n    super({\n      name: name12,\n      message: `Type validation failed: Value: ${JSON.stringify(value)}.\nError message: ${getErrorMessage(cause)}`,\n      cause\n    });\n    this[_a13] = true;\n    this.value = value;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker13);\n  }\n  /**\n   * Wraps an error into a TypeValidationError.\n   * If the cause is already a TypeValidationError with the same value, it returns the cause.\n   * Otherwise, it creates a new TypeValidationError.\n   *\n   * @param {Object} params - The parameters for wrapping the error.\n   * @param {unknown} params.value - The value that failed validation.\n   * @param {unknown} params.cause - The original error or cause of the validation failure.\n   * @returns {TypeValidationError} A TypeValidationError instance.\n   */\n  static wrap({\n    value,\n    cause\n  }) {\n    return _TypeValidationError.isInstance(cause) && cause.value === value ? cause : new _TypeValidationError({ value, cause });\n  }\n};\n_a13 = symbol13;\nvar TypeValidationError = _TypeValidationError;\n\n// src/errors/unsupported-functionality-error.ts\nvar name13 = \"AI_UnsupportedFunctionalityError\";\nvar marker14 = `vercel.ai.error.${name13}`;\nvar symbol14 = Symbol.for(marker14);\nvar _a14;\nvar UnsupportedFunctionalityError = class extends AISDKError {\n  constructor({\n    functionality,\n    message = `'${functionality}' functionality not supported.`\n  }) {\n    super({ name: name13, message });\n    this[_a14] = true;\n    this.functionality = functionality;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker14);\n  }\n};\n_a14 = symbol14;\n\n// src/json-value/is-json.ts\nfunction isJSONValue(value) {\n  if (value === null || typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n    return true;\n  }\n  if (Array.isArray(value)) {\n    return value.every(isJSONValue);\n  }\n  if (typeof value === \"object\") {\n    return Object.entries(value).every(\n      ([key, val]) => typeof key === \"string\" && isJSONValue(val)\n    );\n  }\n  return false;\n}\nfunction isJSONArray(value) {\n  return Array.isArray(value) && value.every(isJSONValue);\n}\nfunction isJSONObject(value) {\n  return value != null && typeof value === \"object\" && Object.entries(value).every(\n    ([key, val]) => typeof key === \"string\" && isJSONValue(val)\n  );\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\n");

/***/ })

};
;